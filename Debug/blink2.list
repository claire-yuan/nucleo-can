
blink2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003088  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003144  08003144  00013144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003184  08003184  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003184  08003184  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003184  08003184  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003188  08003188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800318c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08003198  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003198  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000957d  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016dc  00000000  00000000  000295f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000778  00000000  00000000  0002acd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005bf  00000000  00000000  0002b448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a045  00000000  00000000  0002ba07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009a3b  00000000  00000000  00045a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f021  00000000  00000000  0004f487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001990  00000000  00000000  000ee4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000efe38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800312c 	.word	0x0800312c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800312c 	.word	0x0800312c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t count = 0;

uint8_t error_code = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000226:	4a18      	ldr	r2, [pc, #96]	; (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	2100      	movs	r1, #0
 800022c:	f000 fee7 	bl	8000ffe <HAL_CAN_GetRxMessage>
	if (RxData[0] == 0x11 && RxData[1] == 0x22 && RxData[2] == 0x33 && RxData[3] == 0x44 && RxData[4] == 0x55 && RxData[5] == 0x66 && RxData[6] == 0x77 && RxData[7] == 0x88)
 8000230:	4b14      	ldr	r3, [pc, #80]	; (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b11      	cmp	r3, #17
 8000236:	d121      	bne.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800023a:	785b      	ldrb	r3, [r3, #1]
 800023c:	2b22      	cmp	r3, #34	; 0x22
 800023e:	d11d      	bne.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
 8000240:	4b10      	ldr	r3, [pc, #64]	; (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000242:	789b      	ldrb	r3, [r3, #2]
 8000244:	2b33      	cmp	r3, #51	; 0x33
 8000246:	d119      	bne.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
 8000248:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800024a:	78db      	ldrb	r3, [r3, #3]
 800024c:	2b44      	cmp	r3, #68	; 0x44
 800024e:	d115      	bne.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000252:	791b      	ldrb	r3, [r3, #4]
 8000254:	2b55      	cmp	r3, #85	; 0x55
 8000256:	d111      	bne.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800025a:	795b      	ldrb	r3, [r3, #5]
 800025c:	2b66      	cmp	r3, #102	; 0x66
 800025e:	d10d      	bne.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000262:	799b      	ldrb	r3, [r3, #6]
 8000264:	2b77      	cmp	r3, #119	; 0x77
 8000266:	d109      	bne.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800026a:	79db      	ldrb	r3, [r3, #7]
 800026c:	2b88      	cmp	r3, #136	; 0x88
 800026e:	d105      	bne.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000270:	2390      	movs	r3, #144	; 0x90
 8000272:	05db      	lsls	r3, r3, #23
 8000274:	2120      	movs	r1, #32
 8000276:	0018      	movs	r0, r3
 8000278:	f001 fc9d 	bl	8001bb6 <HAL_GPIO_TogglePin>
}
 800027c:	46c0      	nop			; (mov r8, r8)
 800027e:	46bd      	mov	sp, r7
 8000280:	b002      	add	sp, #8
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000110 	.word	0x20000110
 8000288:	200000f0 	.word	0x200000f0

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000292:	f000 fb21 	bl	80008d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000296:	f000 f875 	bl	8000384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029a:	f000 f971 	bl	8000580 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800029e:	f000 f93f 	bl	8000520 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80002a2:	f000 f8cf 	bl	8000444 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 80002a6:	4b30      	ldr	r3, [pc, #192]	; (8000368 <main+0xdc>)
 80002a8:	0018      	movs	r0, r3
 80002aa:	f000 fd69 	bl	8000d80 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80002ae:	4b2e      	ldr	r3, [pc, #184]	; (8000368 <main+0xdc>)
 80002b0:	2102      	movs	r1, #2
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 ffce 	bl	8001254 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 8;
 80002b8:	4b2c      	ldr	r3, [pc, #176]	; (800036c <main+0xe0>)
 80002ba:	2208      	movs	r2, #8
 80002bc:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80002be:	4b2b      	ldr	r3, [pc, #172]	; (800036c <main+0xe0>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80002c4:	4b29      	ldr	r3, [pc, #164]	; (800036c <main+0xe0>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0b01010010011;
 80002ca:	4b28      	ldr	r3, [pc, #160]	; (800036c <main+0xe0>)
 80002cc:	4a28      	ldr	r2, [pc, #160]	; (8000370 <main+0xe4>)
 80002ce:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 80002d0:	4b26      	ldr	r3, [pc, #152]	; (800036c <main+0xe0>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	751a      	strb	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (button_pressed == 1) {
 80002d6:	4b27      	ldr	r3, [pc, #156]	; (8000374 <main+0xe8>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d1fb      	bne.n	80002d6 <main+0x4a>
	  		  uint8_t TxData[8] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88} ;
 80002de:	003b      	movs	r3, r7
 80002e0:	4a25      	ldr	r2, [pc, #148]	; (8000378 <main+0xec>)
 80002e2:	ca03      	ldmia	r2!, {r0, r1}
 80002e4:	c303      	stmia	r3!, {r0, r1}
	  		  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80002e6:	4b25      	ldr	r3, [pc, #148]	; (800037c <main+0xf0>)
 80002e8:	003a      	movs	r2, r7
 80002ea:	4920      	ldr	r1, [pc, #128]	; (800036c <main+0xe0>)
 80002ec:	481e      	ldr	r0, [pc, #120]	; (8000368 <main+0xdc>)
 80002ee:	f000 fd8d 	bl	8000e0c <HAL_CAN_AddTxMessage>

	  		  	 /* https://stackoverflow.com/questions/61376402/stm32-can-loop-back-mode*/
	  		  //waiting for message to leave
	  		  while(HAL_CAN_IsTxMessagePending(&hcan, TxMailbox));
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	4b21      	ldr	r3, [pc, #132]	; (800037c <main+0xf0>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <main+0xdc>)
 80002fa:	0011      	movs	r1, r2
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 fe57 	bl	8000fb0 <HAL_CAN_IsTxMessagePending>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d1f6      	bne.n	80002f4 <main+0x68>

	  		  //waiting for transmission request to be completed by checking RQCPx
	  		  while( !(hcan.Instance->TSR & ( 0x1 << (7 * ( TxMailbox - 1 )))));
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	4b17      	ldr	r3, [pc, #92]	; (8000368 <main+0xdc>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	6899      	ldr	r1, [r3, #8]
 800030e:	4b1b      	ldr	r3, [pc, #108]	; (800037c <main+0xf0>)
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	0013      	movs	r3, r2
 8000314:	00db      	lsls	r3, r3, #3
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	3b07      	subs	r3, #7
 800031a:	2201      	movs	r2, #1
 800031c:	409a      	lsls	r2, r3
 800031e:	0013      	movs	r3, r2
 8000320:	400b      	ands	r3, r1
 8000322:	d0f1      	beq.n	8000308 <main+0x7c>

	  		  //checking if there is an error at TERRx, may be done with TXOKx as well (i think)
	  		  if ((hcan.Instance->TSR & ( 0x8 << (7 * ( TxMailbox - 1 ))))){
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <main+0xdc>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	6899      	ldr	r1, [r3, #8]
 800032a:	4b14      	ldr	r3, [pc, #80]	; (800037c <main+0xf0>)
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	0013      	movs	r3, r2
 8000330:	00db      	lsls	r3, r3, #3
 8000332:	1a9b      	subs	r3, r3, r2
 8000334:	3b07      	subs	r3, #7
 8000336:	2208      	movs	r2, #8
 8000338:	409a      	lsls	r2, r3
 800033a:	0013      	movs	r3, r2
 800033c:	400b      	ands	r3, r1
 800033e:	d009      	beq.n	8000354 <main+0xc8>
	  		      //error is described in ESR at LEC last error code
	  		      error_code = ( hcan.Instance->ESR & 0x70 ) >> 4;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <main+0xdc>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	091b      	lsrs	r3, r3, #4
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2207      	movs	r2, #7
 800034c:	4013      	ands	r3, r2
 800034e:	b2da      	uxtb	r2, r3
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <main+0xf4>)
 8000352:	701a      	strb	r2, [r3, #0]
	  		      //110: CRC Error
	  		      //111: Set by software
	  		  }


	  		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000354:	2390      	movs	r3, #144	; 0x90
 8000356:	05db      	lsls	r3, r3, #23
 8000358:	2120      	movs	r1, #32
 800035a:	0018      	movs	r0, r3
 800035c:	f001 fc2b 	bl	8001bb6 <HAL_GPIO_TogglePin>
	  		  button_pressed = 0;
 8000360:	4b04      	ldr	r3, [pc, #16]	; (8000374 <main+0xe8>)
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
	  if (button_pressed == 1) {
 8000366:	e7b6      	b.n	80002d6 <main+0x4a>
 8000368:	20000028 	.word	0x20000028
 800036c:	200000d8 	.word	0x200000d8
 8000370:	00000293 	.word	0x00000293
 8000374:	2000011c 	.word	0x2000011c
 8000378:	08003144 	.word	0x08003144
 800037c:	2000010c 	.word	0x2000010c
 8000380:	20000118 	.word	0x20000118

08000384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000384:	b590      	push	{r4, r7, lr}
 8000386:	b099      	sub	sp, #100	; 0x64
 8000388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038a:	242c      	movs	r4, #44	; 0x2c
 800038c:	193b      	adds	r3, r7, r4
 800038e:	0018      	movs	r0, r3
 8000390:	2334      	movs	r3, #52	; 0x34
 8000392:	001a      	movs	r2, r3
 8000394:	2100      	movs	r1, #0
 8000396:	f002 fe9d 	bl	80030d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039a:	231c      	movs	r3, #28
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	0018      	movs	r0, r3
 80003a0:	2310      	movs	r3, #16
 80003a2:	001a      	movs	r2, r3
 80003a4:	2100      	movs	r1, #0
 80003a6:	f002 fe95 	bl	80030d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003aa:	003b      	movs	r3, r7
 80003ac:	0018      	movs	r0, r3
 80003ae:	231c      	movs	r3, #28
 80003b0:	001a      	movs	r2, r3
 80003b2:	2100      	movs	r1, #0
 80003b4:	f002 fe8e 	bl	80030d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003b8:	0021      	movs	r1, r4
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2201      	movs	r2, #1
 80003be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2205      	movs	r2, #5
 80003c4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2202      	movs	r2, #2
 80003ca:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2280      	movs	r2, #128	; 0x80
 80003d0:	0252      	lsls	r2, r2, #9
 80003d2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	22a0      	movs	r2, #160	; 0xa0
 80003d8:	0392      	lsls	r2, r2, #14
 80003da:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2201      	movs	r2, #1
 80003e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 fc1d 	bl	8001c24 <HAL_RCC_OscConfig>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003ee:	f000 f949 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	211c      	movs	r1, #28
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2207      	movs	r2, #7
 80003f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2202      	movs	r2, #2
 80003fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2101      	movs	r1, #1
 8000410:	0018      	movs	r0, r3
 8000412:	f001 ff8d 	bl	8002330 <HAL_RCC_ClockConfig>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800041a:	f000 f933 	bl	8000684 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800041e:	003b      	movs	r3, r7
 8000420:	2202      	movs	r2, #2
 8000422:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000424:	003b      	movs	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800042a:	003b      	movs	r3, r7
 800042c:	0018      	movs	r0, r3
 800042e:	f002 f8eb 	bl	8002608 <HAL_RCCEx_PeriphCLKConfig>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000436:	f000 f925 	bl	8000684 <Error_Handler>
  }
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b019      	add	sp, #100	; 0x64
 8000440:	bd90      	pop	{r4, r7, pc}
	...

08000444 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800044a:	4b33      	ldr	r3, [pc, #204]	; (8000518 <MX_CAN_Init+0xd4>)
 800044c:	4a33      	ldr	r2, [pc, #204]	; (800051c <MX_CAN_Init+0xd8>)
 800044e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 8000450:	4b31      	ldr	r3, [pc, #196]	; (8000518 <MX_CAN_Init+0xd4>)
 8000452:	220c      	movs	r2, #12
 8000454:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000456:	4b30      	ldr	r3, [pc, #192]	; (8000518 <MX_CAN_Init+0xd4>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800045c:	4b2e      	ldr	r3, [pc, #184]	; (8000518 <MX_CAN_Init+0xd4>)
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000462:	4b2d      	ldr	r3, [pc, #180]	; (8000518 <MX_CAN_Init+0xd4>)
 8000464:	22c0      	movs	r2, #192	; 0xc0
 8000466:	0312      	lsls	r2, r2, #12
 8000468:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800046a:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <MX_CAN_Init+0xd4>)
 800046c:	2280      	movs	r2, #128	; 0x80
 800046e:	0352      	lsls	r2, r2, #13
 8000470:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000472:	4b29      	ldr	r3, [pc, #164]	; (8000518 <MX_CAN_Init+0xd4>)
 8000474:	2200      	movs	r2, #0
 8000476:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000478:	4b27      	ldr	r3, [pc, #156]	; (8000518 <MX_CAN_Init+0xd4>)
 800047a:	2200      	movs	r2, #0
 800047c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800047e:	4b26      	ldr	r3, [pc, #152]	; (8000518 <MX_CAN_Init+0xd4>)
 8000480:	2200      	movs	r2, #0
 8000482:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000484:	4b24      	ldr	r3, [pc, #144]	; (8000518 <MX_CAN_Init+0xd4>)
 8000486:	2200      	movs	r2, #0
 8000488:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800048a:	4b23      	ldr	r3, [pc, #140]	; (8000518 <MX_CAN_Init+0xd4>)
 800048c:	2200      	movs	r2, #0
 800048e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000490:	4b21      	ldr	r3, [pc, #132]	; (8000518 <MX_CAN_Init+0xd4>)
 8000492:	2200      	movs	r2, #0
 8000494:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000496:	4b20      	ldr	r3, [pc, #128]	; (8000518 <MX_CAN_Init+0xd4>)
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fa81 	bl	80009a0 <HAL_CAN_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80004a2:	f000 f8ef 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80004a6:	003b      	movs	r3, r7
 80004a8:	2201      	movs	r2, #1
 80004aa:	621a      	str	r2, [r3, #32]
  canfilterconfig.FilterBank = 0;
 80004ac:	003b      	movs	r3, r7
 80004ae:	2200      	movs	r2, #0
 80004b0:	615a      	str	r2, [r3, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80004b2:	003b      	movs	r3, r7
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  canfilterconfig.FilterIdHigh=0x0000;
 80004b8:	003b      	movs	r3, r7
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
  canfilterconfig.FilterIdLow=0x0000;
 80004be:	003b      	movs	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	605a      	str	r2, [r3, #4]
  canfilterconfig.FilterMaskIdHigh=0x0000;
 80004c4:	003b      	movs	r3, r7
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  canfilterconfig.FilterMaskIdLow=0x0000;
 80004ca:	003b      	movs	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004d0:	003b      	movs	r3, r7
 80004d2:	2200      	movs	r2, #0
 80004d4:	619a      	str	r2, [r3, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80004d6:	003b      	movs	r3, r7
 80004d8:	2201      	movs	r2, #1
 80004da:	61da      	str	r2, [r3, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 80004dc:	003b      	movs	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig) != HAL_OK) {
 80004e2:	003a      	movs	r2, r7
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_CAN_Init+0xd4>)
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 fb57 	bl	8000b9c <HAL_CAN_ConfigFilter>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <MX_CAN_Init+0xb2>
  		Error_Handler();
 80004f2:	f000 f8c7 	bl	8000684 <Error_Handler>
  	}

  	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <MX_CAN_Init+0xd4>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 fc41 	bl	8000d80 <HAL_CAN_Start>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <MX_CAN_Init+0xc2>
  		Error_Handler();
 8000502:	f000 f8bf 	bl	8000684 <Error_Handler>
  	}

  	HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);// Initialize CAN Bus Rx Interrupt
 8000506:	4b04      	ldr	r3, [pc, #16]	; (8000518 <MX_CAN_Init+0xd4>)
 8000508:	2102      	movs	r1, #2
 800050a:	0018      	movs	r0, r3
 800050c:	f000 fea2 	bl	8001254 <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN_Init 2 */

}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	b00a      	add	sp, #40	; 0x28
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000028 	.word	0x20000028
 800051c:	40006400 	.word	0x40006400

08000520 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_USART2_UART_Init+0x58>)
 8000526:	4a15      	ldr	r2, [pc, #84]	; (800057c <MX_USART2_UART_Init+0x5c>)
 8000528:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <MX_USART2_UART_Init+0x58>)
 800052c:	22e1      	movs	r2, #225	; 0xe1
 800052e:	0252      	lsls	r2, r2, #9
 8000530:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_USART2_UART_Init+0x58>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_USART2_UART_Init+0x58>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <MX_USART2_UART_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <MX_USART2_UART_Init+0x58>)
 8000546:	220c      	movs	r2, #12
 8000548:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <MX_USART2_UART_Init+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <MX_USART2_UART_Init+0x58>)
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <MX_USART2_UART_Init+0x58>)
 8000558:	2200      	movs	r2, #0
 800055a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_USART2_UART_Init+0x58>)
 800055e:	2200      	movs	r2, #0
 8000560:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <MX_USART2_UART_Init+0x58>)
 8000564:	0018      	movs	r0, r3
 8000566:	f002 f94f 	bl	8002808 <HAL_UART_Init>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800056e:	f000 f889 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000050 	.word	0x20000050
 800057c:	40004400 	.word	0x40004400

08000580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b089      	sub	sp, #36	; 0x24
 8000584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	240c      	movs	r4, #12
 8000588:	193b      	adds	r3, r7, r4
 800058a:	0018      	movs	r0, r3
 800058c:	2314      	movs	r3, #20
 800058e:	001a      	movs	r2, r3
 8000590:	2100      	movs	r1, #0
 8000592:	f002 fd9f 	bl	80030d4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	4b31      	ldr	r3, [pc, #196]	; (800065c <MX_GPIO_Init+0xdc>)
 8000598:	695a      	ldr	r2, [r3, #20]
 800059a:	4b30      	ldr	r3, [pc, #192]	; (800065c <MX_GPIO_Init+0xdc>)
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	0309      	lsls	r1, r1, #12
 80005a0:	430a      	orrs	r2, r1
 80005a2:	615a      	str	r2, [r3, #20]
 80005a4:	4b2d      	ldr	r3, [pc, #180]	; (800065c <MX_GPIO_Init+0xdc>)
 80005a6:	695a      	ldr	r2, [r3, #20]
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	031b      	lsls	r3, r3, #12
 80005ac:	4013      	ands	r3, r2
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005b2:	4b2a      	ldr	r3, [pc, #168]	; (800065c <MX_GPIO_Init+0xdc>)
 80005b4:	695a      	ldr	r2, [r3, #20]
 80005b6:	4b29      	ldr	r3, [pc, #164]	; (800065c <MX_GPIO_Init+0xdc>)
 80005b8:	2180      	movs	r1, #128	; 0x80
 80005ba:	03c9      	lsls	r1, r1, #15
 80005bc:	430a      	orrs	r2, r1
 80005be:	615a      	str	r2, [r3, #20]
 80005c0:	4b26      	ldr	r3, [pc, #152]	; (800065c <MX_GPIO_Init+0xdc>)
 80005c2:	695a      	ldr	r2, [r3, #20]
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	03db      	lsls	r3, r3, #15
 80005c8:	4013      	ands	r3, r2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	4b23      	ldr	r3, [pc, #140]	; (800065c <MX_GPIO_Init+0xdc>)
 80005d0:	695a      	ldr	r2, [r3, #20]
 80005d2:	4b22      	ldr	r3, [pc, #136]	; (800065c <MX_GPIO_Init+0xdc>)
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	0289      	lsls	r1, r1, #10
 80005d8:	430a      	orrs	r2, r1
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <MX_GPIO_Init+0xdc>)
 80005de:	695a      	ldr	r2, [r3, #20]
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	029b      	lsls	r3, r3, #10
 80005e4:	4013      	ands	r3, r2
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ea:	2390      	movs	r3, #144	; 0x90
 80005ec:	05db      	lsls	r3, r3, #23
 80005ee:	2200      	movs	r2, #0
 80005f0:	2120      	movs	r1, #32
 80005f2:	0018      	movs	r0, r3
 80005f4:	f001 fac2 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	0192      	lsls	r2, r2, #6
 80005fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000600:	193b      	adds	r3, r7, r4
 8000602:	2284      	movs	r2, #132	; 0x84
 8000604:	0392      	lsls	r2, r2, #14
 8000606:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800060e:	193b      	adds	r3, r7, r4
 8000610:	4a13      	ldr	r2, [pc, #76]	; (8000660 <MX_GPIO_Init+0xe0>)
 8000612:	0019      	movs	r1, r3
 8000614:	0010      	movs	r0, r2
 8000616:	f001 f939 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800061a:	0021      	movs	r1, r4
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2220      	movs	r2, #32
 8000620:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2201      	movs	r2, #1
 8000626:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000634:	187a      	adds	r2, r7, r1
 8000636:	2390      	movs	r3, #144	; 0x90
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	0011      	movs	r1, r2
 800063c:	0018      	movs	r0, r3
 800063e:	f001 f925 	bl	800188c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	2007      	movs	r0, #7
 8000648:	f001 f8ee 	bl	8001828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800064c:	2007      	movs	r0, #7
 800064e:	f001 f900 	bl	8001852 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b009      	add	sp, #36	; 0x24
 8000658:	bd90      	pop	{r4, r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	40021000 	.word	0x40021000
 8000660:	48000800 	.word	0x48000800

08000664 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	0002      	movs	r2, r0
 800066c:	1dbb      	adds	r3, r7, #6
 800066e:	801a      	strh	r2, [r3, #0]
	button_pressed = 1;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000672:	2201      	movs	r2, #1
 8000674:	601a      	str	r2, [r3, #0]
}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b002      	add	sp, #8
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	2000011c 	.word	0x2000011c

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	e7fe      	b.n	800068c <Error_Handler+0x8>
	...

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_MspInit+0x44>)
 8000698:	699a      	ldr	r2, [r3, #24]
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <HAL_MspInit+0x44>)
 800069c:	2101      	movs	r1, #1
 800069e:	430a      	orrs	r2, r1
 80006a0:	619a      	str	r2, [r3, #24]
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_MspInit+0x44>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	2201      	movs	r2, #1
 80006a8:	4013      	ands	r3, r2
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_MspInit+0x44>)
 80006b0:	69da      	ldr	r2, [r3, #28]
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <HAL_MspInit+0x44>)
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	0549      	lsls	r1, r1, #21
 80006b8:	430a      	orrs	r2, r1
 80006ba:	61da      	str	r2, [r3, #28]
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_MspInit+0x44>)
 80006be:	69da      	ldr	r2, [r3, #28]
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	055b      	lsls	r3, r3, #21
 80006c4:	4013      	ands	r3, r2
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b002      	add	sp, #8
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b08b      	sub	sp, #44	; 0x2c
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	2414      	movs	r4, #20
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	0018      	movs	r0, r3
 80006e6:	2314      	movs	r3, #20
 80006e8:	001a      	movs	r2, r3
 80006ea:	2100      	movs	r1, #0
 80006ec:	f002 fcf2 	bl	80030d4 <memset>
  if(hcan->Instance==CAN)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a21      	ldr	r2, [pc, #132]	; (800077c <HAL_CAN_MspInit+0xa4>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d13b      	bne.n	8000772 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <HAL_CAN_MspInit+0xa8>)
 80006fc:	69da      	ldr	r2, [r3, #28]
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <HAL_CAN_MspInit+0xa8>)
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	0489      	lsls	r1, r1, #18
 8000704:	430a      	orrs	r2, r1
 8000706:	61da      	str	r2, [r3, #28]
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <HAL_CAN_MspInit+0xa8>)
 800070a:	69da      	ldr	r2, [r3, #28]
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	049b      	lsls	r3, r3, #18
 8000710:	4013      	ands	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <HAL_CAN_MspInit+0xa8>)
 8000718:	695a      	ldr	r2, [r3, #20]
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <HAL_CAN_MspInit+0xa8>)
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	0289      	lsls	r1, r1, #10
 8000720:	430a      	orrs	r2, r1
 8000722:	615a      	str	r2, [r3, #20]
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <HAL_CAN_MspInit+0xa8>)
 8000726:	695a      	ldr	r2, [r3, #20]
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	029b      	lsls	r3, r3, #10
 800072c:	4013      	ands	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	22c0      	movs	r2, #192	; 0xc0
 8000736:	0152      	lsls	r2, r2, #5
 8000738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	0021      	movs	r1, r4
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2202      	movs	r2, #2
 8000740:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2203      	movs	r2, #3
 800074c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2204      	movs	r2, #4
 8000752:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	187a      	adds	r2, r7, r1
 8000756:	2390      	movs	r3, #144	; 0x90
 8000758:	05db      	lsls	r3, r3, #23
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f001 f895 	bl	800188c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	201e      	movs	r0, #30
 8000768:	f001 f85e 	bl	8001828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800076c:	201e      	movs	r0, #30
 800076e:	f001 f870 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b00b      	add	sp, #44	; 0x2c
 8000778:	bd90      	pop	{r4, r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	40006400 	.word	0x40006400
 8000780:	40021000 	.word	0x40021000

08000784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b08b      	sub	sp, #44	; 0x2c
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	2414      	movs	r4, #20
 800078e:	193b      	adds	r3, r7, r4
 8000790:	0018      	movs	r0, r3
 8000792:	2314      	movs	r3, #20
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f002 fc9c 	bl	80030d4 <memset>
  if(huart->Instance==USART2)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <HAL_UART_MspInit+0x90>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d132      	bne.n	800080c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <HAL_UART_MspInit+0x94>)
 80007a8:	69da      	ldr	r2, [r3, #28]
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <HAL_UART_MspInit+0x94>)
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	0289      	lsls	r1, r1, #10
 80007b0:	430a      	orrs	r2, r1
 80007b2:	61da      	str	r2, [r3, #28]
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <HAL_UART_MspInit+0x94>)
 80007b6:	69da      	ldr	r2, [r3, #28]
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	029b      	lsls	r3, r3, #10
 80007bc:	4013      	ands	r3, r2
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <HAL_UART_MspInit+0x94>)
 80007c4:	695a      	ldr	r2, [r3, #20]
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_UART_MspInit+0x94>)
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	0289      	lsls	r1, r1, #10
 80007cc:	430a      	orrs	r2, r1
 80007ce:	615a      	str	r2, [r3, #20]
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_UART_MspInit+0x94>)
 80007d2:	695a      	ldr	r2, [r3, #20]
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	029b      	lsls	r3, r3, #10
 80007d8:	4013      	ands	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007de:	0021      	movs	r1, r4
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	220c      	movs	r2, #12
 80007e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2202      	movs	r2, #2
 80007ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2201      	movs	r2, #1
 80007fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	187a      	adds	r2, r7, r1
 8000800:	2390      	movs	r3, #144	; 0x90
 8000802:	05db      	lsls	r3, r3, #23
 8000804:	0011      	movs	r1, r2
 8000806:	0018      	movs	r0, r3
 8000808:	f001 f840 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b00b      	add	sp, #44	; 0x2c
 8000812:	bd90      	pop	{r4, r7, pc}
 8000814:	40004400 	.word	0x40004400
 8000818:	40021000 	.word	0x40021000

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <NMI_Handler+0x4>

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000840:	f000 f892 	bl	8000968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800084e:	2380      	movs	r3, #128	; 0x80
 8000850:	019b      	lsls	r3, r3, #6
 8000852:	0018      	movs	r0, r3
 8000854:	f001 f9ca 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <CEC_CAN_IRQHandler+0x14>)
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fd1e 	bl	80012a8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	20000028 	.word	0x20000028

08000878 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000886:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000888:	f7ff fff6 	bl	8000878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800088e:	490d      	ldr	r1, [pc, #52]	; (80008c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000890:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <LoopForever+0xe>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000894:	e002      	b.n	800089c <LoopCopyDataInit>

08000896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089a:	3304      	adds	r3, #4

0800089c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800089c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a0:	d3f9      	bcc.n	8000896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a4:	4c0a      	ldr	r4, [pc, #40]	; (80008d0 <LoopForever+0x16>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a8:	e001      	b.n	80008ae <LoopFillZerobss>

080008aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ac:	3204      	adds	r2, #4

080008ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b0:	d3fb      	bcc.n	80008aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008b2:	f002 fc17 	bl	80030e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b6:	f7ff fce9 	bl	800028c <main>

080008ba <LoopForever>:

LoopForever:
    b LoopForever
 80008ba:	e7fe      	b.n	80008ba <LoopForever>
  ldr   r0, =_estack
 80008bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008c8:	0800318c 	.word	0x0800318c
  ldr r2, =_sbss
 80008cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008d0:	20000124 	.word	0x20000124

080008d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC1_COMP_IRQHandler>
	...

080008d8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <HAL_Init+0x24>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_Init+0x24>)
 80008e2:	2110      	movs	r1, #16
 80008e4:	430a      	orrs	r2, r1
 80008e6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 f809 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ee:	f7ff fecf 	bl	8000690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	0018      	movs	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40022000 	.word	0x40022000

08000900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <HAL_InitTick+0x5c>)
 800090a:	681c      	ldr	r4, [r3, #0]
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <HAL_InitTick+0x60>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	0019      	movs	r1, r3
 8000912:	23fa      	movs	r3, #250	; 0xfa
 8000914:	0098      	lsls	r0, r3, #2
 8000916:	f7ff fbf5 	bl	8000104 <__udivsi3>
 800091a:	0003      	movs	r3, r0
 800091c:	0019      	movs	r1, r3
 800091e:	0020      	movs	r0, r4
 8000920:	f7ff fbf0 	bl	8000104 <__udivsi3>
 8000924:	0003      	movs	r3, r0
 8000926:	0018      	movs	r0, r3
 8000928:	f000 ffa3 	bl	8001872 <HAL_SYSTICK_Config>
 800092c:	1e03      	subs	r3, r0, #0
 800092e:	d001      	beq.n	8000934 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000930:	2301      	movs	r3, #1
 8000932:	e00f      	b.n	8000954 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b03      	cmp	r3, #3
 8000938:	d80b      	bhi.n	8000952 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	2200      	movs	r2, #0
 8000942:	0018      	movs	r0, r3
 8000944:	f000 ff70 	bl	8001828 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_InitTick+0x64>)
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	e000      	b.n	8000954 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
}
 8000954:	0018      	movs	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	b003      	add	sp, #12
 800095a:	bd90      	pop	{r4, r7, pc}
 800095c:	20000000 	.word	0x20000000
 8000960:	20000008 	.word	0x20000008
 8000964:	20000004 	.word	0x20000004

08000968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_IncTick+0x1c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	001a      	movs	r2, r3
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <HAL_IncTick+0x20>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	18d2      	adds	r2, r2, r3
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <HAL_IncTick+0x20>)
 800097a:	601a      	str	r2, [r3, #0]
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	20000008 	.word	0x20000008
 8000988:	20000120 	.word	0x20000120

0800098c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  return uwTick;
 8000990:	4b02      	ldr	r3, [pc, #8]	; (800099c <HAL_GetTick+0x10>)
 8000992:	681b      	ldr	r3, [r3, #0]
}
 8000994:	0018      	movs	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	20000120 	.word	0x20000120

080009a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d101      	bne.n	80009b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e0f0      	b.n	8000b94 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2220      	movs	r2, #32
 80009b6:	5c9b      	ldrb	r3, [r3, r2]
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff fe89 	bl	80006d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2101      	movs	r1, #1
 80009d2:	430a      	orrs	r2, r1
 80009d4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009d6:	f7ff ffd9 	bl	800098c <HAL_GetTick>
 80009da:	0003      	movs	r3, r0
 80009dc:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009de:	e013      	b.n	8000a08 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009e0:	f7ff ffd4 	bl	800098c <HAL_GetTick>
 80009e4:	0002      	movs	r2, r0
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	2b0a      	cmp	r3, #10
 80009ec:	d90c      	bls.n	8000a08 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	0292      	lsls	r2, r2, #10
 80009f6:	431a      	orrs	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2220      	movs	r2, #32
 8000a00:	2105      	movs	r1, #5
 8000a02:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e0c5      	b.n	8000b94 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4013      	ands	r3, r2
 8000a12:	d0e5      	beq.n	80009e0 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2102      	movs	r1, #2
 8000a20:	438a      	bics	r2, r1
 8000a22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a24:	f7ff ffb2 	bl	800098c <HAL_GetTick>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a2c:	e013      	b.n	8000a56 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a2e:	f7ff ffad 	bl	800098c <HAL_GetTick>
 8000a32:	0002      	movs	r2, r0
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	2b0a      	cmp	r3, #10
 8000a3a:	d90c      	bls.n	8000a56 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a40:	2280      	movs	r2, #128	; 0x80
 8000a42:	0292      	lsls	r2, r2, #10
 8000a44:	431a      	orrs	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2220      	movs	r2, #32
 8000a4e:	2105      	movs	r1, #5
 8000a50:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e09e      	b.n	8000b94 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	4013      	ands	r3, r2
 8000a60:	d1e5      	bne.n	8000a2e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	7e1b      	ldrb	r3, [r3, #24]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d108      	bne.n	8000a7c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	430a      	orrs	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	e007      	b.n	8000a8c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2180      	movs	r1, #128	; 0x80
 8000a88:	438a      	bics	r2, r1
 8000a8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	7e5b      	ldrb	r3, [r3, #25]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d108      	bne.n	8000aa6 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	e007      	b.n	8000ab6 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	438a      	bics	r2, r1
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	7e9b      	ldrb	r3, [r3, #26]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d108      	bne.n	8000ad0 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2120      	movs	r1, #32
 8000aca:	430a      	orrs	r2, r1
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	e007      	b.n	8000ae0 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2120      	movs	r1, #32
 8000adc:	438a      	bics	r2, r1
 8000ade:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	7edb      	ldrb	r3, [r3, #27]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d108      	bne.n	8000afa <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2110      	movs	r1, #16
 8000af4:	438a      	bics	r2, r1
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	e007      	b.n	8000b0a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2110      	movs	r1, #16
 8000b06:	430a      	orrs	r2, r1
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	7f1b      	ldrb	r3, [r3, #28]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d108      	bne.n	8000b24 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2108      	movs	r1, #8
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	e007      	b.n	8000b34 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2108      	movs	r1, #8
 8000b30:	438a      	bics	r2, r1
 8000b32:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	7f5b      	ldrb	r3, [r3, #29]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d108      	bne.n	8000b4e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2104      	movs	r1, #4
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	e007      	b.n	8000b5e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2104      	movs	r1, #4
 8000b5a:	438a      	bics	r2, r1
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	431a      	orrs	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	431a      	orrs	r2, r3
 8000b74:	0011      	movs	r1, r2
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	1e5a      	subs	r2, r3, #1
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	430a      	orrs	r2, r1
 8000b82:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2220      	movs	r2, #32
 8000b8e:	2101      	movs	r1, #1
 8000b90:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	0018      	movs	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b004      	add	sp, #16
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bac:	2013      	movs	r0, #19
 8000bae:	183b      	adds	r3, r7, r0
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	2120      	movs	r1, #32
 8000bb4:	5c52      	ldrb	r2, [r2, r1]
 8000bb6:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000bb8:	0002      	movs	r2, r0
 8000bba:	18bb      	adds	r3, r7, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d004      	beq.n	8000bcc <HAL_CAN_ConfigFilter+0x30>
 8000bc2:	18bb      	adds	r3, r7, r2
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d000      	beq.n	8000bcc <HAL_CAN_ConfigFilter+0x30>
 8000bca:	e0cd      	b.n	8000d68 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	58d3      	ldr	r3, [r2, r3]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	0011      	movs	r1, r2
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	221f      	movs	r2, #31
 8000be8:	4013      	ands	r3, r2
 8000bea:	2201      	movs	r2, #1
 8000bec:	409a      	lsls	r2, r3
 8000bee:	0013      	movs	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	2387      	movs	r3, #135	; 0x87
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	58d3      	ldr	r3, [r2, r3]
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	43d2      	mvns	r2, r2
 8000bfe:	401a      	ands	r2, r3
 8000c00:	0011      	movs	r1, r2
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	2387      	movs	r3, #135	; 0x87
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d129      	bne.n	8000c66 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	2383      	movs	r3, #131	; 0x83
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	58d3      	ldr	r3, [r2, r3]
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	43d2      	mvns	r2, r2
 8000c1e:	401a      	ands	r2, r3
 8000c20:	0011      	movs	r1, r2
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	2383      	movs	r3, #131	; 0x83
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	041b      	lsls	r3, r3, #16
 8000c36:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c3c:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	3248      	adds	r2, #72	; 0x48
 8000c42:	00d2      	lsls	r2, r2, #3
 8000c44:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	041b      	lsls	r3, r3, #16
 8000c52:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c58:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c5a:	6979      	ldr	r1, [r7, #20]
 8000c5c:	3348      	adds	r3, #72	; 0x48
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	18cb      	adds	r3, r1, r3
 8000c62:	3304      	adds	r3, #4
 8000c64:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d128      	bne.n	8000cc0 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	2383      	movs	r3, #131	; 0x83
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	58d2      	ldr	r2, [r2, r3]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	2383      	movs	r3, #131	; 0x83
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	041b      	lsls	r3, r3, #16
 8000c90:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c96:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3248      	adds	r2, #72	; 0x48
 8000c9c:	00d2      	lsls	r2, r2, #3
 8000c9e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	041b      	lsls	r3, r3, #16
 8000cac:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cb2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cb4:	6979      	ldr	r1, [r7, #20]
 8000cb6:	3348      	adds	r3, #72	; 0x48
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	18cb      	adds	r3, r1, r3
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d10c      	bne.n	8000ce2 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	2381      	movs	r3, #129	; 0x81
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	58d3      	ldr	r3, [r2, r3]
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	43d2      	mvns	r2, r2
 8000cd4:	401a      	ands	r2, r3
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	2381      	movs	r3, #129	; 0x81
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	50d1      	str	r1, [r2, r3]
 8000ce0:	e00a      	b.n	8000cf8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	2381      	movs	r3, #129	; 0x81
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	58d2      	ldr	r2, [r2, r3]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	0011      	movs	r1, r2
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	2381      	movs	r3, #129	; 0x81
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d10c      	bne.n	8000d1a <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	2385      	movs	r3, #133	; 0x85
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	58d3      	ldr	r3, [r2, r3]
 8000d08:	68fa      	ldr	r2, [r7, #12]
 8000d0a:	43d2      	mvns	r2, r2
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	0011      	movs	r1, r2
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	2385      	movs	r3, #133	; 0x85
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	50d1      	str	r1, [r2, r3]
 8000d18:	e00a      	b.n	8000d30 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	2385      	movs	r3, #133	; 0x85
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	58d2      	ldr	r2, [r2, r3]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	431a      	orrs	r2, r3
 8000d26:	0011      	movs	r1, r2
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	2385      	movs	r3, #133	; 0x85
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d10a      	bne.n	8000d4e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	2387      	movs	r3, #135	; 0x87
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	58d2      	ldr	r2, [r2, r3]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	431a      	orrs	r2, r3
 8000d44:	0011      	movs	r1, r2
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	2387      	movs	r3, #135	; 0x87
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	58d3      	ldr	r3, [r2, r3]
 8000d56:	2201      	movs	r2, #1
 8000d58:	4393      	bics	r3, r2
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	e007      	b.n	8000d78 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	02d2      	lsls	r2, r2, #11
 8000d70:	431a      	orrs	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
  }
}
 8000d78:	0018      	movs	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b006      	add	sp, #24
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	5c9b      	ldrb	r3, [r3, r2]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d12f      	bne.n	8000df4 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2220      	movs	r2, #32
 8000d98:	2102      	movs	r1, #2
 8000d9a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2101      	movs	r1, #1
 8000da8:	438a      	bics	r2, r1
 8000daa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000dac:	f7ff fdee 	bl	800098c <HAL_GetTick>
 8000db0:	0003      	movs	r3, r0
 8000db2:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000db4:	e013      	b.n	8000dde <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000db6:	f7ff fde9 	bl	800098c <HAL_GetTick>
 8000dba:	0002      	movs	r2, r0
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b0a      	cmp	r3, #10
 8000dc2:	d90c      	bls.n	8000dde <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc8:	2280      	movs	r2, #128	; 0x80
 8000dca:	0292      	lsls	r2, r2, #10
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	2105      	movs	r1, #5
 8000dd8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e012      	b.n	8000e04 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2201      	movs	r2, #1
 8000de6:	4013      	ands	r3, r2
 8000de8:	d1e5      	bne.n	8000db6 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	e007      	b.n	8000e04 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	0312      	lsls	r2, r2, #12
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
  }
}
 8000e04:	0018      	movs	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b004      	add	sp, #16
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e1a:	201f      	movs	r0, #31
 8000e1c:	183b      	adds	r3, r7, r0
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	2120      	movs	r1, #32
 8000e22:	5c52      	ldrb	r2, [r2, r1]
 8000e24:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e2e:	183b      	adds	r3, r7, r0
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d004      	beq.n	8000e40 <HAL_CAN_AddTxMessage+0x34>
 8000e36:	183b      	adds	r3, r7, r0
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d000      	beq.n	8000e40 <HAL_CAN_AddTxMessage+0x34>
 8000e3e:	e0ab      	b.n	8000f98 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	04db      	lsls	r3, r3, #19
 8000e46:	4013      	ands	r3, r2
 8000e48:	d10a      	bne.n	8000e60 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	051b      	lsls	r3, r3, #20
 8000e50:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e52:	d105      	bne.n	8000e60 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	055b      	lsls	r3, r3, #21
 8000e5a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e5c:	d100      	bne.n	8000e60 <HAL_CAN_AddTxMessage+0x54>
 8000e5e:	e092      	b.n	8000f86 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	0e1b      	lsrs	r3, r3, #24
 8000e64:	2203      	movs	r2, #3
 8000e66:	4013      	ands	r3, r2
 8000e68:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d10c      	bne.n	8000e96 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4311      	orrs	r1, r2
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	3218      	adds	r2, #24
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	50d1      	str	r1, [r2, r3]
 8000e94:	e00f      	b.n	8000eb6 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000eac:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	3218      	adds	r2, #24
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6819      	ldr	r1, [r3, #0]
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	691a      	ldr	r2, [r3, #16]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3318      	adds	r3, #24
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	18cb      	adds	r3, r1, r3
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	7d1b      	ldrb	r3, [r3, #20]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d112      	bne.n	8000ef8 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3318      	adds	r3, #24
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	18d3      	adds	r3, r2, r3
 8000ede:	3304      	adds	r3, #4
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6819      	ldr	r1, [r3, #0]
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	431a      	orrs	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	3318      	adds	r3, #24
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	18cb      	adds	r3, r1, r3
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3307      	adds	r3, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	061a      	lsls	r2, r3, #24
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3306      	adds	r3, #6
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	041b      	lsls	r3, r3, #16
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3305      	adds	r3, #5
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3304      	adds	r3, #4
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	0019      	movs	r1, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	6979      	ldr	r1, [r7, #20]
 8000f24:	23c6      	movs	r3, #198	; 0xc6
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	0109      	lsls	r1, r1, #4
 8000f2a:	1841      	adds	r1, r0, r1
 8000f2c:	18cb      	adds	r3, r1, r3
 8000f2e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3303      	adds	r3, #3
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	061a      	lsls	r2, r3, #24
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	041b      	lsls	r3, r3, #16
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3301      	adds	r3, #1
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	0019      	movs	r1, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	430a      	orrs	r2, r1
 8000f58:	6979      	ldr	r1, [r7, #20]
 8000f5a:	23c4      	movs	r3, #196	; 0xc4
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	0109      	lsls	r1, r1, #4
 8000f60:	1841      	adds	r1, r0, r1
 8000f62:	18cb      	adds	r3, r1, r3
 8000f64:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	3218      	adds	r2, #24
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	58d2      	ldr	r2, [r2, r3]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2101      	movs	r1, #1
 8000f78:	4311      	orrs	r1, r2
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	3218      	adds	r2, #24
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e010      	b.n	8000fa8 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	2280      	movs	r2, #128	; 0x80
 8000f8c:	0392      	lsls	r2, r2, #14
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e007      	b.n	8000fa8 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	02d2      	lsls	r2, r2, #11
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
  }
}
 8000fa8:	0018      	movs	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b008      	add	sp, #32
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fbe:	200b      	movs	r0, #11
 8000fc0:	183b      	adds	r3, r7, r0
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	5c52      	ldrb	r2, [r2, r1]
 8000fc8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fca:	0002      	movs	r2, r0
 8000fcc:	18bb      	adds	r3, r7, r2
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d003      	beq.n	8000fdc <HAL_CAN_IsTxMessagePending+0x2c>
 8000fd4:	18bb      	adds	r3, r7, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d10b      	bne.n	8000ff4 <HAL_CAN_IsTxMessagePending+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	0692      	lsls	r2, r2, #26
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	069b      	lsls	r3, r3, #26
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d001      	beq.n	8000ff4 <HAL_CAN_IsTxMessagePending+0x44>
    {
      status = 1U;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
}
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b004      	add	sp, #16
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	60f8      	str	r0, [r7, #12]
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800100c:	2017      	movs	r0, #23
 800100e:	183b      	adds	r3, r7, r0
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	2120      	movs	r1, #32
 8001014:	5c52      	ldrb	r2, [r2, r1]
 8001016:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001018:	0002      	movs	r2, r0
 800101a:	18bb      	adds	r3, r7, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d004      	beq.n	800102c <HAL_CAN_GetRxMessage+0x2e>
 8001022:	18bb      	adds	r3, r7, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d000      	beq.n	800102c <HAL_CAN_GetRxMessage+0x2e>
 800102a:	e107      	b.n	800123c <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10e      	bne.n	8001050 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2203      	movs	r2, #3
 800103a:	4013      	ands	r3, r2
 800103c:	d117      	bne.n	800106e <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	0392      	lsls	r2, r2, #14
 8001046:	431a      	orrs	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e0fd      	b.n	800124c <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	2203      	movs	r2, #3
 8001058:	4013      	ands	r3, r2
 800105a:	d108      	bne.n	800106e <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	0392      	lsls	r2, r2, #14
 8001064:	431a      	orrs	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e0ee      	b.n	800124c <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	321b      	adds	r2, #27
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	58d3      	ldr	r3, [r2, r3]
 800107a:	2204      	movs	r2, #4
 800107c:	401a      	ands	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10b      	bne.n	80010a2 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	321b      	adds	r2, #27
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	58d3      	ldr	r3, [r2, r3]
 8001096:	0d5b      	lsrs	r3, r3, #21
 8001098:	055b      	lsls	r3, r3, #21
 800109a:	0d5a      	lsrs	r2, r3, #21
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e00a      	b.n	80010b8 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	321b      	adds	r2, #27
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	58d3      	ldr	r3, [r2, r3]
 80010ae:	08db      	lsrs	r3, r3, #3
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	321b      	adds	r2, #27
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	58d3      	ldr	r3, [r2, r3]
 80010c4:	2202      	movs	r2, #2
 80010c6:	401a      	ands	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	331b      	adds	r3, #27
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	18d3      	adds	r3, r2, r3
 80010d8:	3304      	adds	r3, #4
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2208      	movs	r2, #8
 80010de:	4013      	ands	r3, r2
 80010e0:	d003      	beq.n	80010ea <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2208      	movs	r2, #8
 80010e6:	611a      	str	r2, [r3, #16]
 80010e8:	e00b      	b.n	8001102 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	331b      	adds	r3, #27
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	18d3      	adds	r3, r2, r3
 80010f6:	3304      	adds	r3, #4
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	220f      	movs	r2, #15
 80010fc:	401a      	ands	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	331b      	adds	r3, #27
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	18d3      	adds	r3, r2, r3
 800110e:	3304      	adds	r3, #4
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	0a1b      	lsrs	r3, r3, #8
 8001114:	22ff      	movs	r2, #255	; 0xff
 8001116:	401a      	ands	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	331b      	adds	r3, #27
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	18d3      	adds	r3, r2, r3
 8001128:	3304      	adds	r3, #4
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	0c1b      	lsrs	r3, r3, #16
 800112e:	041b      	lsls	r3, r3, #16
 8001130:	0c1a      	lsrs	r2, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6819      	ldr	r1, [r3, #0]
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	23dc      	movs	r3, #220	; 0xdc
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	188a      	adds	r2, r1, r2
 8001144:	18d3      	adds	r3, r2, r3
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6819      	ldr	r1, [r3, #0]
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	23dc      	movs	r3, #220	; 0xdc
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	188a      	adds	r2, r1, r2
 800115c:	18d3      	adds	r3, r2, r3
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	0a1a      	lsrs	r2, r3, #8
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	3301      	adds	r3, #1
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6819      	ldr	r1, [r3, #0]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	23dc      	movs	r3, #220	; 0xdc
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	188a      	adds	r2, r1, r2
 8001178:	18d3      	adds	r3, r2, r3
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	0c1a      	lsrs	r2, r3, #16
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	3302      	adds	r3, #2
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6819      	ldr	r1, [r3, #0]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	23dc      	movs	r3, #220	; 0xdc
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	188a      	adds	r2, r1, r2
 8001194:	18d3      	adds	r3, r2, r3
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	0e1a      	lsrs	r2, r3, #24
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	3303      	adds	r3, #3
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6819      	ldr	r1, [r3, #0]
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	23de      	movs	r3, #222	; 0xde
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	188a      	adds	r2, r1, r2
 80011b0:	18d3      	adds	r3, r2, r3
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	3304      	adds	r3, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6819      	ldr	r1, [r3, #0]
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	23de      	movs	r3, #222	; 0xde
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	188a      	adds	r2, r1, r2
 80011ca:	18d3      	adds	r3, r2, r3
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	0a1a      	lsrs	r2, r3, #8
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	3305      	adds	r3, #5
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6819      	ldr	r1, [r3, #0]
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	23de      	movs	r3, #222	; 0xde
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	188a      	adds	r2, r1, r2
 80011e6:	18d3      	adds	r3, r2, r3
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	0c1a      	lsrs	r2, r3, #16
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	3306      	adds	r3, #6
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6819      	ldr	r1, [r3, #0]
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	23de      	movs	r3, #222	; 0xde
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	188a      	adds	r2, r1, r2
 8001202:	18d3      	adds	r3, r2, r3
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	0e1a      	lsrs	r2, r3, #24
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	3307      	adds	r3, #7
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d108      	bne.n	8001228 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2120      	movs	r1, #32
 8001222:	430a      	orrs	r2, r1
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	e007      	b.n	8001238 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2120      	movs	r1, #32
 8001234:	430a      	orrs	r2, r1
 8001236:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	e007      	b.n	800124c <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	02d2      	lsls	r2, r2, #11
 8001244:	431a      	orrs	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
  }
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	b006      	add	sp, #24
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800125e:	200f      	movs	r0, #15
 8001260:	183b      	adds	r3, r7, r0
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	2120      	movs	r1, #32
 8001266:	5c52      	ldrb	r2, [r2, r1]
 8001268:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800126a:	0002      	movs	r2, r0
 800126c:	18bb      	adds	r3, r7, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d003      	beq.n	800127c <HAL_CAN_ActivateNotification+0x28>
 8001274:	18bb      	adds	r3, r7, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d109      	bne.n	8001290 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6959      	ldr	r1, [r3, #20]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	e007      	b.n	80012a0 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	02d2      	lsls	r2, r2, #11
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
  }
}
 80012a0:	0018      	movs	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b004      	add	sp, #16
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	2201      	movs	r2, #1
 80012e8:	4013      	ands	r3, r2
 80012ea:	d100      	bne.n	80012ee <HAL_CAN_IRQHandler+0x46>
 80012ec:	e084      	b.n	80013f8 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	2201      	movs	r2, #1
 80012f2:	4013      	ands	r3, r2
 80012f4:	d024      	beq.n	8001340 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2201      	movs	r2, #1
 80012fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	2202      	movs	r2, #2
 8001302:	4013      	ands	r3, r2
 8001304:	d004      	beq.n	8001310 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	0018      	movs	r0, r3
 800130a:	f000 f981 	bl	8001610 <HAL_CAN_TxMailbox0CompleteCallback>
 800130e:	e017      	b.n	8001340 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	2204      	movs	r2, #4
 8001314:	4013      	ands	r3, r2
 8001316:	d005      	beq.n	8001324 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	2280      	movs	r2, #128	; 0x80
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	4313      	orrs	r3, r2
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
 8001322:	e00d      	b.n	8001340 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	2208      	movs	r2, #8
 8001328:	4013      	ands	r3, r2
 800132a:	d005      	beq.n	8001338 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	0152      	lsls	r2, r2, #5
 8001332:	4313      	orrs	r3, r2
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	e003      	b.n	8001340 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	0018      	movs	r0, r3
 800133c:	f000 f980 	bl	8001640 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4013      	ands	r3, r2
 8001348:	d028      	beq.n	800139c <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	0052      	lsls	r2, r2, #1
 8001352:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4013      	ands	r3, r2
 800135c:	d004      	beq.n	8001368 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	0018      	movs	r0, r3
 8001362:	f000 f95d 	bl	8001620 <HAL_CAN_TxMailbox1CompleteCallback>
 8001366:	e019      	b.n	800139c <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	4013      	ands	r3, r2
 8001370:	d005      	beq.n	800137e <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	2280      	movs	r2, #128	; 0x80
 8001376:	0192      	lsls	r2, r2, #6
 8001378:	4313      	orrs	r3, r2
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
 800137c:	e00e      	b.n	800139c <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	4013      	ands	r3, r2
 8001386:	d005      	beq.n	8001394 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	01d2      	lsls	r2, r2, #7
 800138e:	4313      	orrs	r3, r2
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
 8001392:	e003      	b.n	800139c <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	0018      	movs	r0, r3
 8001398:	f000 f95a 	bl	8001650 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	025b      	lsls	r3, r3, #9
 80013a2:	4013      	ands	r3, r2
 80013a4:	d028      	beq.n	80013f8 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2280      	movs	r2, #128	; 0x80
 80013ac:	0252      	lsls	r2, r2, #9
 80013ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	029b      	lsls	r3, r3, #10
 80013b6:	4013      	ands	r3, r2
 80013b8:	d004      	beq.n	80013c4 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	0018      	movs	r0, r3
 80013be:	f000 f937 	bl	8001630 <HAL_CAN_TxMailbox2CompleteCallback>
 80013c2:	e019      	b.n	80013f8 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	02db      	lsls	r3, r3, #11
 80013ca:	4013      	ands	r3, r2
 80013cc:	d005      	beq.n	80013da <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	0212      	lsls	r2, r2, #8
 80013d4:	4313      	orrs	r3, r2
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
 80013d8:	e00e      	b.n	80013f8 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	031b      	lsls	r3, r3, #12
 80013e0:	4013      	ands	r3, r2
 80013e2:	d005      	beq.n	80013f0 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	0252      	lsls	r2, r2, #9
 80013ea:	4313      	orrs	r3, r2
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
 80013ee:	e003      	b.n	80013f8 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 f934 	bl	8001660 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	2208      	movs	r2, #8
 80013fc:	4013      	ands	r3, r2
 80013fe:	d00c      	beq.n	800141a <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	2210      	movs	r2, #16
 8001404:	4013      	ands	r3, r2
 8001406:	d008      	beq.n	800141a <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	2280      	movs	r2, #128	; 0x80
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	4313      	orrs	r3, r2
 8001410:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2210      	movs	r2, #16
 8001418:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	2204      	movs	r2, #4
 800141e:	4013      	ands	r3, r2
 8001420:	d00b      	beq.n	800143a <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2208      	movs	r2, #8
 8001426:	4013      	ands	r3, r2
 8001428:	d007      	beq.n	800143a <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2208      	movs	r2, #8
 8001430:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	0018      	movs	r0, r3
 8001436:	f000 f91b 	bl	8001670 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	2202      	movs	r2, #2
 800143e:	4013      	ands	r3, r2
 8001440:	d009      	beq.n	8001456 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2203      	movs	r2, #3
 800144a:	4013      	ands	r3, r2
 800144c:	d003      	beq.n	8001456 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	0018      	movs	r0, r3
 8001452:	f7fe fee3 	bl	800021c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	2240      	movs	r2, #64	; 0x40
 800145a:	4013      	ands	r3, r2
 800145c:	d00c      	beq.n	8001478 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	2210      	movs	r2, #16
 8001462:	4013      	ands	r3, r2
 8001464:	d008      	beq.n	8001478 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	00d2      	lsls	r2, r2, #3
 800146c:	4313      	orrs	r3, r2
 800146e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2210      	movs	r2, #16
 8001476:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	2220      	movs	r2, #32
 800147c:	4013      	ands	r3, r2
 800147e:	d00b      	beq.n	8001498 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	2208      	movs	r2, #8
 8001484:	4013      	ands	r3, r2
 8001486:	d007      	beq.n	8001498 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2208      	movs	r2, #8
 800148e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	0018      	movs	r0, r3
 8001494:	f000 f8fc 	bl	8001690 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	2210      	movs	r2, #16
 800149c:	4013      	ands	r3, r2
 800149e:	d009      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	2203      	movs	r2, #3
 80014a8:	4013      	ands	r3, r2
 80014aa:	d003      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	0018      	movs	r0, r3
 80014b0:	f000 f8e6 	bl	8001680 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014b4:	6a3a      	ldr	r2, [r7, #32]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	029b      	lsls	r3, r3, #10
 80014ba:	4013      	ands	r3, r2
 80014bc:	d00b      	beq.n	80014d6 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	2210      	movs	r2, #16
 80014c2:	4013      	ands	r3, r2
 80014c4:	d007      	beq.n	80014d6 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2210      	movs	r2, #16
 80014cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	0018      	movs	r0, r3
 80014d2:	f000 f8e5 	bl	80016a0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80014d6:	6a3a      	ldr	r2, [r7, #32]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	025b      	lsls	r3, r3, #9
 80014dc:	4013      	ands	r3, r2
 80014de:	d00b      	beq.n	80014f8 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	2208      	movs	r2, #8
 80014e4:	4013      	ands	r3, r2
 80014e6:	d007      	beq.n	80014f8 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2208      	movs	r2, #8
 80014ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	0018      	movs	r0, r3
 80014f4:	f000 f8dc 	bl	80016b0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80014f8:	6a3a      	ldr	r2, [r7, #32]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	4013      	ands	r3, r2
 8001500:	d100      	bne.n	8001504 <HAL_CAN_IRQHandler+0x25c>
 8001502:	e074      	b.n	80015ee <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	2204      	movs	r2, #4
 8001508:	4013      	ands	r3, r2
 800150a:	d100      	bne.n	800150e <HAL_CAN_IRQHandler+0x266>
 800150c:	e06b      	b.n	80015e6 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800150e:	6a3a      	ldr	r2, [r7, #32]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4013      	ands	r3, r2
 8001516:	d007      	beq.n	8001528 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2201      	movs	r2, #1
 800151c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800151e:	d003      	beq.n	8001528 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	2201      	movs	r2, #1
 8001524:	4313      	orrs	r3, r2
 8001526:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001528:	6a3a      	ldr	r2, [r7, #32]
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4013      	ands	r3, r2
 8001530:	d007      	beq.n	8001542 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2202      	movs	r2, #2
 8001536:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001538:	d003      	beq.n	8001542 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	2202      	movs	r2, #2
 800153e:	4313      	orrs	r3, r2
 8001540:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001542:	6a3a      	ldr	r2, [r7, #32]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4013      	ands	r3, r2
 800154a:	d007      	beq.n	800155c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2204      	movs	r2, #4
 8001550:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001552:	d003      	beq.n	800155c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	2204      	movs	r2, #4
 8001558:	4313      	orrs	r3, r2
 800155a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800155c:	6a3a      	ldr	r2, [r7, #32]
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	4013      	ands	r3, r2
 8001564:	d03f      	beq.n	80015e6 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2270      	movs	r2, #112	; 0x70
 800156a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800156c:	d03b      	beq.n	80015e6 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2270      	movs	r2, #112	; 0x70
 8001572:	4013      	ands	r3, r2
 8001574:	2b60      	cmp	r3, #96	; 0x60
 8001576:	d027      	beq.n	80015c8 <HAL_CAN_IRQHandler+0x320>
 8001578:	d82c      	bhi.n	80015d4 <HAL_CAN_IRQHandler+0x32c>
 800157a:	2b50      	cmp	r3, #80	; 0x50
 800157c:	d01f      	beq.n	80015be <HAL_CAN_IRQHandler+0x316>
 800157e:	d829      	bhi.n	80015d4 <HAL_CAN_IRQHandler+0x32c>
 8001580:	2b40      	cmp	r3, #64	; 0x40
 8001582:	d017      	beq.n	80015b4 <HAL_CAN_IRQHandler+0x30c>
 8001584:	d826      	bhi.n	80015d4 <HAL_CAN_IRQHandler+0x32c>
 8001586:	2b30      	cmp	r3, #48	; 0x30
 8001588:	d00f      	beq.n	80015aa <HAL_CAN_IRQHandler+0x302>
 800158a:	d823      	bhi.n	80015d4 <HAL_CAN_IRQHandler+0x32c>
 800158c:	2b10      	cmp	r3, #16
 800158e:	d002      	beq.n	8001596 <HAL_CAN_IRQHandler+0x2ee>
 8001590:	2b20      	cmp	r3, #32
 8001592:	d005      	beq.n	80015a0 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001594:	e01e      	b.n	80015d4 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	2208      	movs	r2, #8
 800159a:	4313      	orrs	r3, r2
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800159e:	e01a      	b.n	80015d6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	2210      	movs	r2, #16
 80015a4:	4313      	orrs	r3, r2
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015a8:	e015      	b.n	80015d6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	2220      	movs	r2, #32
 80015ae:	4313      	orrs	r3, r2
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015b2:	e010      	b.n	80015d6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	2240      	movs	r2, #64	; 0x40
 80015b8:	4313      	orrs	r3, r2
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015bc:	e00b      	b.n	80015d6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	2280      	movs	r2, #128	; 0x80
 80015c2:	4313      	orrs	r3, r2
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015c6:	e006      	b.n	80015d6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	0052      	lsls	r2, r2, #1
 80015ce:	4313      	orrs	r3, r2
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015d2:	e000      	b.n	80015d6 <HAL_CAN_IRQHandler+0x32e>
            break;
 80015d4:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	699a      	ldr	r2, [r3, #24]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2170      	movs	r1, #112	; 0x70
 80015e2:	438a      	bics	r2, r1
 80015e4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2204      	movs	r2, #4
 80015ec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d009      	beq.n	8001608 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	0018      	movs	r0, r3
 8001604:	f000 f85c 	bl	80016c0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001608:	46c0      	nop			; (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	b00a      	add	sp, #40	; 0x28
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b002      	add	sp, #8
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b002      	add	sp, #8
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001638:	46c0      	nop			; (mov r8, r8)
 800163a:	46bd      	mov	sp, r7
 800163c:	b002      	add	sp, #8
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001648:	46c0      	nop			; (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b002      	add	sp, #8
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b002      	add	sp, #8
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b002      	add	sp, #8
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b002      	add	sp, #8
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	b002      	add	sp, #8
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b002      	add	sp, #8
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b002      	add	sp, #8
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b002      	add	sp, #8
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	0002      	movs	r2, r0
 80016d8:	1dfb      	adds	r3, r7, #7
 80016da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	1dfb      	adds	r3, r7, #7
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b7f      	cmp	r3, #127	; 0x7f
 80016e2:	d809      	bhi.n	80016f8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e4:	1dfb      	adds	r3, r7, #7
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	001a      	movs	r2, r3
 80016ea:	231f      	movs	r3, #31
 80016ec:	401a      	ands	r2, r3
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <__NVIC_EnableIRQ+0x30>)
 80016f0:	2101      	movs	r1, #1
 80016f2:	4091      	lsls	r1, r2
 80016f4:	000a      	movs	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]
  }
}
 80016f8:	46c0      	nop			; (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b002      	add	sp, #8
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	e000e100 	.word	0xe000e100

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	0002      	movs	r2, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	1dfb      	adds	r3, r7, #7
 8001710:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001712:	1dfb      	adds	r3, r7, #7
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b7f      	cmp	r3, #127	; 0x7f
 8001718:	d828      	bhi.n	800176c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800171a:	4a2f      	ldr	r2, [pc, #188]	; (80017d8 <__NVIC_SetPriority+0xd4>)
 800171c:	1dfb      	adds	r3, r7, #7
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b25b      	sxtb	r3, r3
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	33c0      	adds	r3, #192	; 0xc0
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	589b      	ldr	r3, [r3, r2]
 800172a:	1dfa      	adds	r2, r7, #7
 800172c:	7812      	ldrb	r2, [r2, #0]
 800172e:	0011      	movs	r1, r2
 8001730:	2203      	movs	r2, #3
 8001732:	400a      	ands	r2, r1
 8001734:	00d2      	lsls	r2, r2, #3
 8001736:	21ff      	movs	r1, #255	; 0xff
 8001738:	4091      	lsls	r1, r2
 800173a:	000a      	movs	r2, r1
 800173c:	43d2      	mvns	r2, r2
 800173e:	401a      	ands	r2, r3
 8001740:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	019b      	lsls	r3, r3, #6
 8001746:	22ff      	movs	r2, #255	; 0xff
 8001748:	401a      	ands	r2, r3
 800174a:	1dfb      	adds	r3, r7, #7
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	0018      	movs	r0, r3
 8001750:	2303      	movs	r3, #3
 8001752:	4003      	ands	r3, r0
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001758:	481f      	ldr	r0, [pc, #124]	; (80017d8 <__NVIC_SetPriority+0xd4>)
 800175a:	1dfb      	adds	r3, r7, #7
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b25b      	sxtb	r3, r3
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	430a      	orrs	r2, r1
 8001764:	33c0      	adds	r3, #192	; 0xc0
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800176a:	e031      	b.n	80017d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800176c:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <__NVIC_SetPriority+0xd8>)
 800176e:	1dfb      	adds	r3, r7, #7
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	0019      	movs	r1, r3
 8001774:	230f      	movs	r3, #15
 8001776:	400b      	ands	r3, r1
 8001778:	3b08      	subs	r3, #8
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3306      	adds	r3, #6
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	18d3      	adds	r3, r2, r3
 8001782:	3304      	adds	r3, #4
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	1dfa      	adds	r2, r7, #7
 8001788:	7812      	ldrb	r2, [r2, #0]
 800178a:	0011      	movs	r1, r2
 800178c:	2203      	movs	r2, #3
 800178e:	400a      	ands	r2, r1
 8001790:	00d2      	lsls	r2, r2, #3
 8001792:	21ff      	movs	r1, #255	; 0xff
 8001794:	4091      	lsls	r1, r2
 8001796:	000a      	movs	r2, r1
 8001798:	43d2      	mvns	r2, r2
 800179a:	401a      	ands	r2, r3
 800179c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	019b      	lsls	r3, r3, #6
 80017a2:	22ff      	movs	r2, #255	; 0xff
 80017a4:	401a      	ands	r2, r3
 80017a6:	1dfb      	adds	r3, r7, #7
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	0018      	movs	r0, r3
 80017ac:	2303      	movs	r3, #3
 80017ae:	4003      	ands	r3, r0
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b4:	4809      	ldr	r0, [pc, #36]	; (80017dc <__NVIC_SetPriority+0xd8>)
 80017b6:	1dfb      	adds	r3, r7, #7
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	001c      	movs	r4, r3
 80017bc:	230f      	movs	r3, #15
 80017be:	4023      	ands	r3, r4
 80017c0:	3b08      	subs	r3, #8
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	430a      	orrs	r2, r1
 80017c6:	3306      	adds	r3, #6
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	18c3      	adds	r3, r0, r3
 80017cc:	3304      	adds	r3, #4
 80017ce:	601a      	str	r2, [r3, #0]
}
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b003      	add	sp, #12
 80017d6:	bd90      	pop	{r4, r7, pc}
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	1e5a      	subs	r2, r3, #1
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	045b      	lsls	r3, r3, #17
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d301      	bcc.n	80017f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f4:	2301      	movs	r3, #1
 80017f6:	e010      	b.n	800181a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <SysTick_Config+0x44>)
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	3a01      	subs	r2, #1
 80017fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001800:	2301      	movs	r3, #1
 8001802:	425b      	negs	r3, r3
 8001804:	2103      	movs	r1, #3
 8001806:	0018      	movs	r0, r3
 8001808:	f7ff ff7c 	bl	8001704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <SysTick_Config+0x44>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <SysTick_Config+0x44>)
 8001814:	2207      	movs	r2, #7
 8001816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001818:	2300      	movs	r3, #0
}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	b002      	add	sp, #8
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	e000e010 	.word	0xe000e010

08001828 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	210f      	movs	r1, #15
 8001834:	187b      	adds	r3, r7, r1
 8001836:	1c02      	adds	r2, r0, #0
 8001838:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	187b      	adds	r3, r7, r1
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b25b      	sxtb	r3, r3
 8001842:	0011      	movs	r1, r2
 8001844:	0018      	movs	r0, r3
 8001846:	f7ff ff5d 	bl	8001704 <__NVIC_SetPriority>
}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	b004      	add	sp, #16
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	0002      	movs	r2, r0
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b25b      	sxtb	r3, r3
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff ff33 	bl	80016d0 <__NVIC_EnableIRQ>
}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	46bd      	mov	sp, r7
 800186e:	b002      	add	sp, #8
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	0018      	movs	r0, r3
 800187e:	f7ff ffaf 	bl	80017e0 <SysTick_Config>
 8001882:	0003      	movs	r3, r0
}
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	b002      	add	sp, #8
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	e155      	b.n	8001b48 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2101      	movs	r1, #1
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4091      	lsls	r1, r2
 80018a6:	000a      	movs	r2, r1
 80018a8:	4013      	ands	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d100      	bne.n	80018b4 <HAL_GPIO_Init+0x28>
 80018b2:	e146      	b.n	8001b42 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2203      	movs	r2, #3
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d005      	beq.n	80018cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2203      	movs	r2, #3
 80018c6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d130      	bne.n	800192e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	409a      	lsls	r2, r3
 80018da:	0013      	movs	r3, r2
 80018dc:	43da      	mvns	r2, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	409a      	lsls	r2, r3
 80018ee:	0013      	movs	r3, r2
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001902:	2201      	movs	r2, #1
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
 8001908:	0013      	movs	r3, r2
 800190a:	43da      	mvns	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	2201      	movs	r2, #1
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
 8001920:	0013      	movs	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2203      	movs	r2, #3
 8001934:	4013      	ands	r3, r2
 8001936:	2b03      	cmp	r3, #3
 8001938:	d017      	beq.n	800196a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	409a      	lsls	r2, r3
 8001948:	0013      	movs	r3, r2
 800194a:	43da      	mvns	r2, r3
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	409a      	lsls	r2, r3
 800195c:	0013      	movs	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2203      	movs	r2, #3
 8001970:	4013      	ands	r3, r2
 8001972:	2b02      	cmp	r3, #2
 8001974:	d123      	bne.n	80019be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	08da      	lsrs	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3208      	adds	r2, #8
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	58d3      	ldr	r3, [r2, r3]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2207      	movs	r2, #7
 8001988:	4013      	ands	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	409a      	lsls	r2, r3
 8001990:	0013      	movs	r3, r2
 8001992:	43da      	mvns	r2, r3
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	2107      	movs	r1, #7
 80019a2:	400b      	ands	r3, r1
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	409a      	lsls	r2, r3
 80019a8:	0013      	movs	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	08da      	lsrs	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3208      	adds	r2, #8
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	6939      	ldr	r1, [r7, #16]
 80019bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	2203      	movs	r2, #3
 80019ca:	409a      	lsls	r2, r3
 80019cc:	0013      	movs	r3, r2
 80019ce:	43da      	mvns	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2203      	movs	r2, #3
 80019dc:	401a      	ands	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	409a      	lsls	r2, r3
 80019e4:	0013      	movs	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	23c0      	movs	r3, #192	; 0xc0
 80019f8:	029b      	lsls	r3, r3, #10
 80019fa:	4013      	ands	r3, r2
 80019fc:	d100      	bne.n	8001a00 <HAL_GPIO_Init+0x174>
 80019fe:	e0a0      	b.n	8001b42 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a00:	4b57      	ldr	r3, [pc, #348]	; (8001b60 <HAL_GPIO_Init+0x2d4>)
 8001a02:	699a      	ldr	r2, [r3, #24]
 8001a04:	4b56      	ldr	r3, [pc, #344]	; (8001b60 <HAL_GPIO_Init+0x2d4>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	619a      	str	r2, [r3, #24]
 8001a0c:	4b54      	ldr	r3, [pc, #336]	; (8001b60 <HAL_GPIO_Init+0x2d4>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2201      	movs	r2, #1
 8001a12:	4013      	ands	r3, r2
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a18:	4a52      	ldr	r2, [pc, #328]	; (8001b64 <HAL_GPIO_Init+0x2d8>)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	589b      	ldr	r3, [r3, r2]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2203      	movs	r2, #3
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	409a      	lsls	r2, r3
 8001a32:	0013      	movs	r3, r2
 8001a34:	43da      	mvns	r2, r3
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	2390      	movs	r3, #144	; 0x90
 8001a40:	05db      	lsls	r3, r3, #23
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d019      	beq.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a47      	ldr	r2, [pc, #284]	; (8001b68 <HAL_GPIO_Init+0x2dc>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_Init+0x1ea>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a46      	ldr	r2, [pc, #280]	; (8001b6c <HAL_GPIO_Init+0x2e0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00d      	beq.n	8001a72 <HAL_GPIO_Init+0x1e6>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a45      	ldr	r2, [pc, #276]	; (8001b70 <HAL_GPIO_Init+0x2e4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d007      	beq.n	8001a6e <HAL_GPIO_Init+0x1e2>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a44      	ldr	r2, [pc, #272]	; (8001b74 <HAL_GPIO_Init+0x2e8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_GPIO_Init+0x1de>
 8001a66:	2304      	movs	r3, #4
 8001a68:	e008      	b.n	8001a7c <HAL_GPIO_Init+0x1f0>
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x1f0>
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e004      	b.n	8001a7c <HAL_GPIO_Init+0x1f0>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_Init+0x1f0>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_GPIO_Init+0x1f0>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	2103      	movs	r1, #3
 8001a80:	400a      	ands	r2, r1
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	4093      	lsls	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a8c:	4935      	ldr	r1, [pc, #212]	; (8001b64 <HAL_GPIO_Init+0x2d8>)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	3302      	adds	r3, #2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a9a:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	035b      	lsls	r3, r3, #13
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001abe:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ac4:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	43da      	mvns	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	039b      	lsls	r3, r3, #14
 8001adc:	4013      	ands	r3, r2
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001aee:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	43da      	mvns	r2, r3
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	029b      	lsls	r3, r3, #10
 8001b06:	4013      	ands	r3, r2
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43da      	mvns	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	025b      	lsls	r3, r3, #9
 8001b30:	4013      	ands	r3, r2
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3301      	adds	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	40da      	lsrs	r2, r3
 8001b50:	1e13      	subs	r3, r2, #0
 8001b52:	d000      	beq.n	8001b56 <HAL_GPIO_Init+0x2ca>
 8001b54:	e6a2      	b.n	800189c <HAL_GPIO_Init+0x10>
  } 
}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	46c0      	nop			; (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b006      	add	sp, #24
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010000 	.word	0x40010000
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	48000800 	.word	0x48000800
 8001b70:	48000c00 	.word	0x48000c00
 8001b74:	48001000 	.word	0x48001000
 8001b78:	40010400 	.word	0x40010400

08001b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	0008      	movs	r0, r1
 8001b86:	0011      	movs	r1, r2
 8001b88:	1cbb      	adds	r3, r7, #2
 8001b8a:	1c02      	adds	r2, r0, #0
 8001b8c:	801a      	strh	r2, [r3, #0]
 8001b8e:	1c7b      	adds	r3, r7, #1
 8001b90:	1c0a      	adds	r2, r1, #0
 8001b92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b94:	1c7b      	adds	r3, r7, #1
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d004      	beq.n	8001ba6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b9c:	1cbb      	adds	r3, r7, #2
 8001b9e:	881a      	ldrh	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba4:	e003      	b.n	8001bae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba6:	1cbb      	adds	r3, r7, #2
 8001ba8:	881a      	ldrh	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b002      	add	sp, #8
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	000a      	movs	r2, r1
 8001bc0:	1cbb      	adds	r3, r7, #2
 8001bc2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bca:	1cbb      	adds	r3, r7, #2
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	041a      	lsls	r2, r3, #16
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	1cb9      	adds	r1, r7, #2
 8001bda:	8809      	ldrh	r1, [r1, #0]
 8001bdc:	400b      	ands	r3, r1
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	619a      	str	r2, [r3, #24]
}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b004      	add	sp, #16
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	1dbb      	adds	r3, r7, #6
 8001bf6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	1dba      	adds	r2, r7, #6
 8001bfe:	8812      	ldrh	r2, [r2, #0]
 8001c00:	4013      	ands	r3, r2
 8001c02:	d008      	beq.n	8001c16 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001c06:	1dba      	adds	r2, r7, #6
 8001c08:	8812      	ldrh	r2, [r2, #0]
 8001c0a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c0c:	1dbb      	adds	r3, r7, #6
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7fe fd27 	bl	8000664 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b002      	add	sp, #8
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	40010400 	.word	0x40010400

08001c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	f000 fb76 	bl	8002324 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d100      	bne.n	8001c44 <HAL_RCC_OscConfig+0x20>
 8001c42:	e08e      	b.n	8001d62 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c44:	4bc5      	ldr	r3, [pc, #788]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	220c      	movs	r2, #12
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d00e      	beq.n	8001c6e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c50:	4bc2      	ldr	r3, [pc, #776]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	220c      	movs	r2, #12
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d117      	bne.n	8001c8c <HAL_RCC_OscConfig+0x68>
 8001c5c:	4bbf      	ldr	r3, [pc, #764]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	23c0      	movs	r3, #192	; 0xc0
 8001c62:	025b      	lsls	r3, r3, #9
 8001c64:	401a      	ands	r2, r3
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	025b      	lsls	r3, r3, #9
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d10e      	bne.n	8001c8c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6e:	4bbb      	ldr	r3, [pc, #748]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	029b      	lsls	r3, r3, #10
 8001c76:	4013      	ands	r3, r2
 8001c78:	d100      	bne.n	8001c7c <HAL_RCC_OscConfig+0x58>
 8001c7a:	e071      	b.n	8001d60 <HAL_RCC_OscConfig+0x13c>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d000      	beq.n	8001c86 <HAL_RCC_OscConfig+0x62>
 8001c84:	e06c      	b.n	8001d60 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	f000 fb4c 	bl	8002324 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x80>
 8001c94:	4bb1      	ldr	r3, [pc, #708]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4bb0      	ldr	r3, [pc, #704]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	0249      	lsls	r1, r1, #9
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e02f      	b.n	8001d04 <HAL_RCC_OscConfig+0xe0>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10c      	bne.n	8001cc6 <HAL_RCC_OscConfig+0xa2>
 8001cac:	4bab      	ldr	r3, [pc, #684]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4baa      	ldr	r3, [pc, #680]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001cb2:	49ab      	ldr	r1, [pc, #684]	; (8001f60 <HAL_RCC_OscConfig+0x33c>)
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	4ba8      	ldr	r3, [pc, #672]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4ba7      	ldr	r3, [pc, #668]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001cbe:	49a9      	ldr	r1, [pc, #676]	; (8001f64 <HAL_RCC_OscConfig+0x340>)
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	e01e      	b.n	8001d04 <HAL_RCC_OscConfig+0xe0>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	d10e      	bne.n	8001cec <HAL_RCC_OscConfig+0xc8>
 8001cce:	4ba3      	ldr	r3, [pc, #652]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4ba2      	ldr	r3, [pc, #648]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	02c9      	lsls	r1, r1, #11
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	4b9f      	ldr	r3, [pc, #636]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b9e      	ldr	r3, [pc, #632]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001ce2:	2180      	movs	r1, #128	; 0x80
 8001ce4:	0249      	lsls	r1, r1, #9
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_OscConfig+0xe0>
 8001cec:	4b9b      	ldr	r3, [pc, #620]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b9a      	ldr	r3, [pc, #616]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001cf2:	499b      	ldr	r1, [pc, #620]	; (8001f60 <HAL_RCC_OscConfig+0x33c>)
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	4b98      	ldr	r3, [pc, #608]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b97      	ldr	r3, [pc, #604]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001cfe:	4999      	ldr	r1, [pc, #612]	; (8001f64 <HAL_RCC_OscConfig+0x340>)
 8001d00:	400a      	ands	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d014      	beq.n	8001d36 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7fe fe3e 	bl	800098c <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d16:	f7fe fe39 	bl	800098c <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b64      	cmp	r3, #100	; 0x64
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e2fd      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d28:	4b8c      	ldr	r3, [pc, #560]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	029b      	lsls	r3, r3, #10
 8001d30:	4013      	ands	r3, r2
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0xf2>
 8001d34:	e015      	b.n	8001d62 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7fe fe29 	bl	800098c <HAL_GetTick>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d40:	f7fe fe24 	bl	800098c <HAL_GetTick>
 8001d44:	0002      	movs	r2, r0
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e2e8      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	4b82      	ldr	r3, [pc, #520]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	029b      	lsls	r3, r3, #10
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x11c>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2202      	movs	r2, #2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d100      	bne.n	8001d6e <HAL_RCC_OscConfig+0x14a>
 8001d6c:	e06c      	b.n	8001e48 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d6e:	4b7b      	ldr	r3, [pc, #492]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	220c      	movs	r2, #12
 8001d74:	4013      	ands	r3, r2
 8001d76:	d00e      	beq.n	8001d96 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d78:	4b78      	ldr	r3, [pc, #480]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	220c      	movs	r2, #12
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d11f      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x1a0>
 8001d84:	4b75      	ldr	r3, [pc, #468]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	23c0      	movs	r3, #192	; 0xc0
 8001d8a:	025b      	lsls	r3, r3, #9
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d116      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d96:	4b71      	ldr	r3, [pc, #452]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_OscConfig+0x188>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e2bb      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dac:	4b6b      	ldr	r3, [pc, #428]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	22f8      	movs	r2, #248	; 0xf8
 8001db2:	4393      	bics	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00da      	lsls	r2, r3, #3
 8001dbc:	4b67      	ldr	r3, [pc, #412]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc2:	e041      	b.n	8001e48 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d024      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dcc:	4b63      	ldr	r3, [pc, #396]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b62      	ldr	r3, [pc, #392]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7fe fdd8 	bl	800098c <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de2:	f7fe fdd3 	bl	800098c <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e297      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df4:	4b59      	ldr	r3, [pc, #356]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d0f1      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfe:	4b57      	ldr	r3, [pc, #348]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	22f8      	movs	r2, #248	; 0xf8
 8001e04:	4393      	bics	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	00da      	lsls	r2, r3, #3
 8001e0e:	4b53      	ldr	r3, [pc, #332]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001e10:	430a      	orrs	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e018      	b.n	8001e48 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e16:	4b51      	ldr	r3, [pc, #324]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b50      	ldr	r3, [pc, #320]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	438a      	bics	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7fe fdb3 	bl	800098c <HAL_GetTick>
 8001e26:	0003      	movs	r3, r0
 8001e28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e2c:	f7fe fdae 	bl	800098c <HAL_GetTick>
 8001e30:	0002      	movs	r2, r0
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e272      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3e:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2202      	movs	r2, #2
 8001e44:	4013      	ands	r3, r2
 8001e46:	d1f1      	bne.n	8001e2c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d036      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d019      	beq.n	8001e8e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5a:	4b40      	ldr	r3, [pc, #256]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e5e:	4b3f      	ldr	r3, [pc, #252]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001e60:	2101      	movs	r1, #1
 8001e62:	430a      	orrs	r2, r1
 8001e64:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7fe fd91 	bl	800098c <HAL_GetTick>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e70:	f7fe fd8c 	bl	800098c <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e250      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e82:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	2202      	movs	r2, #2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d0f1      	beq.n	8001e70 <HAL_RCC_OscConfig+0x24c>
 8001e8c:	e018      	b.n	8001ec0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8e:	4b33      	ldr	r3, [pc, #204]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e92:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001e94:	2101      	movs	r1, #1
 8001e96:	438a      	bics	r2, r1
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9a:	f7fe fd77 	bl	800098c <HAL_GetTick>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7fe fd72 	bl	800098c <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e236      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	2202      	movs	r2, #2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d1f1      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d100      	bne.n	8001ecc <HAL_RCC_OscConfig+0x2a8>
 8001eca:	e0b5      	b.n	8002038 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ecc:	201f      	movs	r0, #31
 8001ece:	183b      	adds	r3, r7, r0
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed4:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	055b      	lsls	r3, r3, #21
 8001edc:	4013      	ands	r3, r2
 8001ede:	d110      	bne.n	8001f02 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001ee2:	69da      	ldr	r2, [r3, #28]
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001ee6:	2180      	movs	r1, #128	; 0x80
 8001ee8:	0549      	lsls	r1, r1, #21
 8001eea:	430a      	orrs	r2, r1
 8001eec:	61da      	str	r2, [r3, #28]
 8001eee:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001ef0:	69da      	ldr	r2, [r3, #28]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	055b      	lsls	r3, r3, #21
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001efc:	183b      	adds	r3, r7, r0
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_RCC_OscConfig+0x344>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d11a      	bne.n	8001f44 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <HAL_RCC_OscConfig+0x344>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_RCC_OscConfig+0x344>)
 8001f14:	2180      	movs	r1, #128	; 0x80
 8001f16:	0049      	lsls	r1, r1, #1
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1c:	f7fe fd36 	bl	800098c <HAL_GetTick>
 8001f20:	0003      	movs	r3, r0
 8001f22:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f26:	f7fe fd31 	bl	800098c <HAL_GetTick>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b64      	cmp	r3, #100	; 0x64
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e1f5      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_RCC_OscConfig+0x344>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4013      	ands	r3, r2
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d10f      	bne.n	8001f6c <HAL_RCC_OscConfig+0x348>
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001f4e:	6a1a      	ldr	r2, [r3, #32]
 8001f50:	4b02      	ldr	r3, [pc, #8]	; (8001f5c <HAL_RCC_OscConfig+0x338>)
 8001f52:	2101      	movs	r1, #1
 8001f54:	430a      	orrs	r2, r1
 8001f56:	621a      	str	r2, [r3, #32]
 8001f58:	e036      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3a4>
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	fffeffff 	.word	0xfffeffff
 8001f64:	fffbffff 	.word	0xfffbffff
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10c      	bne.n	8001f8e <HAL_RCC_OscConfig+0x36a>
 8001f74:	4bca      	ldr	r3, [pc, #808]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8001f76:	6a1a      	ldr	r2, [r3, #32]
 8001f78:	4bc9      	ldr	r3, [pc, #804]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	438a      	bics	r2, r1
 8001f7e:	621a      	str	r2, [r3, #32]
 8001f80:	4bc7      	ldr	r3, [pc, #796]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8001f82:	6a1a      	ldr	r2, [r3, #32]
 8001f84:	4bc6      	ldr	r3, [pc, #792]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8001f86:	2104      	movs	r1, #4
 8001f88:	438a      	bics	r2, r1
 8001f8a:	621a      	str	r2, [r3, #32]
 8001f8c:	e01c      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3a4>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b05      	cmp	r3, #5
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x38c>
 8001f96:	4bc2      	ldr	r3, [pc, #776]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8001f98:	6a1a      	ldr	r2, [r3, #32]
 8001f9a:	4bc1      	ldr	r3, [pc, #772]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	621a      	str	r2, [r3, #32]
 8001fa2:	4bbf      	ldr	r3, [pc, #764]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8001fa4:	6a1a      	ldr	r2, [r3, #32]
 8001fa6:	4bbe      	ldr	r3, [pc, #760]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8001fa8:	2101      	movs	r1, #1
 8001faa:	430a      	orrs	r2, r1
 8001fac:	621a      	str	r2, [r3, #32]
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3a4>
 8001fb0:	4bbb      	ldr	r3, [pc, #748]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8001fb2:	6a1a      	ldr	r2, [r3, #32]
 8001fb4:	4bba      	ldr	r3, [pc, #744]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	438a      	bics	r2, r1
 8001fba:	621a      	str	r2, [r3, #32]
 8001fbc:	4bb8      	ldr	r3, [pc, #736]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8001fbe:	6a1a      	ldr	r2, [r3, #32]
 8001fc0:	4bb7      	ldr	r3, [pc, #732]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8001fc2:	2104      	movs	r1, #4
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d014      	beq.n	8001ffa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd0:	f7fe fcdc 	bl	800098c <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	e009      	b.n	8001fee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f7fe fcd7 	bl	800098c <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	4aaf      	ldr	r2, [pc, #700]	; (80022a4 <HAL_RCC_OscConfig+0x680>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e19a      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fee:	4bac      	ldr	r3, [pc, #688]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x3b6>
 8001ff8:	e013      	b.n	8002022 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7fe fcc7 	bl	800098c <HAL_GetTick>
 8001ffe:	0003      	movs	r3, r0
 8002000:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002002:	e009      	b.n	8002018 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7fe fcc2 	bl	800098c <HAL_GetTick>
 8002008:	0002      	movs	r2, r0
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	4aa5      	ldr	r2, [pc, #660]	; (80022a4 <HAL_RCC_OscConfig+0x680>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e185      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002018:	4ba1      	ldr	r3, [pc, #644]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	2202      	movs	r2, #2
 800201e:	4013      	ands	r3, r2
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002022:	231f      	movs	r3, #31
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202c:	4b9c      	ldr	r3, [pc, #624]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 800202e:	69da      	ldr	r2, [r3, #28]
 8002030:	4b9b      	ldr	r3, [pc, #620]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002032:	499d      	ldr	r1, [pc, #628]	; (80022a8 <HAL_RCC_OscConfig+0x684>)
 8002034:	400a      	ands	r2, r1
 8002036:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2210      	movs	r2, #16
 800203e:	4013      	ands	r3, r2
 8002040:	d063      	beq.n	800210a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d12a      	bne.n	80020a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800204a:	4b95      	ldr	r3, [pc, #596]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 800204c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800204e:	4b94      	ldr	r3, [pc, #592]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002050:	2104      	movs	r1, #4
 8002052:	430a      	orrs	r2, r1
 8002054:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002056:	4b92      	ldr	r3, [pc, #584]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800205a:	4b91      	ldr	r3, [pc, #580]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 800205c:	2101      	movs	r1, #1
 800205e:	430a      	orrs	r2, r1
 8002060:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7fe fc93 	bl	800098c <HAL_GetTick>
 8002066:	0003      	movs	r3, r0
 8002068:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800206c:	f7fe fc8e 	bl	800098c <HAL_GetTick>
 8002070:	0002      	movs	r2, r0
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e152      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800207e:	4b88      	ldr	r3, [pc, #544]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002082:	2202      	movs	r2, #2
 8002084:	4013      	ands	r3, r2
 8002086:	d0f1      	beq.n	800206c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002088:	4b85      	ldr	r3, [pc, #532]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 800208a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208c:	22f8      	movs	r2, #248	; 0xf8
 800208e:	4393      	bics	r3, r2
 8002090:	0019      	movs	r1, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	00da      	lsls	r2, r3, #3
 8002098:	4b81      	ldr	r3, [pc, #516]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 800209a:	430a      	orrs	r2, r1
 800209c:	635a      	str	r2, [r3, #52]	; 0x34
 800209e:	e034      	b.n	800210a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	3305      	adds	r3, #5
 80020a6:	d111      	bne.n	80020cc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020a8:	4b7d      	ldr	r3, [pc, #500]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 80020aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ac:	4b7c      	ldr	r3, [pc, #496]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 80020ae:	2104      	movs	r1, #4
 80020b0:	438a      	bics	r2, r1
 80020b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020b4:	4b7a      	ldr	r3, [pc, #488]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 80020b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b8:	22f8      	movs	r2, #248	; 0xf8
 80020ba:	4393      	bics	r3, r2
 80020bc:	0019      	movs	r1, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	00da      	lsls	r2, r3, #3
 80020c4:	4b76      	ldr	r3, [pc, #472]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
 80020ca:	e01e      	b.n	800210a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020cc:	4b74      	ldr	r3, [pc, #464]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 80020ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d0:	4b73      	ldr	r3, [pc, #460]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 80020d2:	2104      	movs	r1, #4
 80020d4:	430a      	orrs	r2, r1
 80020d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80020d8:	4b71      	ldr	r3, [pc, #452]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 80020da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020dc:	4b70      	ldr	r3, [pc, #448]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 80020de:	2101      	movs	r1, #1
 80020e0:	438a      	bics	r2, r1
 80020e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e4:	f7fe fc52 	bl	800098c <HAL_GetTick>
 80020e8:	0003      	movs	r3, r0
 80020ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020ee:	f7fe fc4d 	bl	800098c <HAL_GetTick>
 80020f2:	0002      	movs	r2, r0
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e111      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002100:	4b67      	ldr	r3, [pc, #412]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002104:	2202      	movs	r2, #2
 8002106:	4013      	ands	r3, r2
 8002108:	d1f1      	bne.n	80020ee <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2220      	movs	r2, #32
 8002110:	4013      	ands	r3, r2
 8002112:	d05c      	beq.n	80021ce <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002114:	4b62      	ldr	r3, [pc, #392]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	220c      	movs	r2, #12
 800211a:	4013      	ands	r3, r2
 800211c:	2b0c      	cmp	r3, #12
 800211e:	d00e      	beq.n	800213e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002120:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	220c      	movs	r2, #12
 8002126:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002128:	2b08      	cmp	r3, #8
 800212a:	d114      	bne.n	8002156 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800212c:	4b5c      	ldr	r3, [pc, #368]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	23c0      	movs	r3, #192	; 0xc0
 8002132:	025b      	lsls	r3, r3, #9
 8002134:	401a      	ands	r2, r3
 8002136:	23c0      	movs	r3, #192	; 0xc0
 8002138:	025b      	lsls	r3, r3, #9
 800213a:	429a      	cmp	r2, r3
 800213c:	d10b      	bne.n	8002156 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800213e:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	029b      	lsls	r3, r3, #10
 8002146:	4013      	ands	r3, r2
 8002148:	d040      	beq.n	80021cc <HAL_RCC_OscConfig+0x5a8>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d03c      	beq.n	80021cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e0e6      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d01b      	beq.n	8002196 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800215e:	4b50      	ldr	r3, [pc, #320]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002162:	4b4f      	ldr	r3, [pc, #316]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	0249      	lsls	r1, r1, #9
 8002168:	430a      	orrs	r2, r1
 800216a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7fe fc0e 	bl	800098c <HAL_GetTick>
 8002170:	0003      	movs	r3, r0
 8002172:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002176:	f7fe fc09 	bl	800098c <HAL_GetTick>
 800217a:	0002      	movs	r2, r0
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0cd      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002188:	4b45      	ldr	r3, [pc, #276]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 800218a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	029b      	lsls	r3, r3, #10
 8002190:	4013      	ands	r3, r2
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x552>
 8002194:	e01b      	b.n	80021ce <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002196:	4b42      	ldr	r3, [pc, #264]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219a:	4b41      	ldr	r3, [pc, #260]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 800219c:	4943      	ldr	r1, [pc, #268]	; (80022ac <HAL_RCC_OscConfig+0x688>)
 800219e:	400a      	ands	r2, r1
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7fe fbf3 	bl	800098c <HAL_GetTick>
 80021a6:	0003      	movs	r3, r0
 80021a8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ac:	f7fe fbee 	bl	800098c <HAL_GetTick>
 80021b0:	0002      	movs	r2, r0
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e0b2      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021be:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 80021c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	029b      	lsls	r3, r3, #10
 80021c6:	4013      	ands	r3, r2
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x588>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021cc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d100      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5b4>
 80021d6:	e0a4      	b.n	8002322 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d8:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	220c      	movs	r2, #12
 80021de:	4013      	ands	r3, r2
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d100      	bne.n	80021e6 <HAL_RCC_OscConfig+0x5c2>
 80021e4:	e078      	b.n	80022d8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d14c      	bne.n	8002288 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 80021f4:	492e      	ldr	r1, [pc, #184]	; (80022b0 <HAL_RCC_OscConfig+0x68c>)
 80021f6:	400a      	ands	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fa:	f7fe fbc7 	bl	800098c <HAL_GetTick>
 80021fe:	0003      	movs	r3, r0
 8002200:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002204:	f7fe fbc2 	bl	800098c <HAL_GetTick>
 8002208:	0002      	movs	r2, r0
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e086      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002216:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	049b      	lsls	r3, r3, #18
 800221e:	4013      	ands	r3, r2
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002222:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	220f      	movs	r2, #15
 8002228:	4393      	bics	r3, r2
 800222a:	0019      	movs	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002232:	430a      	orrs	r2, r1
 8002234:	62da      	str	r2, [r3, #44]	; 0x2c
 8002236:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_RCC_OscConfig+0x690>)
 800223c:	4013      	ands	r3, r2
 800223e:	0019      	movs	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	431a      	orrs	r2, r3
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 800224c:	430a      	orrs	r2, r1
 800224e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 8002256:	2180      	movs	r1, #128	; 0x80
 8002258:	0449      	lsls	r1, r1, #17
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7fe fb95 	bl	800098c <HAL_GetTick>
 8002262:	0003      	movs	r3, r0
 8002264:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002268:	f7fe fb90 	bl	800098c <HAL_GetTick>
 800226c:	0002      	movs	r2, r0
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e054      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	049b      	lsls	r3, r3, #18
 8002282:	4013      	ands	r3, r2
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x644>
 8002286:	e04c      	b.n	8002322 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 800228e:	4908      	ldr	r1, [pc, #32]	; (80022b0 <HAL_RCC_OscConfig+0x68c>)
 8002290:	400a      	ands	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7fe fb7a 	bl	800098c <HAL_GetTick>
 8002298:	0003      	movs	r3, r0
 800229a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229c:	e015      	b.n	80022ca <HAL_RCC_OscConfig+0x6a6>
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	40021000 	.word	0x40021000
 80022a4:	00001388 	.word	0x00001388
 80022a8:	efffffff 	.word	0xefffffff
 80022ac:	fffeffff 	.word	0xfffeffff
 80022b0:	feffffff 	.word	0xfeffffff
 80022b4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe fb68 	bl	800098c <HAL_GetTick>
 80022bc:	0002      	movs	r2, r0
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e02c      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_RCC_OscConfig+0x708>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	049b      	lsls	r3, r3, #18
 80022d2:	4013      	ands	r3, r2
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x694>
 80022d6:	e024      	b.n	8002322 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e01f      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_RCC_OscConfig+0x708>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <HAL_RCC_OscConfig+0x708>)
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	23c0      	movs	r3, #192	; 0xc0
 80022f4:	025b      	lsls	r3, r3, #9
 80022f6:	401a      	ands	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d10e      	bne.n	800231e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	220f      	movs	r2, #15
 8002304:	401a      	ands	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d107      	bne.n	800231e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	23f0      	movs	r3, #240	; 0xf0
 8002312:	039b      	lsls	r3, r3, #14
 8002314:	401a      	ands	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800231a:	429a      	cmp	r2, r3
 800231c:	d001      	beq.n	8002322 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	0018      	movs	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	b008      	add	sp, #32
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000

08002330 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0bf      	b.n	80024c4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002344:	4b61      	ldr	r3, [pc, #388]	; (80024cc <HAL_RCC_ClockConfig+0x19c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2201      	movs	r2, #1
 800234a:	4013      	ands	r3, r2
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d911      	bls.n	8002376 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b5e      	ldr	r3, [pc, #376]	; (80024cc <HAL_RCC_ClockConfig+0x19c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2201      	movs	r2, #1
 8002358:	4393      	bics	r3, r2
 800235a:	0019      	movs	r1, r3
 800235c:	4b5b      	ldr	r3, [pc, #364]	; (80024cc <HAL_RCC_ClockConfig+0x19c>)
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002364:	4b59      	ldr	r3, [pc, #356]	; (80024cc <HAL_RCC_ClockConfig+0x19c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2201      	movs	r2, #1
 800236a:	4013      	ands	r3, r2
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d001      	beq.n	8002376 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e0a6      	b.n	80024c4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2202      	movs	r2, #2
 800237c:	4013      	ands	r3, r2
 800237e:	d015      	beq.n	80023ac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2204      	movs	r2, #4
 8002386:	4013      	ands	r3, r2
 8002388:	d006      	beq.n	8002398 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800238a:	4b51      	ldr	r3, [pc, #324]	; (80024d0 <HAL_RCC_ClockConfig+0x1a0>)
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <HAL_RCC_ClockConfig+0x1a0>)
 8002390:	21e0      	movs	r1, #224	; 0xe0
 8002392:	00c9      	lsls	r1, r1, #3
 8002394:	430a      	orrs	r2, r1
 8002396:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002398:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <HAL_RCC_ClockConfig+0x1a0>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	22f0      	movs	r2, #240	; 0xf0
 800239e:	4393      	bics	r3, r2
 80023a0:	0019      	movs	r1, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <HAL_RCC_ClockConfig+0x1a0>)
 80023a8:	430a      	orrs	r2, r1
 80023aa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2201      	movs	r2, #1
 80023b2:	4013      	ands	r3, r2
 80023b4:	d04c      	beq.n	8002450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b44      	ldr	r3, [pc, #272]	; (80024d0 <HAL_RCC_ClockConfig+0x1a0>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	029b      	lsls	r3, r3, #10
 80023c6:	4013      	ands	r3, r2
 80023c8:	d120      	bne.n	800240c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e07a      	b.n	80024c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d6:	4b3e      	ldr	r3, [pc, #248]	; (80024d0 <HAL_RCC_ClockConfig+0x1a0>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	049b      	lsls	r3, r3, #18
 80023de:	4013      	ands	r3, r2
 80023e0:	d114      	bne.n	800240c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e06e      	b.n	80024c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023ee:	4b38      	ldr	r3, [pc, #224]	; (80024d0 <HAL_RCC_ClockConfig+0x1a0>)
 80023f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	029b      	lsls	r3, r3, #10
 80023f6:	4013      	ands	r3, r2
 80023f8:	d108      	bne.n	800240c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e062      	b.n	80024c4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fe:	4b34      	ldr	r3, [pc, #208]	; (80024d0 <HAL_RCC_ClockConfig+0x1a0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2202      	movs	r2, #2
 8002404:	4013      	ands	r3, r2
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e05b      	b.n	80024c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240c:	4b30      	ldr	r3, [pc, #192]	; (80024d0 <HAL_RCC_ClockConfig+0x1a0>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2203      	movs	r2, #3
 8002412:	4393      	bics	r3, r2
 8002414:	0019      	movs	r1, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <HAL_RCC_ClockConfig+0x1a0>)
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002420:	f7fe fab4 	bl	800098c <HAL_GetTick>
 8002424:	0003      	movs	r3, r0
 8002426:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002428:	e009      	b.n	800243e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242a:	f7fe faaf 	bl	800098c <HAL_GetTick>
 800242e:	0002      	movs	r2, r0
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	4a27      	ldr	r2, [pc, #156]	; (80024d4 <HAL_RCC_ClockConfig+0x1a4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e042      	b.n	80024c4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <HAL_RCC_ClockConfig+0x1a0>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	220c      	movs	r2, #12
 8002444:	401a      	ands	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	429a      	cmp	r2, r3
 800244e:	d1ec      	bne.n	800242a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002450:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <HAL_RCC_ClockConfig+0x19c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2201      	movs	r2, #1
 8002456:	4013      	ands	r3, r2
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d211      	bcs.n	8002482 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_RCC_ClockConfig+0x19c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2201      	movs	r2, #1
 8002464:	4393      	bics	r3, r2
 8002466:	0019      	movs	r1, r3
 8002468:	4b18      	ldr	r3, [pc, #96]	; (80024cc <HAL_RCC_ClockConfig+0x19c>)
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002470:	4b16      	ldr	r3, [pc, #88]	; (80024cc <HAL_RCC_ClockConfig+0x19c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2201      	movs	r2, #1
 8002476:	4013      	ands	r3, r2
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d001      	beq.n	8002482 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e020      	b.n	80024c4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2204      	movs	r2, #4
 8002488:	4013      	ands	r3, r2
 800248a:	d009      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800248c:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <HAL_RCC_ClockConfig+0x1a0>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a11      	ldr	r2, [pc, #68]	; (80024d8 <HAL_RCC_ClockConfig+0x1a8>)
 8002492:	4013      	ands	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <HAL_RCC_ClockConfig+0x1a0>)
 800249c:	430a      	orrs	r2, r1
 800249e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024a0:	f000 f820 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 80024a4:	0001      	movs	r1, r0
 80024a6:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_RCC_ClockConfig+0x1a0>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	091b      	lsrs	r3, r3, #4
 80024ac:	220f      	movs	r2, #15
 80024ae:	4013      	ands	r3, r2
 80024b0:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <HAL_RCC_ClockConfig+0x1ac>)
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
 80024b4:	000a      	movs	r2, r1
 80024b6:	40da      	lsrs	r2, r3
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_RCC_ClockConfig+0x1b0>)
 80024ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024bc:	2000      	movs	r0, #0
 80024be:	f7fe fa1f 	bl	8000900 <HAL_InitTick>
  
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b004      	add	sp, #16
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40022000 	.word	0x40022000
 80024d0:	40021000 	.word	0x40021000
 80024d4:	00001388 	.word	0x00001388
 80024d8:	fffff8ff 	.word	0xfffff8ff
 80024dc:	0800314c 	.word	0x0800314c
 80024e0:	20000000 	.word	0x20000000

080024e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80024fe:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	220c      	movs	r2, #12
 8002508:	4013      	ands	r3, r2
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d046      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0xb8>
 800250e:	d848      	bhi.n	80025a2 <HAL_RCC_GetSysClockFreq+0xbe>
 8002510:	2b04      	cmp	r3, #4
 8002512:	d002      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x36>
 8002514:	2b08      	cmp	r3, #8
 8002516:	d003      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x3c>
 8002518:	e043      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800251a:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800251c:	613b      	str	r3, [r7, #16]
      break;
 800251e:	e043      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	0c9b      	lsrs	r3, r3, #18
 8002524:	220f      	movs	r2, #15
 8002526:	4013      	ands	r3, r2
 8002528:	4a24      	ldr	r2, [pc, #144]	; (80025bc <HAL_RCC_GetSysClockFreq+0xd8>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
 800252c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800252e:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	220f      	movs	r2, #15
 8002534:	4013      	ands	r3, r2
 8002536:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002538:	5cd3      	ldrb	r3, [r2, r3]
 800253a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	23c0      	movs	r3, #192	; 0xc0
 8002540:	025b      	lsls	r3, r3, #9
 8002542:	401a      	ands	r2, r3
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	025b      	lsls	r3, r3, #9
 8002548:	429a      	cmp	r2, r3
 800254a:	d109      	bne.n	8002560 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	481a      	ldr	r0, [pc, #104]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002550:	f7fd fdd8 	bl	8000104 <__udivsi3>
 8002554:	0003      	movs	r3, r0
 8002556:	001a      	movs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4353      	muls	r3, r2
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	e01a      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	23c0      	movs	r3, #192	; 0xc0
 8002564:	025b      	lsls	r3, r3, #9
 8002566:	401a      	ands	r2, r3
 8002568:	23c0      	movs	r3, #192	; 0xc0
 800256a:	025b      	lsls	r3, r3, #9
 800256c:	429a      	cmp	r2, r3
 800256e:	d109      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	4814      	ldr	r0, [pc, #80]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002574:	f7fd fdc6 	bl	8000104 <__udivsi3>
 8002578:	0003      	movs	r3, r0
 800257a:	001a      	movs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4353      	muls	r3, r2
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e008      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	480c      	ldr	r0, [pc, #48]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002588:	f7fd fdbc 	bl	8000104 <__udivsi3>
 800258c:	0003      	movs	r3, r0
 800258e:	001a      	movs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4353      	muls	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	613b      	str	r3, [r7, #16]
      break;
 800259a:	e005      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xe0>)
 800259e:	613b      	str	r3, [r7, #16]
      break;
 80025a0:	e002      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80025a4:	613b      	str	r3, [r7, #16]
      break;
 80025a6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025a8:	693b      	ldr	r3, [r7, #16]
}
 80025aa:	0018      	movs	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b006      	add	sp, #24
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	40021000 	.word	0x40021000
 80025b8:	007a1200 	.word	0x007a1200
 80025bc:	08003164 	.word	0x08003164
 80025c0:	08003174 	.word	0x08003174
 80025c4:	02dc6c00 	.word	0x02dc6c00

080025c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025cc:	4b02      	ldr	r3, [pc, #8]	; (80025d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	20000000 	.word	0x20000000

080025dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80025e0:	f7ff fff2 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 80025e4:	0001      	movs	r1, r0
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	2207      	movs	r2, #7
 80025ee:	4013      	ands	r3, r2
 80025f0:	4a04      	ldr	r2, [pc, #16]	; (8002604 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	40d9      	lsrs	r1, r3
 80025f6:	000b      	movs	r3, r1
}    
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	40021000 	.word	0x40021000
 8002604:	0800315c 	.word	0x0800315c

08002608 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	025b      	lsls	r3, r3, #9
 8002620:	4013      	ands	r3, r2
 8002622:	d100      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002624:	e08e      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002626:	2017      	movs	r0, #23
 8002628:	183b      	adds	r3, r7, r0
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800262e:	4b6e      	ldr	r3, [pc, #440]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	055b      	lsls	r3, r3, #21
 8002636:	4013      	ands	r3, r2
 8002638:	d110      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	4b6b      	ldr	r3, [pc, #428]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002640:	2180      	movs	r1, #128	; 0x80
 8002642:	0549      	lsls	r1, r1, #21
 8002644:	430a      	orrs	r2, r1
 8002646:	61da      	str	r2, [r3, #28]
 8002648:	4b67      	ldr	r3, [pc, #412]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	055b      	lsls	r3, r3, #21
 8002650:	4013      	ands	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002656:	183b      	adds	r3, r7, r0
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	4b63      	ldr	r3, [pc, #396]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4013      	ands	r3, r2
 8002666:	d11a      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002668:	4b60      	ldr	r3, [pc, #384]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b5f      	ldr	r3, [pc, #380]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800266e:	2180      	movs	r1, #128	; 0x80
 8002670:	0049      	lsls	r1, r1, #1
 8002672:	430a      	orrs	r2, r1
 8002674:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002676:	f7fe f989 	bl	800098c <HAL_GetTick>
 800267a:	0003      	movs	r3, r0
 800267c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267e:	e008      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002680:	f7fe f984 	bl	800098c <HAL_GetTick>
 8002684:	0002      	movs	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	; 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e0a6      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4b56      	ldr	r3, [pc, #344]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4013      	ands	r3, r2
 800269c:	d0f0      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800269e:	4b52      	ldr	r3, [pc, #328]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026a0:	6a1a      	ldr	r2, [r3, #32]
 80026a2:	23c0      	movs	r3, #192	; 0xc0
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4013      	ands	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d034      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	23c0      	movs	r3, #192	; 0xc0
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4013      	ands	r3, r2
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d02c      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026c0:	4b49      	ldr	r3, [pc, #292]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4a4a      	ldr	r2, [pc, #296]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026ca:	4b47      	ldr	r3, [pc, #284]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026cc:	6a1a      	ldr	r2, [r3, #32]
 80026ce:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026d0:	2180      	movs	r1, #128	; 0x80
 80026d2:	0249      	lsls	r1, r1, #9
 80026d4:	430a      	orrs	r2, r1
 80026d6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026d8:	4b43      	ldr	r3, [pc, #268]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026da:	6a1a      	ldr	r2, [r3, #32]
 80026dc:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026de:	4945      	ldr	r1, [pc, #276]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80026e0:	400a      	ands	r2, r1
 80026e2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026e4:	4b40      	ldr	r3, [pc, #256]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	4013      	ands	r3, r2
 80026f0:	d013      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7fe f94b 	bl	800098c <HAL_GetTick>
 80026f6:	0003      	movs	r3, r0
 80026f8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fa:	e009      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7fe f946 	bl	800098c <HAL_GetTick>
 8002700:	0002      	movs	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	4a3c      	ldr	r2, [pc, #240]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e067      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	2202      	movs	r2, #2
 8002716:	4013      	ands	r3, r2
 8002718:	d0f0      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800271a:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a34      	ldr	r2, [pc, #208]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002720:	4013      	ands	r3, r2
 8002722:	0019      	movs	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	4b2f      	ldr	r3, [pc, #188]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800272a:	430a      	orrs	r2, r1
 800272c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800272e:	2317      	movs	r3, #23
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d105      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002738:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800273e:	492f      	ldr	r1, [pc, #188]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002740:	400a      	ands	r2, r1
 8002742:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2201      	movs	r2, #1
 800274a:	4013      	ands	r3, r2
 800274c:	d009      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800274e:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	2203      	movs	r2, #3
 8002754:	4393      	bics	r3, r2
 8002756:	0019      	movs	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800275e:	430a      	orrs	r2, r1
 8002760:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2202      	movs	r2, #2
 8002768:	4013      	ands	r3, r2
 800276a:	d009      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800276c:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	4a23      	ldr	r2, [pc, #140]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002772:	4013      	ands	r3, r2
 8002774:	0019      	movs	r1, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800277c:	430a      	orrs	r2, r1
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	02db      	lsls	r3, r3, #11
 8002788:	4013      	ands	r3, r2
 800278a:	d009      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800278c:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	4a1c      	ldr	r2, [pc, #112]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002792:	4013      	ands	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800279c:	430a      	orrs	r2, r1
 800279e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2220      	movs	r2, #32
 80027a6:	4013      	ands	r3, r2
 80027a8:	d009      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027aa:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	2210      	movs	r2, #16
 80027b0:	4393      	bics	r3, r2
 80027b2:	0019      	movs	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027ba:	430a      	orrs	r2, r1
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4013      	ands	r3, r2
 80027c8:	d009      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027ca:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	2240      	movs	r2, #64	; 0x40
 80027d0:	4393      	bics	r3, r2
 80027d2:	0019      	movs	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027da:	430a      	orrs	r2, r1
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b006      	add	sp, #24
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40007000 	.word	0x40007000
 80027f0:	fffffcff 	.word	0xfffffcff
 80027f4:	fffeffff 	.word	0xfffeffff
 80027f8:	00001388 	.word	0x00001388
 80027fc:	efffffff 	.word	0xefffffff
 8002800:	fffcffff 	.word	0xfffcffff
 8002804:	fff3ffff 	.word	0xfff3ffff

08002808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e044      	b.n	80028a4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d107      	bne.n	8002832 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2278      	movs	r2, #120	; 0x78
 8002826:	2100      	movs	r1, #0
 8002828:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	0018      	movs	r0, r3
 800282e:	f7fd ffa9 	bl	8000784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2224      	movs	r2, #36	; 0x24
 8002836:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2101      	movs	r1, #1
 8002844:	438a      	bics	r2, r1
 8002846:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	0018      	movs	r0, r3
 800284c:	f000 f830 	bl	80028b0 <UART_SetConfig>
 8002850:	0003      	movs	r3, r0
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e024      	b.n	80028a4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	0018      	movs	r0, r3
 8002866:	f000 fa0b 	bl	8002c80 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	490d      	ldr	r1, [pc, #52]	; (80028ac <HAL_UART_Init+0xa4>)
 8002876:	400a      	ands	r2, r1
 8002878:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	212a      	movs	r1, #42	; 0x2a
 8002886:	438a      	bics	r2, r1
 8002888:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2101      	movs	r1, #1
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	0018      	movs	r0, r3
 800289e:	f000 faa3 	bl	8002de8 <UART_CheckIdleState>
 80028a2:	0003      	movs	r3, r0
}
 80028a4:	0018      	movs	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b002      	add	sp, #8
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	ffffb7ff 	.word	0xffffb7ff

080028b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028b8:	231e      	movs	r3, #30
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4abe      	ldr	r2, [pc, #760]	; (8002bd8 <UART_SetConfig+0x328>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4ab9      	ldr	r2, [pc, #740]	; (8002bdc <UART_SetConfig+0x32c>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	0019      	movs	r1, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4ab0      	ldr	r2, [pc, #704]	; (8002be0 <UART_SetConfig+0x330>)
 800291e:	4013      	ands	r3, r2
 8002920:	0019      	movs	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	430a      	orrs	r2, r1
 800292a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4aac      	ldr	r2, [pc, #688]	; (8002be4 <UART_SetConfig+0x334>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d127      	bne.n	8002986 <UART_SetConfig+0xd6>
 8002936:	4bac      	ldr	r3, [pc, #688]	; (8002be8 <UART_SetConfig+0x338>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	2203      	movs	r2, #3
 800293c:	4013      	ands	r3, r2
 800293e:	2b03      	cmp	r3, #3
 8002940:	d00d      	beq.n	800295e <UART_SetConfig+0xae>
 8002942:	d81b      	bhi.n	800297c <UART_SetConfig+0xcc>
 8002944:	2b02      	cmp	r3, #2
 8002946:	d014      	beq.n	8002972 <UART_SetConfig+0xc2>
 8002948:	d818      	bhi.n	800297c <UART_SetConfig+0xcc>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <UART_SetConfig+0xa4>
 800294e:	2b01      	cmp	r3, #1
 8002950:	d00a      	beq.n	8002968 <UART_SetConfig+0xb8>
 8002952:	e013      	b.n	800297c <UART_SetConfig+0xcc>
 8002954:	231f      	movs	r3, #31
 8002956:	18fb      	adds	r3, r7, r3
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e0bd      	b.n	8002ada <UART_SetConfig+0x22a>
 800295e:	231f      	movs	r3, #31
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	2202      	movs	r2, #2
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	e0b8      	b.n	8002ada <UART_SetConfig+0x22a>
 8002968:	231f      	movs	r3, #31
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	2204      	movs	r2, #4
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	e0b3      	b.n	8002ada <UART_SetConfig+0x22a>
 8002972:	231f      	movs	r3, #31
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	2208      	movs	r2, #8
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e0ae      	b.n	8002ada <UART_SetConfig+0x22a>
 800297c:	231f      	movs	r3, #31
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	2210      	movs	r2, #16
 8002982:	701a      	strb	r2, [r3, #0]
 8002984:	e0a9      	b.n	8002ada <UART_SetConfig+0x22a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a98      	ldr	r2, [pc, #608]	; (8002bec <UART_SetConfig+0x33c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d134      	bne.n	80029fa <UART_SetConfig+0x14a>
 8002990:	4b95      	ldr	r3, [pc, #596]	; (8002be8 <UART_SetConfig+0x338>)
 8002992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002994:	23c0      	movs	r3, #192	; 0xc0
 8002996:	029b      	lsls	r3, r3, #10
 8002998:	4013      	ands	r3, r2
 800299a:	22c0      	movs	r2, #192	; 0xc0
 800299c:	0292      	lsls	r2, r2, #10
 800299e:	4293      	cmp	r3, r2
 80029a0:	d017      	beq.n	80029d2 <UART_SetConfig+0x122>
 80029a2:	22c0      	movs	r2, #192	; 0xc0
 80029a4:	0292      	lsls	r2, r2, #10
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d822      	bhi.n	80029f0 <UART_SetConfig+0x140>
 80029aa:	2280      	movs	r2, #128	; 0x80
 80029ac:	0292      	lsls	r2, r2, #10
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d019      	beq.n	80029e6 <UART_SetConfig+0x136>
 80029b2:	2280      	movs	r2, #128	; 0x80
 80029b4:	0292      	lsls	r2, r2, #10
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d81a      	bhi.n	80029f0 <UART_SetConfig+0x140>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <UART_SetConfig+0x118>
 80029be:	2280      	movs	r2, #128	; 0x80
 80029c0:	0252      	lsls	r2, r2, #9
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00a      	beq.n	80029dc <UART_SetConfig+0x12c>
 80029c6:	e013      	b.n	80029f0 <UART_SetConfig+0x140>
 80029c8:	231f      	movs	r3, #31
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
 80029d0:	e083      	b.n	8002ada <UART_SetConfig+0x22a>
 80029d2:	231f      	movs	r3, #31
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	2202      	movs	r2, #2
 80029d8:	701a      	strb	r2, [r3, #0]
 80029da:	e07e      	b.n	8002ada <UART_SetConfig+0x22a>
 80029dc:	231f      	movs	r3, #31
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	2204      	movs	r2, #4
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	e079      	b.n	8002ada <UART_SetConfig+0x22a>
 80029e6:	231f      	movs	r3, #31
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	2208      	movs	r2, #8
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	e074      	b.n	8002ada <UART_SetConfig+0x22a>
 80029f0:	231f      	movs	r3, #31
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	2210      	movs	r2, #16
 80029f6:	701a      	strb	r2, [r3, #0]
 80029f8:	e06f      	b.n	8002ada <UART_SetConfig+0x22a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a7c      	ldr	r2, [pc, #496]	; (8002bf0 <UART_SetConfig+0x340>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d134      	bne.n	8002a6e <UART_SetConfig+0x1be>
 8002a04:	4b78      	ldr	r3, [pc, #480]	; (8002be8 <UART_SetConfig+0x338>)
 8002a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a08:	23c0      	movs	r3, #192	; 0xc0
 8002a0a:	031b      	lsls	r3, r3, #12
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	22c0      	movs	r2, #192	; 0xc0
 8002a10:	0312      	lsls	r2, r2, #12
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d017      	beq.n	8002a46 <UART_SetConfig+0x196>
 8002a16:	22c0      	movs	r2, #192	; 0xc0
 8002a18:	0312      	lsls	r2, r2, #12
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d822      	bhi.n	8002a64 <UART_SetConfig+0x1b4>
 8002a1e:	2280      	movs	r2, #128	; 0x80
 8002a20:	0312      	lsls	r2, r2, #12
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d019      	beq.n	8002a5a <UART_SetConfig+0x1aa>
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	0312      	lsls	r2, r2, #12
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d81a      	bhi.n	8002a64 <UART_SetConfig+0x1b4>
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <UART_SetConfig+0x18c>
 8002a32:	2280      	movs	r2, #128	; 0x80
 8002a34:	02d2      	lsls	r2, r2, #11
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00a      	beq.n	8002a50 <UART_SetConfig+0x1a0>
 8002a3a:	e013      	b.n	8002a64 <UART_SetConfig+0x1b4>
 8002a3c:	231f      	movs	r3, #31
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	e049      	b.n	8002ada <UART_SetConfig+0x22a>
 8002a46:	231f      	movs	r3, #31
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e044      	b.n	8002ada <UART_SetConfig+0x22a>
 8002a50:	231f      	movs	r3, #31
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	2204      	movs	r2, #4
 8002a56:	701a      	strb	r2, [r3, #0]
 8002a58:	e03f      	b.n	8002ada <UART_SetConfig+0x22a>
 8002a5a:	231f      	movs	r3, #31
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	2208      	movs	r2, #8
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	e03a      	b.n	8002ada <UART_SetConfig+0x22a>
 8002a64:	231f      	movs	r3, #31
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	2210      	movs	r2, #16
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	e035      	b.n	8002ada <UART_SetConfig+0x22a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a60      	ldr	r2, [pc, #384]	; (8002bf4 <UART_SetConfig+0x344>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d104      	bne.n	8002a82 <UART_SetConfig+0x1d2>
 8002a78:	231f      	movs	r3, #31
 8002a7a:	18fb      	adds	r3, r7, r3
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e02b      	b.n	8002ada <UART_SetConfig+0x22a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a5c      	ldr	r2, [pc, #368]	; (8002bf8 <UART_SetConfig+0x348>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d104      	bne.n	8002a96 <UART_SetConfig+0x1e6>
 8002a8c:	231f      	movs	r3, #31
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	e021      	b.n	8002ada <UART_SetConfig+0x22a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a58      	ldr	r2, [pc, #352]	; (8002bfc <UART_SetConfig+0x34c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d104      	bne.n	8002aaa <UART_SetConfig+0x1fa>
 8002aa0:	231f      	movs	r3, #31
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	e017      	b.n	8002ada <UART_SetConfig+0x22a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a54      	ldr	r2, [pc, #336]	; (8002c00 <UART_SetConfig+0x350>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d104      	bne.n	8002abe <UART_SetConfig+0x20e>
 8002ab4:	231f      	movs	r3, #31
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	e00d      	b.n	8002ada <UART_SetConfig+0x22a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a50      	ldr	r2, [pc, #320]	; (8002c04 <UART_SetConfig+0x354>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d104      	bne.n	8002ad2 <UART_SetConfig+0x222>
 8002ac8:	231f      	movs	r3, #31
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
 8002ad0:	e003      	b.n	8002ada <UART_SetConfig+0x22a>
 8002ad2:	231f      	movs	r3, #31
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69da      	ldr	r2, [r3, #28]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d15c      	bne.n	8002ba0 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8002ae6:	231f      	movs	r3, #31
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d015      	beq.n	8002b1c <UART_SetConfig+0x26c>
 8002af0:	dc18      	bgt.n	8002b24 <UART_SetConfig+0x274>
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d00d      	beq.n	8002b12 <UART_SetConfig+0x262>
 8002af6:	dc15      	bgt.n	8002b24 <UART_SetConfig+0x274>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <UART_SetConfig+0x252>
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d005      	beq.n	8002b0c <UART_SetConfig+0x25c>
 8002b00:	e010      	b.n	8002b24 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b02:	f7ff fd6b 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8002b06:	0003      	movs	r3, r0
 8002b08:	61bb      	str	r3, [r7, #24]
        break;
 8002b0a:	e012      	b.n	8002b32 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b0c:	4b3e      	ldr	r3, [pc, #248]	; (8002c08 <UART_SetConfig+0x358>)
 8002b0e:	61bb      	str	r3, [r7, #24]
        break;
 8002b10:	e00f      	b.n	8002b32 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b12:	f7ff fce7 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8002b16:	0003      	movs	r3, r0
 8002b18:	61bb      	str	r3, [r7, #24]
        break;
 8002b1a:	e00a      	b.n	8002b32 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	61bb      	str	r3, [r7, #24]
        break;
 8002b22:	e006      	b.n	8002b32 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b28:	231e      	movs	r3, #30
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]
        break;
 8002b30:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d100      	bne.n	8002b3a <UART_SetConfig+0x28a>
 8002b38:	e095      	b.n	8002c66 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	005a      	lsls	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	085b      	lsrs	r3, r3, #1
 8002b44:	18d2      	adds	r2, r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	0010      	movs	r0, r2
 8002b4e:	f7fd fad9 	bl	8000104 <__udivsi3>
 8002b52:	0003      	movs	r3, r0
 8002b54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b0f      	cmp	r3, #15
 8002b5a:	d91c      	bls.n	8002b96 <UART_SetConfig+0x2e6>
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	025b      	lsls	r3, r3, #9
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d217      	bcs.n	8002b96 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	200e      	movs	r0, #14
 8002b6c:	183b      	adds	r3, r7, r0
 8002b6e:	210f      	movs	r1, #15
 8002b70:	438a      	bics	r2, r1
 8002b72:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	085b      	lsrs	r3, r3, #1
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2207      	movs	r2, #7
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	b299      	uxth	r1, r3
 8002b80:	183b      	adds	r3, r7, r0
 8002b82:	183a      	adds	r2, r7, r0
 8002b84:	8812      	ldrh	r2, [r2, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	183a      	adds	r2, r7, r0
 8002b90:	8812      	ldrh	r2, [r2, #0]
 8002b92:	60da      	str	r2, [r3, #12]
 8002b94:	e067      	b.n	8002c66 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002b96:	231e      	movs	r3, #30
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
 8002b9e:	e062      	b.n	8002c66 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ba0:	231f      	movs	r3, #31
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d030      	beq.n	8002c0c <UART_SetConfig+0x35c>
 8002baa:	dc33      	bgt.n	8002c14 <UART_SetConfig+0x364>
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d00d      	beq.n	8002bcc <UART_SetConfig+0x31c>
 8002bb0:	dc30      	bgt.n	8002c14 <UART_SetConfig+0x364>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <UART_SetConfig+0x30c>
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d005      	beq.n	8002bc6 <UART_SetConfig+0x316>
 8002bba:	e02b      	b.n	8002c14 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bbc:	f7ff fd0e 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	61bb      	str	r3, [r7, #24]
        break;
 8002bc4:	e02d      	b.n	8002c22 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <UART_SetConfig+0x358>)
 8002bc8:	61bb      	str	r3, [r7, #24]
        break;
 8002bca:	e02a      	b.n	8002c22 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bcc:	f7ff fc8a 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	61bb      	str	r3, [r7, #24]
        break;
 8002bd4:	e025      	b.n	8002c22 <UART_SetConfig+0x372>
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	efff69f3 	.word	0xefff69f3
 8002bdc:	ffffcfff 	.word	0xffffcfff
 8002be0:	fffff4ff 	.word	0xfffff4ff
 8002be4:	40013800 	.word	0x40013800
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40004400 	.word	0x40004400
 8002bf0:	40004800 	.word	0x40004800
 8002bf4:	40004c00 	.word	0x40004c00
 8002bf8:	40005000 	.word	0x40005000
 8002bfc:	40011400 	.word	0x40011400
 8002c00:	40011800 	.word	0x40011800
 8002c04:	40011c00 	.word	0x40011c00
 8002c08:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	61bb      	str	r3, [r7, #24]
        break;
 8002c12:	e006      	b.n	8002c22 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c18:	231e      	movs	r3, #30
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
        break;
 8002c20:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01e      	beq.n	8002c66 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	085a      	lsrs	r2, r3, #1
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	18d2      	adds	r2, r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	0019      	movs	r1, r3
 8002c38:	0010      	movs	r0, r2
 8002c3a:	f7fd fa63 	bl	8000104 <__udivsi3>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b0f      	cmp	r3, #15
 8002c46:	d90a      	bls.n	8002c5e <UART_SetConfig+0x3ae>
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	025b      	lsls	r3, r3, #9
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d205      	bcs.n	8002c5e <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60da      	str	r2, [r3, #12]
 8002c5c:	e003      	b.n	8002c66 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002c5e:	231e      	movs	r3, #30
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	2201      	movs	r2, #1
 8002c64:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c72:	231e      	movs	r3, #30
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	781b      	ldrb	r3, [r3, #0]
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b008      	add	sp, #32
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d00b      	beq.n	8002caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4a4a      	ldr	r2, [pc, #296]	; (8002dc4 <UART_AdvFeatureConfig+0x144>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	2202      	movs	r2, #2
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d00b      	beq.n	8002ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4a43      	ldr	r2, [pc, #268]	; (8002dc8 <UART_AdvFeatureConfig+0x148>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d00b      	beq.n	8002cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4a3b      	ldr	r2, [pc, #236]	; (8002dcc <UART_AdvFeatureConfig+0x14c>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	0019      	movs	r1, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d00b      	beq.n	8002d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4a34      	ldr	r2, [pc, #208]	; (8002dd0 <UART_AdvFeatureConfig+0x150>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	0019      	movs	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	2210      	movs	r2, #16
 8002d16:	4013      	ands	r3, r2
 8002d18:	d00b      	beq.n	8002d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4a2c      	ldr	r2, [pc, #176]	; (8002dd4 <UART_AdvFeatureConfig+0x154>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	0019      	movs	r1, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	2220      	movs	r2, #32
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d00b      	beq.n	8002d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	4a25      	ldr	r2, [pc, #148]	; (8002dd8 <UART_AdvFeatureConfig+0x158>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	0019      	movs	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	2240      	movs	r2, #64	; 0x40
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d01d      	beq.n	8002d9a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <UART_AdvFeatureConfig+0x15c>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	0019      	movs	r1, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7a:	2380      	movs	r3, #128	; 0x80
 8002d7c:	035b      	lsls	r3, r3, #13
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d10b      	bne.n	8002d9a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4a15      	ldr	r2, [pc, #84]	; (8002de0 <UART_AdvFeatureConfig+0x160>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	2280      	movs	r2, #128	; 0x80
 8002da0:	4013      	ands	r3, r2
 8002da2:	d00b      	beq.n	8002dbc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4a0e      	ldr	r2, [pc, #56]	; (8002de4 <UART_AdvFeatureConfig+0x164>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	0019      	movs	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	605a      	str	r2, [r3, #4]
  }
}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	fffdffff 	.word	0xfffdffff
 8002dc8:	fffeffff 	.word	0xfffeffff
 8002dcc:	fffbffff 	.word	0xfffbffff
 8002dd0:	ffff7fff 	.word	0xffff7fff
 8002dd4:	ffffefff 	.word	0xffffefff
 8002dd8:	ffffdfff 	.word	0xffffdfff
 8002ddc:	ffefffff 	.word	0xffefffff
 8002de0:	ff9fffff 	.word	0xff9fffff
 8002de4:	fff7ffff 	.word	0xfff7ffff

08002de8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b092      	sub	sp, #72	; 0x48
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2284      	movs	r2, #132	; 0x84
 8002df4:	2100      	movs	r1, #0
 8002df6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002df8:	f7fd fdc8 	bl	800098c <HAL_GetTick>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2208      	movs	r2, #8
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d12c      	bne.n	8002e68 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e10:	2280      	movs	r2, #128	; 0x80
 8002e12:	0391      	lsls	r1, r2, #14
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	4a46      	ldr	r2, [pc, #280]	; (8002f30 <UART_CheckIdleState+0x148>)
 8002e18:	9200      	str	r2, [sp, #0]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f000 f88c 	bl	8002f38 <UART_WaitOnFlagUntilTimeout>
 8002e20:	1e03      	subs	r3, r0, #0
 8002e22:	d021      	beq.n	8002e68 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e24:	f3ef 8310 	mrs	r3, PRIMASK
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e2e:	2301      	movs	r3, #1
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	f383 8810 	msr	PRIMASK, r3
}
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	438a      	bics	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	f383 8810 	msr	PRIMASK, r3
}
 8002e54:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2278      	movs	r2, #120	; 0x78
 8002e60:	2100      	movs	r1, #0
 8002e62:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e05f      	b.n	8002f28 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2204      	movs	r2, #4
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d146      	bne.n	8002f04 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e78:	2280      	movs	r2, #128	; 0x80
 8002e7a:	03d1      	lsls	r1, r2, #15
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4a2c      	ldr	r2, [pc, #176]	; (8002f30 <UART_CheckIdleState+0x148>)
 8002e80:	9200      	str	r2, [sp, #0]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f000 f858 	bl	8002f38 <UART_WaitOnFlagUntilTimeout>
 8002e88:	1e03      	subs	r3, r0, #0
 8002e8a:	d03b      	beq.n	8002f04 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e90:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e92:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e94:	637b      	str	r3, [r7, #52]	; 0x34
 8002e96:	2301      	movs	r3, #1
 8002e98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4921      	ldr	r1, [pc, #132]	; (8002f34 <UART_CheckIdleState+0x14c>)
 8002eae:	400a      	ands	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f383 8810 	msr	PRIMASK, r3
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ec4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ec8:	2301      	movs	r3, #1
 8002eca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f383 8810 	msr	PRIMASK, r3
}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2101      	movs	r1, #1
 8002ee0:	438a      	bics	r2, r1
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	f383 8810 	msr	PRIMASK, r3
}
 8002eee:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	2120      	movs	r1, #32
 8002ef6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2278      	movs	r2, #120	; 0x78
 8002efc:	2100      	movs	r1, #0
 8002efe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e011      	b.n	8002f28 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2280      	movs	r2, #128	; 0x80
 8002f0e:	2120      	movs	r1, #32
 8002f10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2278      	movs	r2, #120	; 0x78
 8002f22:	2100      	movs	r1, #0
 8002f24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b010      	add	sp, #64	; 0x40
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	01ffffff 	.word	0x01ffffff
 8002f34:	fffffedf 	.word	0xfffffedf

08002f38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	1dfb      	adds	r3, r7, #7
 8002f46:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f48:	e04b      	b.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	d048      	beq.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f50:	f7fd fd1c 	bl	800098c <HAL_GetTick>
 8002f54:	0002      	movs	r2, r0
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d302      	bcc.n	8002f66 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e04b      	b.n	8003002 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2204      	movs	r2, #4
 8002f72:	4013      	ands	r3, r2
 8002f74:	d035      	beq.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d111      	bne.n	8002fa8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2208      	movs	r2, #8
 8002f8a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f000 f83c 	bl	800300c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2284      	movs	r2, #132	; 0x84
 8002f98:	2108      	movs	r1, #8
 8002f9a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2278      	movs	r2, #120	; 0x78
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e02c      	b.n	8003002 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69da      	ldr	r2, [r3, #28]
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d112      	bne.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2280      	movs	r2, #128	; 0x80
 8002fc2:	0112      	lsls	r2, r2, #4
 8002fc4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 f81f 	bl	800300c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2284      	movs	r2, #132	; 0x84
 8002fd2:	2120      	movs	r1, #32
 8002fd4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2278      	movs	r2, #120	; 0x78
 8002fda:	2100      	movs	r1, #0
 8002fdc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e00f      	b.n	8003002 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	4013      	ands	r3, r2
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	425a      	negs	r2, r3
 8002ff2:	4153      	adcs	r3, r2
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	001a      	movs	r2, r3
 8002ff8:	1dfb      	adds	r3, r7, #7
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d0a4      	beq.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	0018      	movs	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	b004      	add	sp, #16
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08e      	sub	sp, #56	; 0x38
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003014:	f3ef 8310 	mrs	r3, PRIMASK
 8003018:	617b      	str	r3, [r7, #20]
  return(result);
 800301a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800301c:	637b      	str	r3, [r7, #52]	; 0x34
 800301e:	2301      	movs	r3, #1
 8003020:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	f383 8810 	msr	PRIMASK, r3
}
 8003028:	46c0      	nop			; (mov r8, r8)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4926      	ldr	r1, [pc, #152]	; (80030d0 <UART_EndRxTransfer+0xc4>)
 8003036:	400a      	ands	r2, r1
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f383 8810 	msr	PRIMASK, r3
}
 8003044:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003046:	f3ef 8310 	mrs	r3, PRIMASK
 800304a:	623b      	str	r3, [r7, #32]
  return(result);
 800304c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304e:	633b      	str	r3, [r7, #48]	; 0x30
 8003050:	2301      	movs	r3, #1
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	f383 8810 	msr	PRIMASK, r3
}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2101      	movs	r1, #1
 8003068:	438a      	bics	r2, r1
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003072:	f383 8810 	msr	PRIMASK, r3
}
 8003076:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307c:	2b01      	cmp	r3, #1
 800307e:	d118      	bne.n	80030b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003080:	f3ef 8310 	mrs	r3, PRIMASK
 8003084:	60bb      	str	r3, [r7, #8]
  return(result);
 8003086:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800308a:	2301      	movs	r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f383 8810 	msr	PRIMASK, r3
}
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2110      	movs	r1, #16
 80030a2:	438a      	bics	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f383 8810 	msr	PRIMASK, r3
}
 80030b0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2280      	movs	r2, #128	; 0x80
 80030b6:	2120      	movs	r1, #32
 80030b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b00e      	add	sp, #56	; 0x38
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	fffffedf 	.word	0xfffffedf

080030d4 <memset>:
 80030d4:	0003      	movs	r3, r0
 80030d6:	1882      	adds	r2, r0, r2
 80030d8:	4293      	cmp	r3, r2
 80030da:	d100      	bne.n	80030de <memset+0xa>
 80030dc:	4770      	bx	lr
 80030de:	7019      	strb	r1, [r3, #0]
 80030e0:	3301      	adds	r3, #1
 80030e2:	e7f9      	b.n	80030d8 <memset+0x4>

080030e4 <__libc_init_array>:
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	2600      	movs	r6, #0
 80030e8:	4c0c      	ldr	r4, [pc, #48]	; (800311c <__libc_init_array+0x38>)
 80030ea:	4d0d      	ldr	r5, [pc, #52]	; (8003120 <__libc_init_array+0x3c>)
 80030ec:	1b64      	subs	r4, r4, r5
 80030ee:	10a4      	asrs	r4, r4, #2
 80030f0:	42a6      	cmp	r6, r4
 80030f2:	d109      	bne.n	8003108 <__libc_init_array+0x24>
 80030f4:	2600      	movs	r6, #0
 80030f6:	f000 f819 	bl	800312c <_init>
 80030fa:	4c0a      	ldr	r4, [pc, #40]	; (8003124 <__libc_init_array+0x40>)
 80030fc:	4d0a      	ldr	r5, [pc, #40]	; (8003128 <__libc_init_array+0x44>)
 80030fe:	1b64      	subs	r4, r4, r5
 8003100:	10a4      	asrs	r4, r4, #2
 8003102:	42a6      	cmp	r6, r4
 8003104:	d105      	bne.n	8003112 <__libc_init_array+0x2e>
 8003106:	bd70      	pop	{r4, r5, r6, pc}
 8003108:	00b3      	lsls	r3, r6, #2
 800310a:	58eb      	ldr	r3, [r5, r3]
 800310c:	4798      	blx	r3
 800310e:	3601      	adds	r6, #1
 8003110:	e7ee      	b.n	80030f0 <__libc_init_array+0xc>
 8003112:	00b3      	lsls	r3, r6, #2
 8003114:	58eb      	ldr	r3, [r5, r3]
 8003116:	4798      	blx	r3
 8003118:	3601      	adds	r6, #1
 800311a:	e7f2      	b.n	8003102 <__libc_init_array+0x1e>
 800311c:	08003184 	.word	0x08003184
 8003120:	08003184 	.word	0x08003184
 8003124:	08003188 	.word	0x08003188
 8003128:	08003184 	.word	0x08003184

0800312c <_init>:
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003132:	bc08      	pop	{r3}
 8003134:	469e      	mov	lr, r3
 8003136:	4770      	bx	lr

08003138 <_fini>:
 8003138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313e:	bc08      	pop	{r3}
 8003140:	469e      	mov	lr, r3
 8003142:	4770      	bx	lr
