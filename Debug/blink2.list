
blink2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030f8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f4  080031f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031f4  080031f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031f4  080031f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08003208  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003208  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000097b8  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018de  00000000  00000000  0002982f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a0  00000000  00000000  0002b110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005d9  00000000  00000000  0002b8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a211  00000000  00000000  0002be89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a1a2  00000000  00000000  0004609a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f069  00000000  00000000  0005023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000019e0  00000000  00000000  000ef2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000f0c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800319c 	.word	0x0800319c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800319c 	.word	0x0800319c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <MX_CAN_Init>:
uint8_t RxData[8];
volatile uint8_t CAN_received;


void MX_CAN_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b08a      	sub	sp, #40	; 0x28
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000222:	4b35      	ldr	r3, [pc, #212]	; (80002f8 <MX_CAN_Init+0xdc>)
 8000224:	4a35      	ldr	r2, [pc, #212]	; (80002fc <MX_CAN_Init+0xe0>)
 8000226:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 8000228:	4b33      	ldr	r3, [pc, #204]	; (80002f8 <MX_CAN_Init+0xdc>)
 800022a:	220c      	movs	r2, #12
 800022c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800022e:	4b32      	ldr	r3, [pc, #200]	; (80002f8 <MX_CAN_Init+0xdc>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000234:	4b30      	ldr	r3, [pc, #192]	; (80002f8 <MX_CAN_Init+0xdc>)
 8000236:	2200      	movs	r2, #0
 8000238:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800023a:	4b2f      	ldr	r3, [pc, #188]	; (80002f8 <MX_CAN_Init+0xdc>)
 800023c:	22c0      	movs	r2, #192	; 0xc0
 800023e:	0312      	lsls	r2, r2, #12
 8000240:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000242:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <MX_CAN_Init+0xdc>)
 8000244:	2280      	movs	r2, #128	; 0x80
 8000246:	0352      	lsls	r2, r2, #13
 8000248:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800024a:	4b2b      	ldr	r3, [pc, #172]	; (80002f8 <MX_CAN_Init+0xdc>)
 800024c:	2200      	movs	r2, #0
 800024e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000250:	4b29      	ldr	r3, [pc, #164]	; (80002f8 <MX_CAN_Init+0xdc>)
 8000252:	2200      	movs	r2, #0
 8000254:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000256:	4b28      	ldr	r3, [pc, #160]	; (80002f8 <MX_CAN_Init+0xdc>)
 8000258:	2200      	movs	r2, #0
 800025a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800025c:	4b26      	ldr	r3, [pc, #152]	; (80002f8 <MX_CAN_Init+0xdc>)
 800025e:	2200      	movs	r2, #0
 8000260:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000262:	4b25      	ldr	r3, [pc, #148]	; (80002f8 <MX_CAN_Init+0xdc>)
 8000264:	2200      	movs	r2, #0
 8000266:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000268:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <MX_CAN_Init+0xdc>)
 800026a:	2200      	movs	r2, #0
 800026c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800026e:	4b22      	ldr	r3, [pc, #136]	; (80002f8 <MX_CAN_Init+0xdc>)
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fbcd 	bl	8000a10 <HAL_CAN_Init>
 8000276:	1e03      	subs	r3, r0, #0
 8000278:	d001      	beq.n	800027e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800027a:	f000 fa3b 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  // CONFIGURE THE CAN FILTER
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800027e:	003b      	movs	r3, r7
 8000280:	2201      	movs	r2, #1
 8000282:	621a      	str	r2, [r3, #32]
  canfilterconfig.FilterBank = 0;
 8000284:	003b      	movs	r3, r7
 8000286:	2200      	movs	r2, #0
 8000288:	615a      	str	r2, [r3, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800028a:	003b      	movs	r3, r7
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  canfilterconfig.FilterIdHigh=0x0000;
 8000290:	003b      	movs	r3, r7
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
  canfilterconfig.FilterIdLow=0x0000;
 8000296:	003b      	movs	r3, r7
 8000298:	2200      	movs	r2, #0
 800029a:	605a      	str	r2, [r3, #4]
  canfilterconfig.FilterMaskIdHigh=0x0000;
 800029c:	003b      	movs	r3, r7
 800029e:	2200      	movs	r2, #0
 80002a0:	609a      	str	r2, [r3, #8]
  canfilterconfig.FilterMaskIdLow=0x0000;
 80002a2:	003b      	movs	r3, r7
 80002a4:	2200      	movs	r2, #0
 80002a6:	60da      	str	r2, [r3, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80002a8:	003b      	movs	r3, r7
 80002aa:	2200      	movs	r2, #0
 80002ac:	619a      	str	r2, [r3, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80002ae:	003b      	movs	r3, r7
 80002b0:	2201      	movs	r2, #1
 80002b2:	61da      	str	r2, [r3, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 80002b4:	003b      	movs	r3, r7
 80002b6:	2200      	movs	r2, #0
 80002b8:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig) != HAL_OK) {
 80002ba:	003a      	movs	r2, r7
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <MX_CAN_Init+0xdc>)
 80002be:	0011      	movs	r1, r2
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 fca3 	bl	8000c0c <HAL_CAN_ConfigFilter>
 80002c6:	1e03      	subs	r3, r0, #0
 80002c8:	d001      	beq.n	80002ce <MX_CAN_Init+0xb2>
    		Error_Handler();
 80002ca:	f000 fa13 	bl	80006f4 <Error_Handler>
  }

  // START CAN

  	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 80002ce:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <MX_CAN_Init+0xdc>)
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fd8d 	bl	8000df0 <HAL_CAN_Start>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <MX_CAN_Init+0xc2>
  		Error_Handler();
 80002da:	f000 fa0b 	bl	80006f4 <Error_Handler>
  	}

  	// Initialize CAN Bus Rx Interrupt
  	CAN_received = 0;
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <MX_CAN_Init+0xe4>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	701a      	strb	r2, [r3, #0]
  	HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 80002e4:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <MX_CAN_Init+0xdc>)
 80002e6:	2102      	movs	r1, #2
 80002e8:	0018      	movs	r0, r3
 80002ea:	f000 ffeb 	bl	80012c4 <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN_Init 2 */

}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b00a      	add	sp, #40	; 0x28
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	20000028 	.word	0x20000028
 80002fc:	40006400 	.word	0x40006400
 8000300:	20000090 	.word	0x20000090

08000304 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800030e:	4a07      	ldr	r2, [pc, #28]	; (800032c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	2100      	movs	r1, #0
 8000314:	f000 feab 	bl	800106e <HAL_CAN_GetRxMessage>
	CAN_received = 1;
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800031a:	2201      	movs	r2, #1
 800031c:	701a      	strb	r2, [r3, #0]
}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	46bd      	mov	sp, r7
 8000322:	b002      	add	sp, #8
 8000324:	bd80      	pop	{r7, pc}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	20000088 	.word	0x20000088
 800032c:	20000068 	.word	0x20000068
 8000330:	20000090 	.word	0x20000090

08000334 <CAN_set_TxHeader>:

void CAN_set_TxHeader(uint32_t IDE, uint32_t RTR, uint32_t StdId) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	60f8      	str	r0, [r7, #12]
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
	TxHeader.DLC = 0;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <CAN_set_TxHeader+0x34>)
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = IDE;
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <CAN_set_TxHeader+0x34>)
 8000348:	68fa      	ldr	r2, [r7, #12]
 800034a:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = RTR;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <CAN_set_TxHeader+0x34>)
 800034e:	68ba      	ldr	r2, [r7, #8]
 8000350:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = StdId;
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <CAN_set_TxHeader+0x34>)
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <CAN_set_TxHeader+0x34>)
 800035a:	2200      	movs	r2, #0
 800035c:	751a      	strb	r2, [r3, #20]
}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	b004      	add	sp, #16
 8000364:	bd80      	pop	{r7, pc}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	20000050 	.word	0x20000050

0800036c <transmit_CAN_message>:

/*
 * Returns: error code
 */
uint8_t transmit_CAN_message(uint8_t TxData[8], uint32_t DLC) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
	TxHeader.DLC = DLC;
 8000376:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <transmit_CAN_message+0x84>)
 8000378:	683a      	ldr	r2, [r7, #0]
 800037a:	611a      	str	r2, [r3, #16]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800037c:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <transmit_CAN_message+0x88>)
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	491b      	ldr	r1, [pc, #108]	; (80003f0 <transmit_CAN_message+0x84>)
 8000382:	481d      	ldr	r0, [pc, #116]	; (80003f8 <transmit_CAN_message+0x8c>)
 8000384:	f000 fd7a 	bl	8000e7c <HAL_CAN_AddTxMessage>

	/* DEBUGGING ERRORS
	https://stackoverflow.com/questions/61376402/stm32-can-loop-back-mode*/

	//waiting for message to leave
	while(HAL_CAN_IsTxMessagePending(&hcan, TxMailbox));
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <transmit_CAN_message+0x88>)
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <transmit_CAN_message+0x8c>)
 8000390:	0011      	movs	r1, r2
 8000392:	0018      	movs	r0, r3
 8000394:	f000 fe44 	bl	8001020 <HAL_CAN_IsTxMessagePending>
 8000398:	1e03      	subs	r3, r0, #0
 800039a:	d1f6      	bne.n	800038a <transmit_CAN_message+0x1e>

	//waiting for transmission request to be completed by checking RQCPx
	while( !(hcan.Instance->TSR & ( 0x1 << (7 * ( TxMailbox - 1 )))));
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	4b16      	ldr	r3, [pc, #88]	; (80003f8 <transmit_CAN_message+0x8c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	6899      	ldr	r1, [r3, #8]
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <transmit_CAN_message+0x88>)
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	0013      	movs	r3, r2
 80003aa:	00db      	lsls	r3, r3, #3
 80003ac:	1a9b      	subs	r3, r3, r2
 80003ae:	3b07      	subs	r3, #7
 80003b0:	2201      	movs	r2, #1
 80003b2:	409a      	lsls	r2, r3
 80003b4:	0013      	movs	r3, r2
 80003b6:	400b      	ands	r3, r1
 80003b8:	d0f1      	beq.n	800039e <transmit_CAN_message+0x32>

	//checking if there is an error at TERRx, may be done with TXOKx as well (i think)
	if ((hcan.Instance->TSR & ( 0x8 << (7 * ( TxMailbox - 1 ))))){
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <transmit_CAN_message+0x8c>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	6899      	ldr	r1, [r3, #8]
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <transmit_CAN_message+0x88>)
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	0013      	movs	r3, r2
 80003c6:	00db      	lsls	r3, r3, #3
 80003c8:	1a9b      	subs	r3, r3, r2
 80003ca:	3b07      	subs	r3, #7
 80003cc:	2208      	movs	r2, #8
 80003ce:	409a      	lsls	r2, r3
 80003d0:	0013      	movs	r3, r2
 80003d2:	400b      	ands	r3, r1
 80003d4:	d008      	beq.n	80003e8 <transmit_CAN_message+0x7c>
	  //error is described in ESR at LEC last error code
	  return ( hcan.Instance->ESR & 0x70 ) >> 4;
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <transmit_CAN_message+0x8c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	091b      	lsrs	r3, r3, #4
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	2207      	movs	r2, #7
 80003e2:	4013      	ands	r3, r2
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	e7ff      	b.n	80003e8 <transmit_CAN_message+0x7c>
	  //100: Bit recessive Error
	  //101: Bit dominant Error
	  //110: CRC Error
	  //111: Set by software
	}
}
 80003e8:	0018      	movs	r0, r3
 80003ea:	46bd      	mov	sp, r7
 80003ec:	b002      	add	sp, #8
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000050 	.word	0x20000050
 80003f4:	20000084 	.word	0x20000084
 80003f8:	20000028 	.word	0x20000028

080003fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000402:	f000 faa1 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000406:	f000 f863 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040a:	f000 f8f1 	bl	80005f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800040e:	f000 f8bf 	bl	8000590 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000412:	f7ff ff03 	bl	800021c <MX_CAN_Init>

  /* USER CODE BEGIN 2 */
  CAN_set_TxHeader(CAN_ID_STD, CAN_RTR_DATA, 0b01010011011);
 8000416:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <main+0xbc>)
 8000418:	001a      	movs	r2, r3
 800041a:	2100      	movs	r1, #0
 800041c:	2000      	movs	r0, #0
 800041e:	f7ff ff89 	bl	8000334 <CAN_set_TxHeader>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (button_pressed == 1) {
 8000422:	4b26      	ldr	r3, [pc, #152]	; (80004bc <main+0xc0>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	b2db      	uxtb	r3, r3
 8000428:	2b01      	cmp	r3, #1
 800042a:	d115      	bne.n	8000458 <main+0x5c>
	  		  uint8_t TxData[8] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88};
 800042c:	003b      	movs	r3, r7
 800042e:	4a24      	ldr	r2, [pc, #144]	; (80004c0 <main+0xc4>)
 8000430:	ca03      	ldmia	r2!, {r0, r1}
 8000432:	c303      	stmia	r3!, {r0, r1}
	  		  error_code = transmit_CAN_message(TxData, 8);
 8000434:	003b      	movs	r3, r7
 8000436:	2108      	movs	r1, #8
 8000438:	0018      	movs	r0, r3
 800043a:	f7ff ff97 	bl	800036c <transmit_CAN_message>
 800043e:	0003      	movs	r3, r0
 8000440:	001a      	movs	r2, r3
 8000442:	4b20      	ldr	r3, [pc, #128]	; (80004c4 <main+0xc8>)
 8000444:	701a      	strb	r2, [r3, #0]

	  		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000446:	2390      	movs	r3, #144	; 0x90
 8000448:	05db      	lsls	r3, r3, #23
 800044a:	2120      	movs	r1, #32
 800044c:	0018      	movs	r0, r3
 800044e:	f001 fbea 	bl	8001c26 <HAL_GPIO_TogglePin>
	  		  button_pressed = 0;
 8000452:	4b1a      	ldr	r3, [pc, #104]	; (80004bc <main+0xc0>)
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
	  }

	  if (CAN_received == 1) {
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <main+0xcc>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	b2db      	uxtb	r3, r3
 800045e:	2b01      	cmp	r3, #1
 8000460:	d1df      	bne.n	8000422 <main+0x26>
		  if (RxData[0] == 0x11 && RxData[1] == 0x22 && RxData[2] == 0x33 && RxData[3] == 0x44 && RxData[4] == 0x55 && RxData[5] == 0x66 && RxData[6] == 0x77 && RxData[7] == 0x88)
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <main+0xd0>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b11      	cmp	r3, #17
 8000468:	d121      	bne.n	80004ae <main+0xb2>
 800046a:	4b18      	ldr	r3, [pc, #96]	; (80004cc <main+0xd0>)
 800046c:	785b      	ldrb	r3, [r3, #1]
 800046e:	2b22      	cmp	r3, #34	; 0x22
 8000470:	d11d      	bne.n	80004ae <main+0xb2>
 8000472:	4b16      	ldr	r3, [pc, #88]	; (80004cc <main+0xd0>)
 8000474:	789b      	ldrb	r3, [r3, #2]
 8000476:	2b33      	cmp	r3, #51	; 0x33
 8000478:	d119      	bne.n	80004ae <main+0xb2>
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <main+0xd0>)
 800047c:	78db      	ldrb	r3, [r3, #3]
 800047e:	2b44      	cmp	r3, #68	; 0x44
 8000480:	d115      	bne.n	80004ae <main+0xb2>
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <main+0xd0>)
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	2b55      	cmp	r3, #85	; 0x55
 8000488:	d111      	bne.n	80004ae <main+0xb2>
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <main+0xd0>)
 800048c:	795b      	ldrb	r3, [r3, #5]
 800048e:	2b66      	cmp	r3, #102	; 0x66
 8000490:	d10d      	bne.n	80004ae <main+0xb2>
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <main+0xd0>)
 8000494:	799b      	ldrb	r3, [r3, #6]
 8000496:	2b77      	cmp	r3, #119	; 0x77
 8000498:	d109      	bne.n	80004ae <main+0xb2>
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <main+0xd0>)
 800049c:	79db      	ldrb	r3, [r3, #7]
 800049e:	2b88      	cmp	r3, #136	; 0x88
 80004a0:	d105      	bne.n	80004ae <main+0xb2>
		  		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004a2:	2390      	movs	r3, #144	; 0x90
 80004a4:	05db      	lsls	r3, r3, #23
 80004a6:	2120      	movs	r1, #32
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 fbbc 	bl	8001c26 <HAL_GPIO_TogglePin>

		  CAN_received = 0;
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <main+0xcc>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	701a      	strb	r2, [r3, #0]
	  if (button_pressed == 1) {
 80004b4:	e7b5      	b.n	8000422 <main+0x26>
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	0000029b 	.word	0x0000029b
 80004bc:	2000011c 	.word	0x2000011c
 80004c0:	080031b4 	.word	0x080031b4
 80004c4:	2000011d 	.word	0x2000011d
 80004c8:	20000090 	.word	0x20000090
 80004cc:	20000088 	.word	0x20000088

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b099      	sub	sp, #100	; 0x64
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	242c      	movs	r4, #44	; 0x2c
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	0018      	movs	r0, r3
 80004dc:	2334      	movs	r3, #52	; 0x34
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f002 fe2f 	bl	8003144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	231c      	movs	r3, #28
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	0018      	movs	r0, r3
 80004ec:	2310      	movs	r3, #16
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f002 fe27 	bl	8003144 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f6:	003b      	movs	r3, r7
 80004f8:	0018      	movs	r0, r3
 80004fa:	231c      	movs	r3, #28
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f002 fe20 	bl	8003144 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000504:	0021      	movs	r1, r4
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2201      	movs	r2, #1
 800050a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2205      	movs	r2, #5
 8000510:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2202      	movs	r2, #2
 8000516:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	0252      	lsls	r2, r2, #9
 800051e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	22a0      	movs	r2, #160	; 0xa0
 8000524:	0392      	lsls	r2, r2, #14
 8000526:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2201      	movs	r2, #1
 800052c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052e:	187b      	adds	r3, r7, r1
 8000530:	0018      	movs	r0, r3
 8000532:	f001 fbaf 	bl	8001c94 <HAL_RCC_OscConfig>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800053a:	f000 f8db 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053e:	211c      	movs	r1, #28
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2207      	movs	r2, #7
 8000544:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2202      	movs	r2, #2
 800054a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2101      	movs	r1, #1
 800055c:	0018      	movs	r0, r3
 800055e:	f001 ff1f 	bl	80023a0 <HAL_RCC_ClockConfig>
 8000562:	1e03      	subs	r3, r0, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000566:	f000 f8c5 	bl	80006f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800056a:	003b      	movs	r3, r7
 800056c:	2202      	movs	r2, #2
 800056e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000570:	003b      	movs	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000576:	003b      	movs	r3, r7
 8000578:	0018      	movs	r0, r3
 800057a:	f002 f87d 	bl	8002678 <HAL_RCCEx_PeriphCLKConfig>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000582:	f000 f8b7 	bl	80006f4 <Error_Handler>
  }
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b019      	add	sp, #100	; 0x64
 800058c:	bd90      	pop	{r4, r7, pc}
	...

08000590 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 8000596:	4a15      	ldr	r2, [pc, #84]	; (80005ec <MX_USART2_UART_Init+0x5c>)
 8000598:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 800059c:	22e1      	movs	r2, #225	; 0xe1
 800059e:	0252      	lsls	r2, r2, #9
 80005a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005b6:	220c      	movs	r2, #12
 80005b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005d4:	0018      	movs	r0, r3
 80005d6:	f002 f94f 	bl	8002878 <HAL_UART_Init>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005de:	f000 f889 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000094 	.word	0x20000094
 80005ec:	40004400 	.word	0x40004400

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b089      	sub	sp, #36	; 0x24
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	240c      	movs	r4, #12
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	0018      	movs	r0, r3
 80005fc:	2314      	movs	r3, #20
 80005fe:	001a      	movs	r2, r3
 8000600:	2100      	movs	r1, #0
 8000602:	f002 fd9f 	bl	8003144 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	4b31      	ldr	r3, [pc, #196]	; (80006cc <MX_GPIO_Init+0xdc>)
 8000608:	695a      	ldr	r2, [r3, #20]
 800060a:	4b30      	ldr	r3, [pc, #192]	; (80006cc <MX_GPIO_Init+0xdc>)
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	0309      	lsls	r1, r1, #12
 8000610:	430a      	orrs	r2, r1
 8000612:	615a      	str	r2, [r3, #20]
 8000614:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <MX_GPIO_Init+0xdc>)
 8000616:	695a      	ldr	r2, [r3, #20]
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	031b      	lsls	r3, r3, #12
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000622:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <MX_GPIO_Init+0xdc>)
 8000624:	695a      	ldr	r2, [r3, #20]
 8000626:	4b29      	ldr	r3, [pc, #164]	; (80006cc <MX_GPIO_Init+0xdc>)
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	03c9      	lsls	r1, r1, #15
 800062c:	430a      	orrs	r2, r1
 800062e:	615a      	str	r2, [r3, #20]
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <MX_GPIO_Init+0xdc>)
 8000632:	695a      	ldr	r2, [r3, #20]
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	03db      	lsls	r3, r3, #15
 8000638:	4013      	ands	r3, r2
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b23      	ldr	r3, [pc, #140]	; (80006cc <MX_GPIO_Init+0xdc>)
 8000640:	695a      	ldr	r2, [r3, #20]
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_GPIO_Init+0xdc>)
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	0289      	lsls	r1, r1, #10
 8000648:	430a      	orrs	r2, r1
 800064a:	615a      	str	r2, [r3, #20]
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <MX_GPIO_Init+0xdc>)
 800064e:	695a      	ldr	r2, [r3, #20]
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	029b      	lsls	r3, r3, #10
 8000654:	4013      	ands	r3, r2
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800065a:	2390      	movs	r3, #144	; 0x90
 800065c:	05db      	lsls	r3, r3, #23
 800065e:	2200      	movs	r2, #0
 8000660:	2120      	movs	r1, #32
 8000662:	0018      	movs	r0, r3
 8000664:	f001 fac2 	bl	8001bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	2280      	movs	r2, #128	; 0x80
 800066c:	0192      	lsls	r2, r2, #6
 800066e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2284      	movs	r2, #132	; 0x84
 8000674:	0392      	lsls	r2, r2, #14
 8000676:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800067e:	193b      	adds	r3, r7, r4
 8000680:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <MX_GPIO_Init+0xe0>)
 8000682:	0019      	movs	r1, r3
 8000684:	0010      	movs	r0, r2
 8000686:	f001 f939 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800068a:	0021      	movs	r1, r4
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2220      	movs	r2, #32
 8000690:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2201      	movs	r2, #1
 8000696:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006a4:	187a      	adds	r2, r7, r1
 80006a6:	2390      	movs	r3, #144	; 0x90
 80006a8:	05db      	lsls	r3, r3, #23
 80006aa:	0011      	movs	r1, r2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 f925 	bl	80018fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	2007      	movs	r0, #7
 80006b8:	f001 f8ee 	bl	8001898 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006bc:	2007      	movs	r0, #7
 80006be:	f001 f900 	bl	80018c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b009      	add	sp, #36	; 0x24
 80006c8:	bd90      	pop	{r4, r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000800 	.word	0x48000800

080006d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	0002      	movs	r2, r0
 80006dc:	1dbb      	adds	r3, r7, #6
 80006de:	801a      	strh	r2, [r3, #0]
	button_pressed = 1;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <HAL_GPIO_EXTI_Callback+0x1c>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b002      	add	sp, #8
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	2000011c 	.word	0x2000011c

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <HAL_MspInit+0x44>)
 8000708:	699a      	ldr	r2, [r3, #24]
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_MspInit+0x44>)
 800070c:	2101      	movs	r1, #1
 800070e:	430a      	orrs	r2, r1
 8000710:	619a      	str	r2, [r3, #24]
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <HAL_MspInit+0x44>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	2201      	movs	r2, #1
 8000718:	4013      	ands	r3, r2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_MspInit+0x44>)
 8000720:	69da      	ldr	r2, [r3, #28]
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_MspInit+0x44>)
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	0549      	lsls	r1, r1, #21
 8000728:	430a      	orrs	r2, r1
 800072a:	61da      	str	r2, [r3, #28]
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_MspInit+0x44>)
 800072e:	69da      	ldr	r2, [r3, #28]
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	055b      	lsls	r3, r3, #21
 8000734:	4013      	ands	r3, r2
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b002      	add	sp, #8
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b08b      	sub	sp, #44	; 0x2c
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	2414      	movs	r4, #20
 8000752:	193b      	adds	r3, r7, r4
 8000754:	0018      	movs	r0, r3
 8000756:	2314      	movs	r3, #20
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f002 fcf2 	bl	8003144 <memset>
  if(hcan->Instance==CAN)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <HAL_CAN_MspInit+0xa4>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d13b      	bne.n	80007e2 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <HAL_CAN_MspInit+0xa8>)
 800076c:	69da      	ldr	r2, [r3, #28]
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <HAL_CAN_MspInit+0xa8>)
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	0489      	lsls	r1, r1, #18
 8000774:	430a      	orrs	r2, r1
 8000776:	61da      	str	r2, [r3, #28]
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <HAL_CAN_MspInit+0xa8>)
 800077a:	69da      	ldr	r2, [r3, #28]
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	049b      	lsls	r3, r3, #18
 8000780:	4013      	ands	r3, r2
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <HAL_CAN_MspInit+0xa8>)
 8000788:	695a      	ldr	r2, [r3, #20]
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <HAL_CAN_MspInit+0xa8>)
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	0289      	lsls	r1, r1, #10
 8000790:	430a      	orrs	r2, r1
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <HAL_CAN_MspInit+0xa8>)
 8000796:	695a      	ldr	r2, [r3, #20]
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	029b      	lsls	r3, r3, #10
 800079c:	4013      	ands	r3, r2
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	22c0      	movs	r2, #192	; 0xc0
 80007a6:	0152      	lsls	r2, r2, #5
 80007a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	0021      	movs	r1, r4
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2202      	movs	r2, #2
 80007b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2203      	movs	r2, #3
 80007bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2204      	movs	r2, #4
 80007c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	187a      	adds	r2, r7, r1
 80007c6:	2390      	movs	r3, #144	; 0x90
 80007c8:	05db      	lsls	r3, r3, #23
 80007ca:	0011      	movs	r1, r2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 f895 	bl	80018fc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	201e      	movs	r0, #30
 80007d8:	f001 f85e 	bl	8001898 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80007dc:	201e      	movs	r0, #30
 80007de:	f001 f870 	bl	80018c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b00b      	add	sp, #44	; 0x2c
 80007e8:	bd90      	pop	{r4, r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	40006400 	.word	0x40006400
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b08b      	sub	sp, #44	; 0x2c
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	2414      	movs	r4, #20
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	0018      	movs	r0, r3
 8000802:	2314      	movs	r3, #20
 8000804:	001a      	movs	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	f002 fc9c 	bl	8003144 <memset>
  if(huart->Instance==USART2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <HAL_UART_MspInit+0x90>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d132      	bne.n	800087c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <HAL_UART_MspInit+0x94>)
 8000818:	69da      	ldr	r2, [r3, #28]
 800081a:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <HAL_UART_MspInit+0x94>)
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	0289      	lsls	r1, r1, #10
 8000820:	430a      	orrs	r2, r1
 8000822:	61da      	str	r2, [r3, #28]
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <HAL_UART_MspInit+0x94>)
 8000826:	69da      	ldr	r2, [r3, #28]
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	029b      	lsls	r3, r3, #10
 800082c:	4013      	ands	r3, r2
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <HAL_UART_MspInit+0x94>)
 8000834:	695a      	ldr	r2, [r3, #20]
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <HAL_UART_MspInit+0x94>)
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	0289      	lsls	r1, r1, #10
 800083c:	430a      	orrs	r2, r1
 800083e:	615a      	str	r2, [r3, #20]
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <HAL_UART_MspInit+0x94>)
 8000842:	695a      	ldr	r2, [r3, #20]
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	029b      	lsls	r3, r3, #10
 8000848:	4013      	ands	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800084e:	0021      	movs	r1, r4
 8000850:	187b      	adds	r3, r7, r1
 8000852:	220c      	movs	r2, #12
 8000854:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2202      	movs	r2, #2
 800085a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2201      	movs	r2, #1
 800086c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	187a      	adds	r2, r7, r1
 8000870:	2390      	movs	r3, #144	; 0x90
 8000872:	05db      	lsls	r3, r3, #23
 8000874:	0011      	movs	r1, r2
 8000876:	0018      	movs	r0, r3
 8000878:	f001 f840 	bl	80018fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b00b      	add	sp, #44	; 0x2c
 8000882:	bd90      	pop	{r4, r7, pc}
 8000884:	40004400 	.word	0x40004400
 8000888:	40021000 	.word	0x40021000

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <NMI_Handler+0x4>

08000892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <HardFault_Handler+0x4>

08000898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b0:	f000 f892 	bl	80009d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	019b      	lsls	r3, r3, #6
 80008c2:	0018      	movs	r0, r3
 80008c4:	f001 f9ca 	bl	8001c5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <CEC_CAN_IRQHandler+0x14>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 fd1e 	bl	8001318 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	20000028 	.word	0x20000028

080008e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f8:	f7ff fff6 	bl	80008e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <LoopForever+0x6>)
  ldr r1, =_edata
 80008fe:	490d      	ldr	r1, [pc, #52]	; (8000934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <LoopForever+0xe>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000914:	4c0a      	ldr	r4, [pc, #40]	; (8000940 <LoopForever+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000922:	f002 fc17 	bl	8003154 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000926:	f7ff fd69 	bl	80003fc <main>

0800092a <LoopForever>:

LoopForever:
    b LoopForever
 800092a:	e7fe      	b.n	800092a <LoopForever>
  ldr   r0, =_estack
 800092c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000938:	080031fc 	.word	0x080031fc
  ldr r2, =_sbss
 800093c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000940:	20000124 	.word	0x20000124

08000944 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_COMP_IRQHandler>
	...

08000948 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <HAL_Init+0x24>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_Init+0x24>)
 8000952:	2110      	movs	r1, #16
 8000954:	430a      	orrs	r2, r1
 8000956:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000958:	2000      	movs	r0, #0
 800095a:	f000 f809 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095e:	f7ff fecf 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000962:	2300      	movs	r3, #0
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	40022000 	.word	0x40022000

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <HAL_InitTick+0x5c>)
 800097a:	681c      	ldr	r4, [r3, #0]
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <HAL_InitTick+0x60>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	0019      	movs	r1, r3
 8000982:	23fa      	movs	r3, #250	; 0xfa
 8000984:	0098      	lsls	r0, r3, #2
 8000986:	f7ff fbbd 	bl	8000104 <__udivsi3>
 800098a:	0003      	movs	r3, r0
 800098c:	0019      	movs	r1, r3
 800098e:	0020      	movs	r0, r4
 8000990:	f7ff fbb8 	bl	8000104 <__udivsi3>
 8000994:	0003      	movs	r3, r0
 8000996:	0018      	movs	r0, r3
 8000998:	f000 ffa3 	bl	80018e2 <HAL_SYSTICK_Config>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e00f      	b.n	80009c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	d80b      	bhi.n	80009c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	2301      	movs	r3, #1
 80009ae:	425b      	negs	r3, r3
 80009b0:	2200      	movs	r2, #0
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 ff70 	bl	8001898 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_InitTick+0x64>)
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
 80009c0:	e000      	b.n	80009c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b003      	add	sp, #12
 80009ca:	bd90      	pop	{r4, r7, pc}
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000004 	.word	0x20000004

080009d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x1c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	001a      	movs	r2, r3
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_IncTick+0x20>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	18d2      	adds	r2, r2, r3
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <HAL_IncTick+0x20>)
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000120 	.word	0x20000120

080009fc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b02      	ldr	r3, [pc, #8]	; (8000a0c <HAL_GetTick+0x10>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	0018      	movs	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	20000120 	.word	0x20000120

08000a10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d101      	bne.n	8000a22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e0f0      	b.n	8000c04 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2220      	movs	r2, #32
 8000a26:	5c9b      	ldrb	r3, [r3, r2]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d103      	bne.n	8000a36 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	0018      	movs	r0, r3
 8000a32:	f7ff fe89 	bl	8000748 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2101      	movs	r1, #1
 8000a42:	430a      	orrs	r2, r1
 8000a44:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a46:	f7ff ffd9 	bl	80009fc <HAL_GetTick>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a4e:	e013      	b.n	8000a78 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a50:	f7ff ffd4 	bl	80009fc <HAL_GetTick>
 8000a54:	0002      	movs	r2, r0
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	2b0a      	cmp	r3, #10
 8000a5c:	d90c      	bls.n	8000a78 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	0292      	lsls	r2, r2, #10
 8000a66:	431a      	orrs	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2220      	movs	r2, #32
 8000a70:	2105      	movs	r1, #5
 8000a72:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	e0c5      	b.n	8000c04 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4013      	ands	r3, r2
 8000a82:	d0e5      	beq.n	8000a50 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2102      	movs	r1, #2
 8000a90:	438a      	bics	r2, r1
 8000a92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a94:	f7ff ffb2 	bl	80009fc <HAL_GetTick>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a9c:	e013      	b.n	8000ac6 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a9e:	f7ff ffad 	bl	80009fc <HAL_GetTick>
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	2b0a      	cmp	r3, #10
 8000aaa:	d90c      	bls.n	8000ac6 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	0292      	lsls	r2, r2, #10
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2220      	movs	r2, #32
 8000abe:	2105      	movs	r1, #5
 8000ac0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e09e      	b.n	8000c04 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2202      	movs	r2, #2
 8000ace:	4013      	ands	r3, r2
 8000ad0:	d1e5      	bne.n	8000a9e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	7e1b      	ldrb	r3, [r3, #24]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d108      	bne.n	8000aec <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	e007      	b.n	8000afc <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2180      	movs	r1, #128	; 0x80
 8000af8:	438a      	bics	r2, r1
 8000afa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7e5b      	ldrb	r3, [r3, #25]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d108      	bne.n	8000b16 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2140      	movs	r1, #64	; 0x40
 8000b10:	430a      	orrs	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	e007      	b.n	8000b26 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2140      	movs	r1, #64	; 0x40
 8000b22:	438a      	bics	r2, r1
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7e9b      	ldrb	r3, [r3, #26]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d108      	bne.n	8000b40 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2120      	movs	r1, #32
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	e007      	b.n	8000b50 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2120      	movs	r1, #32
 8000b4c:	438a      	bics	r2, r1
 8000b4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7edb      	ldrb	r3, [r3, #27]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d108      	bne.n	8000b6a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2110      	movs	r1, #16
 8000b64:	438a      	bics	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	e007      	b.n	8000b7a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2110      	movs	r1, #16
 8000b76:	430a      	orrs	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7f1b      	ldrb	r3, [r3, #28]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d108      	bne.n	8000b94 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2108      	movs	r1, #8
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	e007      	b.n	8000ba4 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	438a      	bics	r2, r1
 8000ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7f5b      	ldrb	r3, [r3, #29]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d108      	bne.n	8000bbe <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	e007      	b.n	8000bce <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2104      	movs	r1, #4
 8000bca:	438a      	bics	r2, r1
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	691b      	ldr	r3, [r3, #16]
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	431a      	orrs	r2, r3
 8000be4:	0011      	movs	r1, r2
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	1e5a      	subs	r2, r3, #1
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2220      	movs	r2, #32
 8000bfe:	2101      	movs	r1, #1
 8000c00:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b004      	add	sp, #16
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c1c:	2013      	movs	r0, #19
 8000c1e:	183b      	adds	r3, r7, r0
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	2120      	movs	r1, #32
 8000c24:	5c52      	ldrb	r2, [r2, r1]
 8000c26:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c28:	0002      	movs	r2, r0
 8000c2a:	18bb      	adds	r3, r7, r2
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d004      	beq.n	8000c3c <HAL_CAN_ConfigFilter+0x30>
 8000c32:	18bb      	adds	r3, r7, r2
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d000      	beq.n	8000c3c <HAL_CAN_ConfigFilter+0x30>
 8000c3a:	e0cd      	b.n	8000dd8 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	2380      	movs	r3, #128	; 0x80
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	58d3      	ldr	r3, [r2, r3]
 8000c44:	2201      	movs	r2, #1
 8000c46:	431a      	orrs	r2, r3
 8000c48:	0011      	movs	r1, r2
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	221f      	movs	r2, #31
 8000c58:	4013      	ands	r3, r2
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	409a      	lsls	r2, r3
 8000c5e:	0013      	movs	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	2387      	movs	r3, #135	; 0x87
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	58d3      	ldr	r3, [r2, r3]
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	43d2      	mvns	r2, r2
 8000c6e:	401a      	ands	r2, r3
 8000c70:	0011      	movs	r1, r2
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	2387      	movs	r3, #135	; 0x87
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d129      	bne.n	8000cd6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	2383      	movs	r3, #131	; 0x83
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	58d3      	ldr	r3, [r2, r3]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	43d2      	mvns	r2, r2
 8000c8e:	401a      	ands	r2, r3
 8000c90:	0011      	movs	r1, r2
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	2383      	movs	r3, #131	; 0x83
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	041b      	lsls	r3, r3, #16
 8000ca6:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cac:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3248      	adds	r2, #72	; 0x48
 8000cb2:	00d2      	lsls	r2, r2, #3
 8000cb4:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	041b      	lsls	r3, r3, #16
 8000cc2:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cc8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cca:	6979      	ldr	r1, [r7, #20]
 8000ccc:	3348      	adds	r3, #72	; 0x48
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	18cb      	adds	r3, r1, r3
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d128      	bne.n	8000d30 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	2383      	movs	r3, #131	; 0x83
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	58d2      	ldr	r2, [r2, r3]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	0011      	movs	r1, r2
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	2383      	movs	r3, #131	; 0x83
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	041b      	lsls	r3, r3, #16
 8000d00:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d06:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3248      	adds	r2, #72	; 0x48
 8000d0c:	00d2      	lsls	r2, r2, #3
 8000d0e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	041b      	lsls	r3, r3, #16
 8000d1c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d24:	6979      	ldr	r1, [r7, #20]
 8000d26:	3348      	adds	r3, #72	; 0x48
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	18cb      	adds	r3, r1, r3
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10c      	bne.n	8000d52 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	2381      	movs	r3, #129	; 0x81
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	58d3      	ldr	r3, [r2, r3]
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	43d2      	mvns	r2, r2
 8000d44:	401a      	ands	r2, r3
 8000d46:	0011      	movs	r1, r2
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	2381      	movs	r3, #129	; 0x81
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	50d1      	str	r1, [r2, r3]
 8000d50:	e00a      	b.n	8000d68 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	2381      	movs	r3, #129	; 0x81
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	58d2      	ldr	r2, [r2, r3]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	0011      	movs	r1, r2
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	2381      	movs	r3, #129	; 0x81
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10c      	bne.n	8000d8a <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	2385      	movs	r3, #133	; 0x85
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	58d3      	ldr	r3, [r2, r3]
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	43d2      	mvns	r2, r2
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	0011      	movs	r1, r2
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	2385      	movs	r3, #133	; 0x85
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	50d1      	str	r1, [r2, r3]
 8000d88:	e00a      	b.n	8000da0 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	2385      	movs	r3, #133	; 0x85
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	58d2      	ldr	r2, [r2, r3]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	431a      	orrs	r2, r3
 8000d96:	0011      	movs	r1, r2
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	2385      	movs	r3, #133	; 0x85
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	6a1b      	ldr	r3, [r3, #32]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d10a      	bne.n	8000dbe <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	2387      	movs	r3, #135	; 0x87
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	58d2      	ldr	r2, [r2, r3]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	431a      	orrs	r2, r3
 8000db4:	0011      	movs	r1, r2
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	2387      	movs	r3, #135	; 0x87
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	58d3      	ldr	r3, [r2, r3]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4393      	bics	r3, r2
 8000dca:	0019      	movs	r1, r3
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e007      	b.n	8000de8 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	02d2      	lsls	r2, r2, #11
 8000de0:	431a      	orrs	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
  }
}
 8000de8:	0018      	movs	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b006      	add	sp, #24
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	5c9b      	ldrb	r3, [r3, r2]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d12f      	bne.n	8000e64 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2220      	movs	r2, #32
 8000e08:	2102      	movs	r1, #2
 8000e0a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2101      	movs	r1, #1
 8000e18:	438a      	bics	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e1c:	f7ff fdee 	bl	80009fc <HAL_GetTick>
 8000e20:	0003      	movs	r3, r0
 8000e22:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e24:	e013      	b.n	8000e4e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e26:	f7ff fde9 	bl	80009fc <HAL_GetTick>
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b0a      	cmp	r3, #10
 8000e32:	d90c      	bls.n	8000e4e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	0292      	lsls	r2, r2, #10
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2220      	movs	r2, #32
 8000e46:	2105      	movs	r1, #5
 8000e48:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e012      	b.n	8000e74 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2201      	movs	r2, #1
 8000e56:	4013      	ands	r3, r2
 8000e58:	d1e5      	bne.n	8000e26 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	e007      	b.n	8000e74 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	0312      	lsls	r2, r2, #12
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
  }
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b004      	add	sp, #16
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e8a:	201f      	movs	r0, #31
 8000e8c:	183b      	adds	r3, r7, r0
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	2120      	movs	r1, #32
 8000e92:	5c52      	ldrb	r2, [r2, r1]
 8000e94:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e9e:	183b      	adds	r3, r7, r0
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d004      	beq.n	8000eb0 <HAL_CAN_AddTxMessage+0x34>
 8000ea6:	183b      	adds	r3, r7, r0
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d000      	beq.n	8000eb0 <HAL_CAN_AddTxMessage+0x34>
 8000eae:	e0ab      	b.n	8001008 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	04db      	lsls	r3, r3, #19
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d10a      	bne.n	8000ed0 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	051b      	lsls	r3, r3, #20
 8000ec0:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ec2:	d105      	bne.n	8000ed0 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	055b      	lsls	r3, r3, #21
 8000eca:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ecc:	d100      	bne.n	8000ed0 <HAL_CAN_AddTxMessage+0x54>
 8000ece:	e092      	b.n	8000ff6 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	0e1b      	lsrs	r3, r3, #24
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000eda:	2201      	movs	r2, #1
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d10c      	bne.n	8000f06 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4311      	orrs	r1, r2
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	3218      	adds	r2, #24
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	50d1      	str	r1, [r2, r3]
 8000f04:	e00f      	b.n	8000f26 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f10:	431a      	orrs	r2, r3
 8000f12:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000f1c:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	3218      	adds	r2, #24
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6819      	ldr	r1, [r3, #0]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	691a      	ldr	r2, [r3, #16]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3318      	adds	r3, #24
 8000f32:	011b      	lsls	r3, r3, #4
 8000f34:	18cb      	adds	r3, r1, r3
 8000f36:	3304      	adds	r3, #4
 8000f38:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	7d1b      	ldrb	r3, [r3, #20]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d112      	bne.n	8000f68 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3318      	adds	r3, #24
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	18d3      	adds	r3, r2, r3
 8000f4e:	3304      	adds	r3, #4
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6819      	ldr	r1, [r3, #0]
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3318      	adds	r3, #24
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	18cb      	adds	r3, r1, r3
 8000f64:	3304      	adds	r3, #4
 8000f66:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3307      	adds	r3, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	061a      	lsls	r2, r3, #24
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3306      	adds	r3, #6
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	041b      	lsls	r3, r3, #16
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3305      	adds	r3, #5
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3304      	adds	r3, #4
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	430a      	orrs	r2, r1
 8000f92:	6979      	ldr	r1, [r7, #20]
 8000f94:	23c6      	movs	r3, #198	; 0xc6
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	0109      	lsls	r1, r1, #4
 8000f9a:	1841      	adds	r1, r0, r1
 8000f9c:	18cb      	adds	r3, r1, r3
 8000f9e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3303      	adds	r3, #3
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	061a      	lsls	r2, r3, #24
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3302      	adds	r3, #2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	041b      	lsls	r3, r3, #16
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	0019      	movs	r1, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	6979      	ldr	r1, [r7, #20]
 8000fca:	23c4      	movs	r3, #196	; 0xc4
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	0109      	lsls	r1, r1, #4
 8000fd0:	1841      	adds	r1, r0, r1
 8000fd2:	18cb      	adds	r3, r1, r3
 8000fd4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	3218      	adds	r2, #24
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	58d2      	ldr	r2, [r2, r3]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4311      	orrs	r1, r2
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	3218      	adds	r2, #24
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e010      	b.n	8001018 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	0392      	lsls	r2, r2, #14
 8000ffe:	431a      	orrs	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e007      	b.n	8001018 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	02d2      	lsls	r2, r2, #11
 8001010:	431a      	orrs	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
  }
}
 8001018:	0018      	movs	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	b008      	add	sp, #32
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800102e:	200b      	movs	r0, #11
 8001030:	183b      	adds	r3, r7, r0
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	2120      	movs	r1, #32
 8001036:	5c52      	ldrb	r2, [r2, r1]
 8001038:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800103a:	0002      	movs	r2, r0
 800103c:	18bb      	adds	r3, r7, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d003      	beq.n	800104c <HAL_CAN_IsTxMessagePending+0x2c>
 8001044:	18bb      	adds	r3, r7, r2
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d10b      	bne.n	8001064 <HAL_CAN_IsTxMessagePending+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	0692      	lsls	r2, r2, #26
 8001056:	401a      	ands	r2, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	069b      	lsls	r3, r3, #26
 800105c:	429a      	cmp	r2, r3
 800105e:	d001      	beq.n	8001064 <HAL_CAN_IsTxMessagePending+0x44>
    {
      status = 1U;
 8001060:	2301      	movs	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001064:	68fb      	ldr	r3, [r7, #12]
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b004      	add	sp, #16
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800107c:	2017      	movs	r0, #23
 800107e:	183b      	adds	r3, r7, r0
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	2120      	movs	r1, #32
 8001084:	5c52      	ldrb	r2, [r2, r1]
 8001086:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001088:	0002      	movs	r2, r0
 800108a:	18bb      	adds	r3, r7, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d004      	beq.n	800109c <HAL_CAN_GetRxMessage+0x2e>
 8001092:	18bb      	adds	r3, r7, r2
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d000      	beq.n	800109c <HAL_CAN_GetRxMessage+0x2e>
 800109a:	e107      	b.n	80012ac <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10e      	bne.n	80010c0 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	2203      	movs	r2, #3
 80010aa:	4013      	ands	r3, r2
 80010ac:	d117      	bne.n	80010de <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	0392      	lsls	r2, r2, #14
 80010b6:	431a      	orrs	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0fd      	b.n	80012bc <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	2203      	movs	r2, #3
 80010c8:	4013      	ands	r3, r2
 80010ca:	d108      	bne.n	80010de <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	0392      	lsls	r2, r2, #14
 80010d4:	431a      	orrs	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e0ee      	b.n	80012bc <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	321b      	adds	r2, #27
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	58d3      	ldr	r3, [r2, r3]
 80010ea:	2204      	movs	r2, #4
 80010ec:	401a      	ands	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10b      	bne.n	8001112 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	321b      	adds	r2, #27
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	58d3      	ldr	r3, [r2, r3]
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	055b      	lsls	r3, r3, #21
 800110a:	0d5a      	lsrs	r2, r3, #21
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	e00a      	b.n	8001128 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	321b      	adds	r2, #27
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	58d3      	ldr	r3, [r2, r3]
 800111e:	08db      	lsrs	r3, r3, #3
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	321b      	adds	r2, #27
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	58d3      	ldr	r3, [r2, r3]
 8001134:	2202      	movs	r2, #2
 8001136:	401a      	ands	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	331b      	adds	r3, #27
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	18d3      	adds	r3, r2, r3
 8001148:	3304      	adds	r3, #4
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2208      	movs	r2, #8
 800114e:	4013      	ands	r3, r2
 8001150:	d003      	beq.n	800115a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2208      	movs	r2, #8
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	e00b      	b.n	8001172 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	331b      	adds	r3, #27
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	18d3      	adds	r3, r2, r3
 8001166:	3304      	adds	r3, #4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	220f      	movs	r2, #15
 800116c:	401a      	ands	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	331b      	adds	r3, #27
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	18d3      	adds	r3, r2, r3
 800117e:	3304      	adds	r3, #4
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	22ff      	movs	r2, #255	; 0xff
 8001186:	401a      	ands	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	331b      	adds	r3, #27
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	18d3      	adds	r3, r2, r3
 8001198:	3304      	adds	r3, #4
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	0c1b      	lsrs	r3, r3, #16
 800119e:	041b      	lsls	r3, r3, #16
 80011a0:	0c1a      	lsrs	r2, r3, #16
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	23dc      	movs	r3, #220	; 0xdc
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	188a      	adds	r2, r1, r2
 80011b4:	18d3      	adds	r3, r2, r3
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6819      	ldr	r1, [r3, #0]
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	23dc      	movs	r3, #220	; 0xdc
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	188a      	adds	r2, r1, r2
 80011cc:	18d3      	adds	r3, r2, r3
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	0a1a      	lsrs	r2, r3, #8
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6819      	ldr	r1, [r3, #0]
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	23dc      	movs	r3, #220	; 0xdc
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	188a      	adds	r2, r1, r2
 80011e8:	18d3      	adds	r3, r2, r3
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	0c1a      	lsrs	r2, r3, #16
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	3302      	adds	r3, #2
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6819      	ldr	r1, [r3, #0]
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	23dc      	movs	r3, #220	; 0xdc
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	188a      	adds	r2, r1, r2
 8001204:	18d3      	adds	r3, r2, r3
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	0e1a      	lsrs	r2, r3, #24
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	3303      	adds	r3, #3
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6819      	ldr	r1, [r3, #0]
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	23de      	movs	r3, #222	; 0xde
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	188a      	adds	r2, r1, r2
 8001220:	18d3      	adds	r3, r2, r3
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	3304      	adds	r3, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6819      	ldr	r1, [r3, #0]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	23de      	movs	r3, #222	; 0xde
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	188a      	adds	r2, r1, r2
 800123a:	18d3      	adds	r3, r2, r3
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	0a1a      	lsrs	r2, r3, #8
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	3305      	adds	r3, #5
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6819      	ldr	r1, [r3, #0]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	23de      	movs	r3, #222	; 0xde
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	188a      	adds	r2, r1, r2
 8001256:	18d3      	adds	r3, r2, r3
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	0c1a      	lsrs	r2, r3, #16
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	3306      	adds	r3, #6
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6819      	ldr	r1, [r3, #0]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	23de      	movs	r3, #222	; 0xde
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	188a      	adds	r2, r1, r2
 8001272:	18d3      	adds	r3, r2, r3
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	0e1a      	lsrs	r2, r3, #24
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	3307      	adds	r3, #7
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d108      	bne.n	8001298 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2120      	movs	r1, #32
 8001292:	430a      	orrs	r2, r1
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	e007      	b.n	80012a8 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2120      	movs	r1, #32
 80012a4:	430a      	orrs	r2, r1
 80012a6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	e007      	b.n	80012bc <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	02d2      	lsls	r2, r2, #11
 80012b4:	431a      	orrs	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
  }
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b006      	add	sp, #24
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012ce:	200f      	movs	r0, #15
 80012d0:	183b      	adds	r3, r7, r0
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	2120      	movs	r1, #32
 80012d6:	5c52      	ldrb	r2, [r2, r1]
 80012d8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012da:	0002      	movs	r2, r0
 80012dc:	18bb      	adds	r3, r7, r2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d003      	beq.n	80012ec <HAL_CAN_ActivateNotification+0x28>
 80012e4:	18bb      	adds	r3, r7, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d109      	bne.n	8001300 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6959      	ldr	r1, [r3, #20]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e007      	b.n	8001310 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	02d2      	lsls	r2, r2, #11
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
  }
}
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	b004      	add	sp, #16
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	2201      	movs	r2, #1
 8001358:	4013      	ands	r3, r2
 800135a:	d100      	bne.n	800135e <HAL_CAN_IRQHandler+0x46>
 800135c:	e084      	b.n	8001468 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2201      	movs	r2, #1
 8001362:	4013      	ands	r3, r2
 8001364:	d024      	beq.n	80013b0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2201      	movs	r2, #1
 800136c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	2202      	movs	r2, #2
 8001372:	4013      	ands	r3, r2
 8001374:	d004      	beq.n	8001380 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0018      	movs	r0, r3
 800137a:	f000 f981 	bl	8001680 <HAL_CAN_TxMailbox0CompleteCallback>
 800137e:	e017      	b.n	80013b0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2204      	movs	r2, #4
 8001384:	4013      	ands	r3, r2
 8001386:	d005      	beq.n	8001394 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	0112      	lsls	r2, r2, #4
 800138e:	4313      	orrs	r3, r2
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
 8001392:	e00d      	b.n	80013b0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	2208      	movs	r2, #8
 8001398:	4013      	ands	r3, r2
 800139a:	d005      	beq.n	80013a8 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	0152      	lsls	r2, r2, #5
 80013a2:	4313      	orrs	r3, r2
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
 80013a6:	e003      	b.n	80013b0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	0018      	movs	r0, r3
 80013ac:	f000 f980 	bl	80016b0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4013      	ands	r3, r2
 80013b8:	d028      	beq.n	800140c <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2280      	movs	r2, #128	; 0x80
 80013c0:	0052      	lsls	r2, r2, #1
 80013c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4013      	ands	r3, r2
 80013cc:	d004      	beq.n	80013d8 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	0018      	movs	r0, r3
 80013d2:	f000 f95d 	bl	8001690 <HAL_CAN_TxMailbox1CompleteCallback>
 80013d6:	e019      	b.n	800140c <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4013      	ands	r3, r2
 80013e0:	d005      	beq.n	80013ee <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	0192      	lsls	r2, r2, #6
 80013e8:	4313      	orrs	r3, r2
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
 80013ec:	e00e      	b.n	800140c <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4013      	ands	r3, r2
 80013f6:	d005      	beq.n	8001404 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	01d2      	lsls	r2, r2, #7
 80013fe:	4313      	orrs	r3, r2
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
 8001402:	e003      	b.n	800140c <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	0018      	movs	r0, r3
 8001408:	f000 f95a 	bl	80016c0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	025b      	lsls	r3, r3, #9
 8001412:	4013      	ands	r3, r2
 8001414:	d028      	beq.n	8001468 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	0252      	lsls	r2, r2, #9
 800141e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	029b      	lsls	r3, r3, #10
 8001426:	4013      	ands	r3, r2
 8001428:	d004      	beq.n	8001434 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	0018      	movs	r0, r3
 800142e:	f000 f937 	bl	80016a0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001432:	e019      	b.n	8001468 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	02db      	lsls	r3, r3, #11
 800143a:	4013      	ands	r3, r2
 800143c:	d005      	beq.n	800144a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	2280      	movs	r2, #128	; 0x80
 8001442:	0212      	lsls	r2, r2, #8
 8001444:	4313      	orrs	r3, r2
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
 8001448:	e00e      	b.n	8001468 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	031b      	lsls	r3, r3, #12
 8001450:	4013      	ands	r3, r2
 8001452:	d005      	beq.n	8001460 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	0252      	lsls	r2, r2, #9
 800145a:	4313      	orrs	r3, r2
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
 800145e:	e003      	b.n	8001468 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	0018      	movs	r0, r3
 8001464:	f000 f934 	bl	80016d0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	2208      	movs	r2, #8
 800146c:	4013      	ands	r3, r2
 800146e:	d00c      	beq.n	800148a <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2210      	movs	r2, #16
 8001474:	4013      	ands	r3, r2
 8001476:	d008      	beq.n	800148a <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	4313      	orrs	r3, r2
 8001480:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2210      	movs	r2, #16
 8001488:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	2204      	movs	r2, #4
 800148e:	4013      	ands	r3, r2
 8001490:	d00b      	beq.n	80014aa <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	2208      	movs	r2, #8
 8001496:	4013      	ands	r3, r2
 8001498:	d007      	beq.n	80014aa <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2208      	movs	r2, #8
 80014a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f000 f91b 	bl	80016e0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	2202      	movs	r2, #2
 80014ae:	4013      	ands	r3, r2
 80014b0:	d009      	beq.n	80014c6 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2203      	movs	r2, #3
 80014ba:	4013      	ands	r3, r2
 80014bc:	d003      	beq.n	80014c6 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7fe ff1f 	bl	8000304 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	2240      	movs	r2, #64	; 0x40
 80014ca:	4013      	ands	r3, r2
 80014cc:	d00c      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	2210      	movs	r2, #16
 80014d2:	4013      	ands	r3, r2
 80014d4:	d008      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	2280      	movs	r2, #128	; 0x80
 80014da:	00d2      	lsls	r2, r2, #3
 80014dc:	4313      	orrs	r3, r2
 80014de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2210      	movs	r2, #16
 80014e6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	2220      	movs	r2, #32
 80014ec:	4013      	ands	r3, r2
 80014ee:	d00b      	beq.n	8001508 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	2208      	movs	r2, #8
 80014f4:	4013      	ands	r3, r2
 80014f6:	d007      	beq.n	8001508 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2208      	movs	r2, #8
 80014fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	0018      	movs	r0, r3
 8001504:	f000 f8fc 	bl	8001700 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	2210      	movs	r2, #16
 800150c:	4013      	ands	r3, r2
 800150e:	d009      	beq.n	8001524 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2203      	movs	r2, #3
 8001518:	4013      	ands	r3, r2
 800151a:	d003      	beq.n	8001524 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	0018      	movs	r0, r3
 8001520:	f000 f8e6 	bl	80016f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001524:	6a3a      	ldr	r2, [r7, #32]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	029b      	lsls	r3, r3, #10
 800152a:	4013      	ands	r3, r2
 800152c:	d00b      	beq.n	8001546 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	2210      	movs	r2, #16
 8001532:	4013      	ands	r3, r2
 8001534:	d007      	beq.n	8001546 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2210      	movs	r2, #16
 800153c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	0018      	movs	r0, r3
 8001542:	f000 f8e5 	bl	8001710 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001546:	6a3a      	ldr	r2, [r7, #32]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	025b      	lsls	r3, r3, #9
 800154c:	4013      	ands	r3, r2
 800154e:	d00b      	beq.n	8001568 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	2208      	movs	r2, #8
 8001554:	4013      	ands	r3, r2
 8001556:	d007      	beq.n	8001568 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2208      	movs	r2, #8
 800155e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	0018      	movs	r0, r3
 8001564:	f000 f8dc 	bl	8001720 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001568:	6a3a      	ldr	r2, [r7, #32]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	4013      	ands	r3, r2
 8001570:	d100      	bne.n	8001574 <HAL_CAN_IRQHandler+0x25c>
 8001572:	e074      	b.n	800165e <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	2204      	movs	r2, #4
 8001578:	4013      	ands	r3, r2
 800157a:	d100      	bne.n	800157e <HAL_CAN_IRQHandler+0x266>
 800157c:	e06b      	b.n	8001656 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800157e:	6a3a      	ldr	r2, [r7, #32]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4013      	ands	r3, r2
 8001586:	d007      	beq.n	8001598 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2201      	movs	r2, #1
 800158c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800158e:	d003      	beq.n	8001598 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	2201      	movs	r2, #1
 8001594:	4313      	orrs	r3, r2
 8001596:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001598:	6a3a      	ldr	r2, [r7, #32]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	d007      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2202      	movs	r2, #2
 80015a6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015a8:	d003      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	2202      	movs	r2, #2
 80015ae:	4313      	orrs	r3, r2
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015b2:	6a3a      	ldr	r2, [r7, #32]
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4013      	ands	r3, r2
 80015ba:	d007      	beq.n	80015cc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2204      	movs	r2, #4
 80015c0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015c2:	d003      	beq.n	80015cc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	2204      	movs	r2, #4
 80015c8:	4313      	orrs	r3, r2
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015cc:	6a3a      	ldr	r2, [r7, #32]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	4013      	ands	r3, r2
 80015d4:	d03f      	beq.n	8001656 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2270      	movs	r2, #112	; 0x70
 80015da:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015dc:	d03b      	beq.n	8001656 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2270      	movs	r2, #112	; 0x70
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b60      	cmp	r3, #96	; 0x60
 80015e6:	d027      	beq.n	8001638 <HAL_CAN_IRQHandler+0x320>
 80015e8:	d82c      	bhi.n	8001644 <HAL_CAN_IRQHandler+0x32c>
 80015ea:	2b50      	cmp	r3, #80	; 0x50
 80015ec:	d01f      	beq.n	800162e <HAL_CAN_IRQHandler+0x316>
 80015ee:	d829      	bhi.n	8001644 <HAL_CAN_IRQHandler+0x32c>
 80015f0:	2b40      	cmp	r3, #64	; 0x40
 80015f2:	d017      	beq.n	8001624 <HAL_CAN_IRQHandler+0x30c>
 80015f4:	d826      	bhi.n	8001644 <HAL_CAN_IRQHandler+0x32c>
 80015f6:	2b30      	cmp	r3, #48	; 0x30
 80015f8:	d00f      	beq.n	800161a <HAL_CAN_IRQHandler+0x302>
 80015fa:	d823      	bhi.n	8001644 <HAL_CAN_IRQHandler+0x32c>
 80015fc:	2b10      	cmp	r3, #16
 80015fe:	d002      	beq.n	8001606 <HAL_CAN_IRQHandler+0x2ee>
 8001600:	2b20      	cmp	r3, #32
 8001602:	d005      	beq.n	8001610 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001604:	e01e      	b.n	8001644 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	2208      	movs	r2, #8
 800160a:	4313      	orrs	r3, r2
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800160e:	e01a      	b.n	8001646 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	2210      	movs	r2, #16
 8001614:	4313      	orrs	r3, r2
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001618:	e015      	b.n	8001646 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	2220      	movs	r2, #32
 800161e:	4313      	orrs	r3, r2
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001622:	e010      	b.n	8001646 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	2240      	movs	r2, #64	; 0x40
 8001628:	4313      	orrs	r3, r2
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800162c:	e00b      	b.n	8001646 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	4313      	orrs	r3, r2
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001636:	e006      	b.n	8001646 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	0052      	lsls	r2, r2, #1
 800163e:	4313      	orrs	r3, r2
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001642:	e000      	b.n	8001646 <HAL_CAN_IRQHandler+0x32e>
            break;
 8001644:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	699a      	ldr	r2, [r3, #24]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2170      	movs	r1, #112	; 0x70
 8001652:	438a      	bics	r2, r1
 8001654:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2204      	movs	r2, #4
 800165c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	2b00      	cmp	r3, #0
 8001662:	d009      	beq.n	8001678 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	0018      	movs	r0, r3
 8001674:	f000 f85c 	bl	8001730 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b00a      	add	sp, #40	; 0x28
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	b002      	add	sp, #8
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b002      	add	sp, #8
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b002      	add	sp, #8
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b002      	add	sp, #8
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b002      	add	sp, #8
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016e8:	46c0      	nop			; (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b002      	add	sp, #8
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80016f8:	46c0      	nop			; (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b002      	add	sp, #8
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	b002      	add	sp, #8
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001718:	46c0      	nop			; (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	b002      	add	sp, #8
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b002      	add	sp, #8
 800173e:	bd80      	pop	{r7, pc}

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	0002      	movs	r2, r0
 8001748:	1dfb      	adds	r3, r7, #7
 800174a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800174c:	1dfb      	adds	r3, r7, #7
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b7f      	cmp	r3, #127	; 0x7f
 8001752:	d809      	bhi.n	8001768 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001754:	1dfb      	adds	r3, r7, #7
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	001a      	movs	r2, r3
 800175a:	231f      	movs	r3, #31
 800175c:	401a      	ands	r2, r3
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <__NVIC_EnableIRQ+0x30>)
 8001760:	2101      	movs	r1, #1
 8001762:	4091      	lsls	r1, r2
 8001764:	000a      	movs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]
  }
}
 8001768:	46c0      	nop			; (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b002      	add	sp, #8
 800176e:	bd80      	pop	{r7, pc}
 8001770:	e000e100 	.word	0xe000e100

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	0002      	movs	r2, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001782:	1dfb      	adds	r3, r7, #7
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b7f      	cmp	r3, #127	; 0x7f
 8001788:	d828      	bhi.n	80017dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800178a:	4a2f      	ldr	r2, [pc, #188]	; (8001848 <__NVIC_SetPriority+0xd4>)
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b25b      	sxtb	r3, r3
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	33c0      	adds	r3, #192	; 0xc0
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	589b      	ldr	r3, [r3, r2]
 800179a:	1dfa      	adds	r2, r7, #7
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	0011      	movs	r1, r2
 80017a0:	2203      	movs	r2, #3
 80017a2:	400a      	ands	r2, r1
 80017a4:	00d2      	lsls	r2, r2, #3
 80017a6:	21ff      	movs	r1, #255	; 0xff
 80017a8:	4091      	lsls	r1, r2
 80017aa:	000a      	movs	r2, r1
 80017ac:	43d2      	mvns	r2, r2
 80017ae:	401a      	ands	r2, r3
 80017b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	019b      	lsls	r3, r3, #6
 80017b6:	22ff      	movs	r2, #255	; 0xff
 80017b8:	401a      	ands	r2, r3
 80017ba:	1dfb      	adds	r3, r7, #7
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	0018      	movs	r0, r3
 80017c0:	2303      	movs	r3, #3
 80017c2:	4003      	ands	r3, r0
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017c8:	481f      	ldr	r0, [pc, #124]	; (8001848 <__NVIC_SetPriority+0xd4>)
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	430a      	orrs	r2, r1
 80017d4:	33c0      	adds	r3, #192	; 0xc0
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017da:	e031      	b.n	8001840 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017dc:	4a1b      	ldr	r2, [pc, #108]	; (800184c <__NVIC_SetPriority+0xd8>)
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	0019      	movs	r1, r3
 80017e4:	230f      	movs	r3, #15
 80017e6:	400b      	ands	r3, r1
 80017e8:	3b08      	subs	r3, #8
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	3306      	adds	r3, #6
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	18d3      	adds	r3, r2, r3
 80017f2:	3304      	adds	r3, #4
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	1dfa      	adds	r2, r7, #7
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	0011      	movs	r1, r2
 80017fc:	2203      	movs	r2, #3
 80017fe:	400a      	ands	r2, r1
 8001800:	00d2      	lsls	r2, r2, #3
 8001802:	21ff      	movs	r1, #255	; 0xff
 8001804:	4091      	lsls	r1, r2
 8001806:	000a      	movs	r2, r1
 8001808:	43d2      	mvns	r2, r2
 800180a:	401a      	ands	r2, r3
 800180c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	22ff      	movs	r2, #255	; 0xff
 8001814:	401a      	ands	r2, r3
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	0018      	movs	r0, r3
 800181c:	2303      	movs	r3, #3
 800181e:	4003      	ands	r3, r0
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001824:	4809      	ldr	r0, [pc, #36]	; (800184c <__NVIC_SetPriority+0xd8>)
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	001c      	movs	r4, r3
 800182c:	230f      	movs	r3, #15
 800182e:	4023      	ands	r3, r4
 8001830:	3b08      	subs	r3, #8
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	430a      	orrs	r2, r1
 8001836:	3306      	adds	r3, #6
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	18c3      	adds	r3, r0, r3
 800183c:	3304      	adds	r3, #4
 800183e:	601a      	str	r2, [r3, #0]
}
 8001840:	46c0      	nop			; (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	b003      	add	sp, #12
 8001846:	bd90      	pop	{r4, r7, pc}
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	1e5a      	subs	r2, r3, #1
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	045b      	lsls	r3, r3, #17
 8001860:	429a      	cmp	r2, r3
 8001862:	d301      	bcc.n	8001868 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001864:	2301      	movs	r3, #1
 8001866:	e010      	b.n	800188a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001868:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <SysTick_Config+0x44>)
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	3a01      	subs	r2, #1
 800186e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001870:	2301      	movs	r3, #1
 8001872:	425b      	negs	r3, r3
 8001874:	2103      	movs	r1, #3
 8001876:	0018      	movs	r0, r3
 8001878:	f7ff ff7c 	bl	8001774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <SysTick_Config+0x44>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <SysTick_Config+0x44>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001888:	2300      	movs	r3, #0
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	e000e010 	.word	0xe000e010

08001898 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	210f      	movs	r1, #15
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	1c02      	adds	r2, r0, #0
 80018a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b25b      	sxtb	r3, r3
 80018b2:	0011      	movs	r1, r2
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff ff5d 	bl	8001774 <__NVIC_SetPriority>
}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	b004      	add	sp, #16
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	0002      	movs	r2, r0
 80018ca:	1dfb      	adds	r3, r7, #7
 80018cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ce:	1dfb      	adds	r3, r7, #7
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff ff33 	bl	8001740 <__NVIC_EnableIRQ>
}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	b002      	add	sp, #8
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff ffaf 	bl	8001850 <SysTick_Config>
 80018f2:	0003      	movs	r3, r0
}
 80018f4:	0018      	movs	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b002      	add	sp, #8
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190a:	e155      	b.n	8001bb8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2101      	movs	r1, #1
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4091      	lsls	r1, r2
 8001916:	000a      	movs	r2, r1
 8001918:	4013      	ands	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d100      	bne.n	8001924 <HAL_GPIO_Init+0x28>
 8001922:	e146      	b.n	8001bb2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2203      	movs	r2, #3
 800192a:	4013      	ands	r3, r2
 800192c:	2b01      	cmp	r3, #1
 800192e:	d005      	beq.n	800193c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2203      	movs	r2, #3
 8001936:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001938:	2b02      	cmp	r3, #2
 800193a:	d130      	bne.n	800199e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	409a      	lsls	r2, r3
 800194a:	0013      	movs	r3, r2
 800194c:	43da      	mvns	r2, r3
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	409a      	lsls	r2, r3
 800195e:	0013      	movs	r3, r2
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001972:	2201      	movs	r2, #1
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
 8001978:	0013      	movs	r3, r2
 800197a:	43da      	mvns	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	2201      	movs	r2, #1
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
 8001990:	0013      	movs	r3, r2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2203      	movs	r2, #3
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d017      	beq.n	80019da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	409a      	lsls	r2, r3
 80019b8:	0013      	movs	r3, r2
 80019ba:	43da      	mvns	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	409a      	lsls	r2, r3
 80019cc:	0013      	movs	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2203      	movs	r2, #3
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d123      	bne.n	8001a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	58d3      	ldr	r3, [r2, r3]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2207      	movs	r2, #7
 80019f8:	4013      	ands	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	409a      	lsls	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	43da      	mvns	r2, r3
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2107      	movs	r1, #7
 8001a12:	400b      	ands	r3, r1
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	409a      	lsls	r2, r3
 8001a18:	0013      	movs	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	6939      	ldr	r1, [r7, #16]
 8001a2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	409a      	lsls	r2, r3
 8001a54:	0013      	movs	r3, r2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	23c0      	movs	r3, #192	; 0xc0
 8001a68:	029b      	lsls	r3, r3, #10
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d100      	bne.n	8001a70 <HAL_GPIO_Init+0x174>
 8001a6e:	e0a0      	b.n	8001bb2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a70:	4b57      	ldr	r3, [pc, #348]	; (8001bd0 <HAL_GPIO_Init+0x2d4>)
 8001a72:	699a      	ldr	r2, [r3, #24]
 8001a74:	4b56      	ldr	r3, [pc, #344]	; (8001bd0 <HAL_GPIO_Init+0x2d4>)
 8001a76:	2101      	movs	r1, #1
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	619a      	str	r2, [r3, #24]
 8001a7c:	4b54      	ldr	r3, [pc, #336]	; (8001bd0 <HAL_GPIO_Init+0x2d4>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2201      	movs	r2, #1
 8001a82:	4013      	ands	r3, r2
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a88:	4a52      	ldr	r2, [pc, #328]	; (8001bd4 <HAL_GPIO_Init+0x2d8>)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	589b      	ldr	r3, [r3, r2]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	0013      	movs	r3, r2
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	2390      	movs	r3, #144	; 0x90
 8001ab0:	05db      	lsls	r3, r3, #23
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d019      	beq.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a47      	ldr	r2, [pc, #284]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d013      	beq.n	8001ae6 <HAL_GPIO_Init+0x1ea>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a46      	ldr	r2, [pc, #280]	; (8001bdc <HAL_GPIO_Init+0x2e0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00d      	beq.n	8001ae2 <HAL_GPIO_Init+0x1e6>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a45      	ldr	r2, [pc, #276]	; (8001be0 <HAL_GPIO_Init+0x2e4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d007      	beq.n	8001ade <HAL_GPIO_Init+0x1e2>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a44      	ldr	r2, [pc, #272]	; (8001be4 <HAL_GPIO_Init+0x2e8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_GPIO_Init+0x1de>
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	e008      	b.n	8001aec <HAL_GPIO_Init+0x1f0>
 8001ada:	2305      	movs	r3, #5
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x1f0>
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e004      	b.n	8001aec <HAL_GPIO_Init+0x1f0>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e002      	b.n	8001aec <HAL_GPIO_Init+0x1f0>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x1f0>
 8001aea:	2300      	movs	r3, #0
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	2103      	movs	r1, #3
 8001af0:	400a      	ands	r2, r1
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	4093      	lsls	r3, r2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001afc:	4935      	ldr	r1, [pc, #212]	; (8001bd4 <HAL_GPIO_Init+0x2d8>)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0a:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	43da      	mvns	r2, r3
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	035b      	lsls	r3, r3, #13
 8001b22:	4013      	ands	r3, r2
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b34:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	039b      	lsls	r3, r3, #14
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001b5e:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43da      	mvns	r2, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	029b      	lsls	r3, r3, #10
 8001b76:	4013      	ands	r3, r2
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b82:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	43da      	mvns	r2, r3
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	025b      	lsls	r3, r3, #9
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	40da      	lsrs	r2, r3
 8001bc0:	1e13      	subs	r3, r2, #0
 8001bc2:	d000      	beq.n	8001bc6 <HAL_GPIO_Init+0x2ca>
 8001bc4:	e6a2      	b.n	800190c <HAL_GPIO_Init+0x10>
  } 
}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b006      	add	sp, #24
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010000 	.word	0x40010000
 8001bd8:	48000400 	.word	0x48000400
 8001bdc:	48000800 	.word	0x48000800
 8001be0:	48000c00 	.word	0x48000c00
 8001be4:	48001000 	.word	0x48001000
 8001be8:	40010400 	.word	0x40010400

08001bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	0008      	movs	r0, r1
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	1cbb      	adds	r3, r7, #2
 8001bfa:	1c02      	adds	r2, r0, #0
 8001bfc:	801a      	strh	r2, [r3, #0]
 8001bfe:	1c7b      	adds	r3, r7, #1
 8001c00:	1c0a      	adds	r2, r1, #0
 8001c02:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c04:	1c7b      	adds	r3, r7, #1
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d004      	beq.n	8001c16 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c0c:	1cbb      	adds	r3, r7, #2
 8001c0e:	881a      	ldrh	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c14:	e003      	b.n	8001c1e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c16:	1cbb      	adds	r3, r7, #2
 8001c18:	881a      	ldrh	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b002      	add	sp, #8
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	000a      	movs	r2, r1
 8001c30:	1cbb      	adds	r3, r7, #2
 8001c32:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c3a:	1cbb      	adds	r3, r7, #2
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4013      	ands	r3, r2
 8001c42:	041a      	lsls	r2, r3, #16
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	1cb9      	adds	r1, r7, #2
 8001c4a:	8809      	ldrh	r1, [r1, #0]
 8001c4c:	400b      	ands	r3, r1
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	619a      	str	r2, [r3, #24]
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b004      	add	sp, #16
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	0002      	movs	r2, r0
 8001c64:	1dbb      	adds	r3, r7, #6
 8001c66:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	1dba      	adds	r2, r7, #6
 8001c6e:	8812      	ldrh	r2, [r2, #0]
 8001c70:	4013      	ands	r3, r2
 8001c72:	d008      	beq.n	8001c86 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001c76:	1dba      	adds	r2, r7, #6
 8001c78:	8812      	ldrh	r2, [r2, #0]
 8001c7a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c7c:	1dbb      	adds	r3, r7, #6
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7fe fd27 	bl	80006d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b002      	add	sp, #8
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	40010400 	.word	0x40010400

08001c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d102      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f000 fb76 	bl	8002394 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2201      	movs	r2, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d100      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x20>
 8001cb2:	e08e      	b.n	8001dd2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cb4:	4bc5      	ldr	r3, [pc, #788]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	220c      	movs	r2, #12
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d00e      	beq.n	8001cde <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cc0:	4bc2      	ldr	r3, [pc, #776]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	220c      	movs	r2, #12
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d117      	bne.n	8001cfc <HAL_RCC_OscConfig+0x68>
 8001ccc:	4bbf      	ldr	r3, [pc, #764]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	23c0      	movs	r3, #192	; 0xc0
 8001cd2:	025b      	lsls	r3, r3, #9
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	025b      	lsls	r3, r3, #9
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d10e      	bne.n	8001cfc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cde:	4bbb      	ldr	r3, [pc, #748]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	029b      	lsls	r3, r3, #10
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d100      	bne.n	8001cec <HAL_RCC_OscConfig+0x58>
 8001cea:	e071      	b.n	8001dd0 <HAL_RCC_OscConfig+0x13c>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d000      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x62>
 8001cf4:	e06c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f000 fb4c 	bl	8002394 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_OscConfig+0x80>
 8001d04:	4bb1      	ldr	r3, [pc, #708]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4bb0      	ldr	r3, [pc, #704]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	0249      	lsls	r1, r1, #9
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e02f      	b.n	8001d74 <HAL_RCC_OscConfig+0xe0>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10c      	bne.n	8001d36 <HAL_RCC_OscConfig+0xa2>
 8001d1c:	4bab      	ldr	r3, [pc, #684]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4baa      	ldr	r3, [pc, #680]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001d22:	49ab      	ldr	r1, [pc, #684]	; (8001fd0 <HAL_RCC_OscConfig+0x33c>)
 8001d24:	400a      	ands	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	4ba8      	ldr	r3, [pc, #672]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4ba7      	ldr	r3, [pc, #668]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001d2e:	49a9      	ldr	r1, [pc, #676]	; (8001fd4 <HAL_RCC_OscConfig+0x340>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	e01e      	b.n	8001d74 <HAL_RCC_OscConfig+0xe0>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b05      	cmp	r3, #5
 8001d3c:	d10e      	bne.n	8001d5c <HAL_RCC_OscConfig+0xc8>
 8001d3e:	4ba3      	ldr	r3, [pc, #652]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4ba2      	ldr	r3, [pc, #648]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001d44:	2180      	movs	r1, #128	; 0x80
 8001d46:	02c9      	lsls	r1, r1, #11
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	4b9f      	ldr	r3, [pc, #636]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b9e      	ldr	r3, [pc, #632]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001d52:	2180      	movs	r1, #128	; 0x80
 8001d54:	0249      	lsls	r1, r1, #9
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_OscConfig+0xe0>
 8001d5c:	4b9b      	ldr	r3, [pc, #620]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b9a      	ldr	r3, [pc, #616]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001d62:	499b      	ldr	r1, [pc, #620]	; (8001fd0 <HAL_RCC_OscConfig+0x33c>)
 8001d64:	400a      	ands	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	4b98      	ldr	r3, [pc, #608]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b97      	ldr	r3, [pc, #604]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001d6e:	4999      	ldr	r1, [pc, #612]	; (8001fd4 <HAL_RCC_OscConfig+0x340>)
 8001d70:	400a      	ands	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d014      	beq.n	8001da6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7fe fe3e 	bl	80009fc <HAL_GetTick>
 8001d80:	0003      	movs	r3, r0
 8001d82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d86:	f7fe fe39 	bl	80009fc <HAL_GetTick>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b64      	cmp	r3, #100	; 0x64
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e2fd      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d98:	4b8c      	ldr	r3, [pc, #560]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	029b      	lsls	r3, r3, #10
 8001da0:	4013      	ands	r3, r2
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0xf2>
 8001da4:	e015      	b.n	8001dd2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7fe fe29 	bl	80009fc <HAL_GetTick>
 8001daa:	0003      	movs	r3, r0
 8001dac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db0:	f7fe fe24 	bl	80009fc <HAL_GetTick>
 8001db4:	0002      	movs	r2, r0
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e2e8      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc2:	4b82      	ldr	r3, [pc, #520]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	029b      	lsls	r3, r3, #10
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x11c>
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d100      	bne.n	8001dde <HAL_RCC_OscConfig+0x14a>
 8001ddc:	e06c      	b.n	8001eb8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dde:	4b7b      	ldr	r3, [pc, #492]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	220c      	movs	r2, #12
 8001de4:	4013      	ands	r3, r2
 8001de6:	d00e      	beq.n	8001e06 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001de8:	4b78      	ldr	r3, [pc, #480]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	220c      	movs	r2, #12
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d11f      	bne.n	8001e34 <HAL_RCC_OscConfig+0x1a0>
 8001df4:	4b75      	ldr	r3, [pc, #468]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	23c0      	movs	r3, #192	; 0xc0
 8001dfa:	025b      	lsls	r3, r3, #9
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d116      	bne.n	8001e34 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e06:	4b71      	ldr	r3, [pc, #452]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_OscConfig+0x188>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e2bb      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1c:	4b6b      	ldr	r3, [pc, #428]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	22f8      	movs	r2, #248	; 0xf8
 8001e22:	4393      	bics	r3, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00da      	lsls	r2, r3, #3
 8001e2c:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	e041      	b.n	8001eb8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d024      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	4b63      	ldr	r3, [pc, #396]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b62      	ldr	r3, [pc, #392]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001e42:	2101      	movs	r1, #1
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7fe fdd8 	bl	80009fc <HAL_GetTick>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e52:	f7fe fdd3 	bl	80009fc <HAL_GetTick>
 8001e56:	0002      	movs	r2, r0
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e297      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e64:	4b59      	ldr	r3, [pc, #356]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d0f1      	beq.n	8001e52 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b57      	ldr	r3, [pc, #348]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	22f8      	movs	r2, #248	; 0xf8
 8001e74:	4393      	bics	r3, r2
 8001e76:	0019      	movs	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	00da      	lsls	r2, r3, #3
 8001e7e:	4b53      	ldr	r3, [pc, #332]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001e80:	430a      	orrs	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e018      	b.n	8001eb8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e86:	4b51      	ldr	r3, [pc, #324]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b50      	ldr	r3, [pc, #320]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	438a      	bics	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7fe fdb3 	bl	80009fc <HAL_GetTick>
 8001e96:	0003      	movs	r3, r0
 8001e98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7fe fdae 	bl	80009fc <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e272      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d1f1      	bne.n	8001e9c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d036      	beq.n	8001f30 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d019      	beq.n	8001efe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eca:	4b40      	ldr	r3, [pc, #256]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ece:	4b3f      	ldr	r3, [pc, #252]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed6:	f7fe fd91 	bl	80009fc <HAL_GetTick>
 8001eda:	0003      	movs	r3, r0
 8001edc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7fe fd8c 	bl	80009fc <HAL_GetTick>
 8001ee4:	0002      	movs	r2, r0
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e250      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	4b36      	ldr	r3, [pc, #216]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d0f1      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x24c>
 8001efc:	e018      	b.n	8001f30 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efe:	4b33      	ldr	r3, [pc, #204]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f02:	4b32      	ldr	r3, [pc, #200]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001f04:	2101      	movs	r1, #1
 8001f06:	438a      	bics	r2, r1
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0a:	f7fe fd77 	bl	80009fc <HAL_GetTick>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f14:	f7fe fd72 	bl	80009fc <HAL_GetTick>
 8001f18:	0002      	movs	r2, r0
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e236      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f26:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d1f1      	bne.n	8001f14 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2204      	movs	r2, #4
 8001f36:	4013      	ands	r3, r2
 8001f38:	d100      	bne.n	8001f3c <HAL_RCC_OscConfig+0x2a8>
 8001f3a:	e0b5      	b.n	80020a8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3c:	201f      	movs	r0, #31
 8001f3e:	183b      	adds	r3, r7, r0
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f44:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	055b      	lsls	r3, r3, #21
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d110      	bne.n	8001f72 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f50:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001f52:	69da      	ldr	r2, [r3, #28]
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	0549      	lsls	r1, r1, #21
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	61da      	str	r2, [r3, #28]
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	055b      	lsls	r3, r3, #21
 8001f66:	4013      	ands	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f6c:	183b      	adds	r3, r7, r0
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_RCC_OscConfig+0x344>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d11a      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7e:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <HAL_RCC_OscConfig+0x344>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_RCC_OscConfig+0x344>)
 8001f84:	2180      	movs	r1, #128	; 0x80
 8001f86:	0049      	lsls	r1, r1, #1
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f8c:	f7fe fd36 	bl	80009fc <HAL_GetTick>
 8001f90:	0003      	movs	r3, r0
 8001f92:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f96:	f7fe fd31 	bl	80009fc <HAL_GetTick>
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b64      	cmp	r3, #100	; 0x64
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e1f5      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_OscConfig+0x344>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d10f      	bne.n	8001fdc <HAL_RCC_OscConfig+0x348>
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001fbe:	6a1a      	ldr	r2, [r3, #32]
 8001fc0:	4b02      	ldr	r3, [pc, #8]	; (8001fcc <HAL_RCC_OscConfig+0x338>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	621a      	str	r2, [r3, #32]
 8001fc8:	e036      	b.n	8002038 <HAL_RCC_OscConfig+0x3a4>
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	fffeffff 	.word	0xfffeffff
 8001fd4:	fffbffff 	.word	0xfffbffff
 8001fd8:	40007000 	.word	0x40007000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10c      	bne.n	8001ffe <HAL_RCC_OscConfig+0x36a>
 8001fe4:	4bca      	ldr	r3, [pc, #808]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8001fe6:	6a1a      	ldr	r2, [r3, #32]
 8001fe8:	4bc9      	ldr	r3, [pc, #804]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8001fea:	2101      	movs	r1, #1
 8001fec:	438a      	bics	r2, r1
 8001fee:	621a      	str	r2, [r3, #32]
 8001ff0:	4bc7      	ldr	r3, [pc, #796]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8001ff2:	6a1a      	ldr	r2, [r3, #32]
 8001ff4:	4bc6      	ldr	r3, [pc, #792]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	438a      	bics	r2, r1
 8001ffa:	621a      	str	r2, [r3, #32]
 8001ffc:	e01c      	b.n	8002038 <HAL_RCC_OscConfig+0x3a4>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b05      	cmp	r3, #5
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x38c>
 8002006:	4bc2      	ldr	r3, [pc, #776]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002008:	6a1a      	ldr	r2, [r3, #32]
 800200a:	4bc1      	ldr	r3, [pc, #772]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 800200c:	2104      	movs	r1, #4
 800200e:	430a      	orrs	r2, r1
 8002010:	621a      	str	r2, [r3, #32]
 8002012:	4bbf      	ldr	r3, [pc, #764]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002014:	6a1a      	ldr	r2, [r3, #32]
 8002016:	4bbe      	ldr	r3, [pc, #760]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002018:	2101      	movs	r1, #1
 800201a:	430a      	orrs	r2, r1
 800201c:	621a      	str	r2, [r3, #32]
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0x3a4>
 8002020:	4bbb      	ldr	r3, [pc, #748]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002022:	6a1a      	ldr	r2, [r3, #32]
 8002024:	4bba      	ldr	r3, [pc, #744]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002026:	2101      	movs	r1, #1
 8002028:	438a      	bics	r2, r1
 800202a:	621a      	str	r2, [r3, #32]
 800202c:	4bb8      	ldr	r3, [pc, #736]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 800202e:	6a1a      	ldr	r2, [r3, #32]
 8002030:	4bb7      	ldr	r3, [pc, #732]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002032:	2104      	movs	r1, #4
 8002034:	438a      	bics	r2, r1
 8002036:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d014      	beq.n	800206a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002040:	f7fe fcdc 	bl	80009fc <HAL_GetTick>
 8002044:	0003      	movs	r3, r0
 8002046:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002048:	e009      	b.n	800205e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7fe fcd7 	bl	80009fc <HAL_GetTick>
 800204e:	0002      	movs	r2, r0
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	4aaf      	ldr	r2, [pc, #700]	; (8002314 <HAL_RCC_OscConfig+0x680>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e19a      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205e:	4bac      	ldr	r3, [pc, #688]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	2202      	movs	r2, #2
 8002064:	4013      	ands	r3, r2
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x3b6>
 8002068:	e013      	b.n	8002092 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7fe fcc7 	bl	80009fc <HAL_GetTick>
 800206e:	0003      	movs	r3, r0
 8002070:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002072:	e009      	b.n	8002088 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002074:	f7fe fcc2 	bl	80009fc <HAL_GetTick>
 8002078:	0002      	movs	r2, r0
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	4aa5      	ldr	r2, [pc, #660]	; (8002314 <HAL_RCC_OscConfig+0x680>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e185      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002088:	4ba1      	ldr	r3, [pc, #644]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	2202      	movs	r2, #2
 800208e:	4013      	ands	r3, r2
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002092:	231f      	movs	r3, #31
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d105      	bne.n	80020a8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209c:	4b9c      	ldr	r3, [pc, #624]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 800209e:	69da      	ldr	r2, [r3, #28]
 80020a0:	4b9b      	ldr	r3, [pc, #620]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80020a2:	499d      	ldr	r1, [pc, #628]	; (8002318 <HAL_RCC_OscConfig+0x684>)
 80020a4:	400a      	ands	r2, r1
 80020a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2210      	movs	r2, #16
 80020ae:	4013      	ands	r3, r2
 80020b0:	d063      	beq.n	800217a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d12a      	bne.n	8002110 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020ba:	4b95      	ldr	r3, [pc, #596]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80020bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020be:	4b94      	ldr	r3, [pc, #592]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80020c0:	2104      	movs	r1, #4
 80020c2:	430a      	orrs	r2, r1
 80020c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80020c6:	4b92      	ldr	r3, [pc, #584]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80020c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ca:	4b91      	ldr	r3, [pc, #580]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80020cc:	2101      	movs	r1, #1
 80020ce:	430a      	orrs	r2, r1
 80020d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d2:	f7fe fc93 	bl	80009fc <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020dc:	f7fe fc8e 	bl	80009fc <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e152      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020ee:	4b88      	ldr	r3, [pc, #544]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80020f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f2:	2202      	movs	r2, #2
 80020f4:	4013      	ands	r3, r2
 80020f6:	d0f1      	beq.n	80020dc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020f8:	4b85      	ldr	r3, [pc, #532]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80020fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fc:	22f8      	movs	r2, #248	; 0xf8
 80020fe:	4393      	bics	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	00da      	lsls	r2, r3, #3
 8002108:	4b81      	ldr	r3, [pc, #516]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 800210a:	430a      	orrs	r2, r1
 800210c:	635a      	str	r2, [r3, #52]	; 0x34
 800210e:	e034      	b.n	800217a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	3305      	adds	r3, #5
 8002116:	d111      	bne.n	800213c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002118:	4b7d      	ldr	r3, [pc, #500]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 800211a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800211c:	4b7c      	ldr	r3, [pc, #496]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 800211e:	2104      	movs	r1, #4
 8002120:	438a      	bics	r2, r1
 8002122:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002124:	4b7a      	ldr	r3, [pc, #488]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002128:	22f8      	movs	r2, #248	; 0xf8
 800212a:	4393      	bics	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	00da      	lsls	r2, r3, #3
 8002134:	4b76      	ldr	r3, [pc, #472]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002136:	430a      	orrs	r2, r1
 8002138:	635a      	str	r2, [r3, #52]	; 0x34
 800213a:	e01e      	b.n	800217a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800213c:	4b74      	ldr	r3, [pc, #464]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 800213e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002140:	4b73      	ldr	r3, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002142:	2104      	movs	r1, #4
 8002144:	430a      	orrs	r2, r1
 8002146:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002148:	4b71      	ldr	r3, [pc, #452]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 800214a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800214c:	4b70      	ldr	r3, [pc, #448]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 800214e:	2101      	movs	r1, #1
 8002150:	438a      	bics	r2, r1
 8002152:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002154:	f7fe fc52 	bl	80009fc <HAL_GetTick>
 8002158:	0003      	movs	r3, r0
 800215a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800215e:	f7fe fc4d 	bl	80009fc <HAL_GetTick>
 8002162:	0002      	movs	r2, r0
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e111      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002170:	4b67      	ldr	r3, [pc, #412]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002174:	2202      	movs	r2, #2
 8002176:	4013      	ands	r3, r2
 8002178:	d1f1      	bne.n	800215e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2220      	movs	r2, #32
 8002180:	4013      	ands	r3, r2
 8002182:	d05c      	beq.n	800223e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002184:	4b62      	ldr	r3, [pc, #392]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	220c      	movs	r2, #12
 800218a:	4013      	ands	r3, r2
 800218c:	2b0c      	cmp	r3, #12
 800218e:	d00e      	beq.n	80021ae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002190:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	220c      	movs	r2, #12
 8002196:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002198:	2b08      	cmp	r3, #8
 800219a:	d114      	bne.n	80021c6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800219c:	4b5c      	ldr	r3, [pc, #368]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	23c0      	movs	r3, #192	; 0xc0
 80021a2:	025b      	lsls	r3, r3, #9
 80021a4:	401a      	ands	r2, r3
 80021a6:	23c0      	movs	r3, #192	; 0xc0
 80021a8:	025b      	lsls	r3, r3, #9
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d10b      	bne.n	80021c6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021ae:	4b58      	ldr	r3, [pc, #352]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80021b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	029b      	lsls	r3, r3, #10
 80021b6:	4013      	ands	r3, r2
 80021b8:	d040      	beq.n	800223c <HAL_RCC_OscConfig+0x5a8>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d03c      	beq.n	800223c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e0e6      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d01b      	beq.n	8002206 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80021ce:	4b50      	ldr	r3, [pc, #320]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80021d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d2:	4b4f      	ldr	r3, [pc, #316]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80021d4:	2180      	movs	r1, #128	; 0x80
 80021d6:	0249      	lsls	r1, r1, #9
 80021d8:	430a      	orrs	r2, r1
 80021da:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7fe fc0e 	bl	80009fc <HAL_GetTick>
 80021e0:	0003      	movs	r3, r0
 80021e2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021e6:	f7fe fc09 	bl	80009fc <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0cd      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021f8:	4b45      	ldr	r3, [pc, #276]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80021fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	029b      	lsls	r3, r3, #10
 8002200:	4013      	ands	r3, r2
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x552>
 8002204:	e01b      	b.n	800223e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002206:	4b42      	ldr	r3, [pc, #264]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800220a:	4b41      	ldr	r3, [pc, #260]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 800220c:	4943      	ldr	r1, [pc, #268]	; (800231c <HAL_RCC_OscConfig+0x688>)
 800220e:	400a      	ands	r2, r1
 8002210:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7fe fbf3 	bl	80009fc <HAL_GetTick>
 8002216:	0003      	movs	r3, r0
 8002218:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800221c:	f7fe fbee 	bl	80009fc <HAL_GetTick>
 8002220:	0002      	movs	r2, r0
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e0b2      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800222e:	4b38      	ldr	r3, [pc, #224]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	029b      	lsls	r3, r3, #10
 8002236:	4013      	ands	r3, r2
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x588>
 800223a:	e000      	b.n	800223e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800223c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	2b00      	cmp	r3, #0
 8002244:	d100      	bne.n	8002248 <HAL_RCC_OscConfig+0x5b4>
 8002246:	e0a4      	b.n	8002392 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002248:	4b31      	ldr	r3, [pc, #196]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	220c      	movs	r2, #12
 800224e:	4013      	ands	r3, r2
 8002250:	2b08      	cmp	r3, #8
 8002252:	d100      	bne.n	8002256 <HAL_RCC_OscConfig+0x5c2>
 8002254:	e078      	b.n	8002348 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	2b02      	cmp	r3, #2
 800225c:	d14c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225e:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002264:	492e      	ldr	r1, [pc, #184]	; (8002320 <HAL_RCC_OscConfig+0x68c>)
 8002266:	400a      	ands	r2, r1
 8002268:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7fe fbc7 	bl	80009fc <HAL_GetTick>
 800226e:	0003      	movs	r3, r0
 8002270:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002274:	f7fe fbc2 	bl	80009fc <HAL_GetTick>
 8002278:	0002      	movs	r2, r0
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e086      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	049b      	lsls	r3, r3, #18
 800228e:	4013      	ands	r3, r2
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002292:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	220f      	movs	r2, #15
 8002298:	4393      	bics	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a0:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80022a2:	430a      	orrs	r2, r1
 80022a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80022a6:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <HAL_RCC_OscConfig+0x690>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	431a      	orrs	r2, r3
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80022bc:	430a      	orrs	r2, r1
 80022be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c0:	4b13      	ldr	r3, [pc, #76]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	0449      	lsls	r1, r1, #17
 80022ca:	430a      	orrs	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7fe fb95 	bl	80009fc <HAL_GetTick>
 80022d2:	0003      	movs	r3, r0
 80022d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d8:	f7fe fb90 	bl	80009fc <HAL_GetTick>
 80022dc:	0002      	movs	r2, r0
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e054      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	049b      	lsls	r3, r3, #18
 80022f2:	4013      	ands	r3, r2
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x644>
 80022f6:	e04c      	b.n	8002392 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <HAL_RCC_OscConfig+0x68c>)
 8002300:	400a      	ands	r2, r1
 8002302:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7fe fb7a 	bl	80009fc <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230c:	e015      	b.n	800233a <HAL_RCC_OscConfig+0x6a6>
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	40021000 	.word	0x40021000
 8002314:	00001388 	.word	0x00001388
 8002318:	efffffff 	.word	0xefffffff
 800231c:	fffeffff 	.word	0xfffeffff
 8002320:	feffffff 	.word	0xfeffffff
 8002324:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe fb68 	bl	80009fc <HAL_GetTick>
 800232c:	0002      	movs	r2, r0
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e02c      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233a:	4b18      	ldr	r3, [pc, #96]	; (800239c <HAL_RCC_OscConfig+0x708>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	049b      	lsls	r3, r3, #18
 8002342:	4013      	ands	r3, r2
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x694>
 8002346:	e024      	b.n	8002392 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e01f      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_RCC_OscConfig+0x708>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <HAL_RCC_OscConfig+0x708>)
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	23c0      	movs	r3, #192	; 0xc0
 8002364:	025b      	lsls	r3, r3, #9
 8002366:	401a      	ands	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	429a      	cmp	r2, r3
 800236e:	d10e      	bne.n	800238e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	220f      	movs	r2, #15
 8002374:	401a      	ands	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800237a:	429a      	cmp	r2, r3
 800237c:	d107      	bne.n	800238e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	23f0      	movs	r3, #240	; 0xf0
 8002382:	039b      	lsls	r3, r3, #14
 8002384:	401a      	ands	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b008      	add	sp, #32
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000

080023a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0bf      	b.n	8002534 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b4:	4b61      	ldr	r3, [pc, #388]	; (800253c <HAL_RCC_ClockConfig+0x19c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2201      	movs	r2, #1
 80023ba:	4013      	ands	r3, r2
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d911      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b5e      	ldr	r3, [pc, #376]	; (800253c <HAL_RCC_ClockConfig+0x19c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2201      	movs	r2, #1
 80023c8:	4393      	bics	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	4b5b      	ldr	r3, [pc, #364]	; (800253c <HAL_RCC_ClockConfig+0x19c>)
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d4:	4b59      	ldr	r3, [pc, #356]	; (800253c <HAL_RCC_ClockConfig+0x19c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2201      	movs	r2, #1
 80023da:	4013      	ands	r3, r2
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d001      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e0a6      	b.n	8002534 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2202      	movs	r2, #2
 80023ec:	4013      	ands	r3, r2
 80023ee:	d015      	beq.n	800241c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2204      	movs	r2, #4
 80023f6:	4013      	ands	r3, r2
 80023f8:	d006      	beq.n	8002408 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023fa:	4b51      	ldr	r3, [pc, #324]	; (8002540 <HAL_RCC_ClockConfig+0x1a0>)
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	4b50      	ldr	r3, [pc, #320]	; (8002540 <HAL_RCC_ClockConfig+0x1a0>)
 8002400:	21e0      	movs	r1, #224	; 0xe0
 8002402:	00c9      	lsls	r1, r1, #3
 8002404:	430a      	orrs	r2, r1
 8002406:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002408:	4b4d      	ldr	r3, [pc, #308]	; (8002540 <HAL_RCC_ClockConfig+0x1a0>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	22f0      	movs	r2, #240	; 0xf0
 800240e:	4393      	bics	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	4b4a      	ldr	r3, [pc, #296]	; (8002540 <HAL_RCC_ClockConfig+0x1a0>)
 8002418:	430a      	orrs	r2, r1
 800241a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2201      	movs	r2, #1
 8002422:	4013      	ands	r3, r2
 8002424:	d04c      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b44      	ldr	r3, [pc, #272]	; (8002540 <HAL_RCC_ClockConfig+0x1a0>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	029b      	lsls	r3, r3, #10
 8002436:	4013      	ands	r3, r2
 8002438:	d120      	bne.n	800247c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e07a      	b.n	8002534 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	4b3e      	ldr	r3, [pc, #248]	; (8002540 <HAL_RCC_ClockConfig+0x1a0>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	049b      	lsls	r3, r3, #18
 800244e:	4013      	ands	r3, r2
 8002450:	d114      	bne.n	800247c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06e      	b.n	8002534 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800245e:	4b38      	ldr	r3, [pc, #224]	; (8002540 <HAL_RCC_ClockConfig+0x1a0>)
 8002460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	029b      	lsls	r3, r3, #10
 8002466:	4013      	ands	r3, r2
 8002468:	d108      	bne.n	800247c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e062      	b.n	8002534 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246e:	4b34      	ldr	r3, [pc, #208]	; (8002540 <HAL_RCC_ClockConfig+0x1a0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2202      	movs	r2, #2
 8002474:	4013      	ands	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e05b      	b.n	8002534 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247c:	4b30      	ldr	r3, [pc, #192]	; (8002540 <HAL_RCC_ClockConfig+0x1a0>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2203      	movs	r2, #3
 8002482:	4393      	bics	r3, r2
 8002484:	0019      	movs	r1, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <HAL_RCC_ClockConfig+0x1a0>)
 800248c:	430a      	orrs	r2, r1
 800248e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002490:	f7fe fab4 	bl	80009fc <HAL_GetTick>
 8002494:	0003      	movs	r3, r0
 8002496:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002498:	e009      	b.n	80024ae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249a:	f7fe faaf 	bl	80009fc <HAL_GetTick>
 800249e:	0002      	movs	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	4a27      	ldr	r2, [pc, #156]	; (8002544 <HAL_RCC_ClockConfig+0x1a4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e042      	b.n	8002534 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_RCC_ClockConfig+0x1a0>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	220c      	movs	r2, #12
 80024b4:	401a      	ands	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1ec      	bne.n	800249a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c0:	4b1e      	ldr	r3, [pc, #120]	; (800253c <HAL_RCC_ClockConfig+0x19c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2201      	movs	r2, #1
 80024c6:	4013      	ands	r3, r2
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d211      	bcs.n	80024f2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_RCC_ClockConfig+0x19c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2201      	movs	r2, #1
 80024d4:	4393      	bics	r3, r2
 80024d6:	0019      	movs	r1, r3
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_RCC_ClockConfig+0x19c>)
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e0:	4b16      	ldr	r3, [pc, #88]	; (800253c <HAL_RCC_ClockConfig+0x19c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2201      	movs	r2, #1
 80024e6:	4013      	ands	r3, r2
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d001      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e020      	b.n	8002534 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2204      	movs	r2, #4
 80024f8:	4013      	ands	r3, r2
 80024fa:	d009      	beq.n	8002510 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024fc:	4b10      	ldr	r3, [pc, #64]	; (8002540 <HAL_RCC_ClockConfig+0x1a0>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4a11      	ldr	r2, [pc, #68]	; (8002548 <HAL_RCC_ClockConfig+0x1a8>)
 8002502:	4013      	ands	r3, r2
 8002504:	0019      	movs	r1, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <HAL_RCC_ClockConfig+0x1a0>)
 800250c:	430a      	orrs	r2, r1
 800250e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002510:	f000 f820 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8002514:	0001      	movs	r1, r0
 8002516:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <HAL_RCC_ClockConfig+0x1a0>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	220f      	movs	r2, #15
 800251e:	4013      	ands	r3, r2
 8002520:	4a0a      	ldr	r2, [pc, #40]	; (800254c <HAL_RCC_ClockConfig+0x1ac>)
 8002522:	5cd3      	ldrb	r3, [r2, r3]
 8002524:	000a      	movs	r2, r1
 8002526:	40da      	lsrs	r2, r3
 8002528:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1b0>)
 800252a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800252c:	2000      	movs	r0, #0
 800252e:	f7fe fa1f 	bl	8000970 <HAL_InitTick>
  
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	0018      	movs	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	b004      	add	sp, #16
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40022000 	.word	0x40022000
 8002540:	40021000 	.word	0x40021000
 8002544:	00001388 	.word	0x00001388
 8002548:	fffff8ff 	.word	0xfffff8ff
 800254c:	080031bc 	.word	0x080031bc
 8002550:	20000000 	.word	0x20000000

08002554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	2300      	movs	r3, #0
 8002568:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800256e:	4b2d      	ldr	r3, [pc, #180]	; (8002624 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	220c      	movs	r2, #12
 8002578:	4013      	ands	r3, r2
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d046      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0xb8>
 800257e:	d848      	bhi.n	8002612 <HAL_RCC_GetSysClockFreq+0xbe>
 8002580:	2b04      	cmp	r3, #4
 8002582:	d002      	beq.n	800258a <HAL_RCC_GetSysClockFreq+0x36>
 8002584:	2b08      	cmp	r3, #8
 8002586:	d003      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x3c>
 8002588:	e043      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800258a:	4b27      	ldr	r3, [pc, #156]	; (8002628 <HAL_RCC_GetSysClockFreq+0xd4>)
 800258c:	613b      	str	r3, [r7, #16]
      break;
 800258e:	e043      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	0c9b      	lsrs	r3, r3, #18
 8002594:	220f      	movs	r2, #15
 8002596:	4013      	ands	r3, r2
 8002598:	4a24      	ldr	r2, [pc, #144]	; (800262c <HAL_RCC_GetSysClockFreq+0xd8>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800259e:	4b21      	ldr	r3, [pc, #132]	; (8002624 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	220f      	movs	r2, #15
 80025a4:	4013      	ands	r3, r2
 80025a6:	4a22      	ldr	r2, [pc, #136]	; (8002630 <HAL_RCC_GetSysClockFreq+0xdc>)
 80025a8:	5cd3      	ldrb	r3, [r2, r3]
 80025aa:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	23c0      	movs	r3, #192	; 0xc0
 80025b0:	025b      	lsls	r3, r3, #9
 80025b2:	401a      	ands	r2, r3
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	025b      	lsls	r3, r3, #9
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d109      	bne.n	80025d0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	481a      	ldr	r0, [pc, #104]	; (8002628 <HAL_RCC_GetSysClockFreq+0xd4>)
 80025c0:	f7fd fda0 	bl	8000104 <__udivsi3>
 80025c4:	0003      	movs	r3, r0
 80025c6:	001a      	movs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4353      	muls	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	e01a      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	23c0      	movs	r3, #192	; 0xc0
 80025d4:	025b      	lsls	r3, r3, #9
 80025d6:	401a      	ands	r2, r3
 80025d8:	23c0      	movs	r3, #192	; 0xc0
 80025da:	025b      	lsls	r3, r3, #9
 80025dc:	429a      	cmp	r2, r3
 80025de:	d109      	bne.n	80025f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	4814      	ldr	r0, [pc, #80]	; (8002634 <HAL_RCC_GetSysClockFreq+0xe0>)
 80025e4:	f7fd fd8e 	bl	8000104 <__udivsi3>
 80025e8:	0003      	movs	r3, r0
 80025ea:	001a      	movs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4353      	muls	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	e008      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	480c      	ldr	r0, [pc, #48]	; (8002628 <HAL_RCC_GetSysClockFreq+0xd4>)
 80025f8:	f7fd fd84 	bl	8000104 <__udivsi3>
 80025fc:	0003      	movs	r3, r0
 80025fe:	001a      	movs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4353      	muls	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	613b      	str	r3, [r7, #16]
      break;
 800260a:	e005      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_RCC_GetSysClockFreq+0xe0>)
 800260e:	613b      	str	r3, [r7, #16]
      break;
 8002610:	e002      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002614:	613b      	str	r3, [r7, #16]
      break;
 8002616:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002618:	693b      	ldr	r3, [r7, #16]
}
 800261a:	0018      	movs	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	b006      	add	sp, #24
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	40021000 	.word	0x40021000
 8002628:	007a1200 	.word	0x007a1200
 800262c:	080031d4 	.word	0x080031d4
 8002630:	080031e4 	.word	0x080031e4
 8002634:	02dc6c00 	.word	0x02dc6c00

08002638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800263c:	4b02      	ldr	r3, [pc, #8]	; (8002648 <HAL_RCC_GetHCLKFreq+0x10>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	20000000 	.word	0x20000000

0800264c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002650:	f7ff fff2 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 8002654:	0001      	movs	r1, r0
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	2207      	movs	r2, #7
 800265e:	4013      	ands	r3, r2
 8002660:	4a04      	ldr	r2, [pc, #16]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002662:	5cd3      	ldrb	r3, [r2, r3]
 8002664:	40d9      	lsrs	r1, r3
 8002666:	000b      	movs	r3, r1
}    
 8002668:	0018      	movs	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	40021000 	.word	0x40021000
 8002674:	080031cc 	.word	0x080031cc

08002678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	025b      	lsls	r3, r3, #9
 8002690:	4013      	ands	r3, r2
 8002692:	d100      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002694:	e08e      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002696:	2017      	movs	r0, #23
 8002698:	183b      	adds	r3, r7, r0
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269e:	4b6e      	ldr	r3, [pc, #440]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	055b      	lsls	r3, r3, #21
 80026a6:	4013      	ands	r3, r2
 80026a8:	d110      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	4b6b      	ldr	r3, [pc, #428]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026ac:	69da      	ldr	r2, [r3, #28]
 80026ae:	4b6a      	ldr	r3, [pc, #424]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026b0:	2180      	movs	r1, #128	; 0x80
 80026b2:	0549      	lsls	r1, r1, #21
 80026b4:	430a      	orrs	r2, r1
 80026b6:	61da      	str	r2, [r3, #28]
 80026b8:	4b67      	ldr	r3, [pc, #412]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026ba:	69da      	ldr	r2, [r3, #28]
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	055b      	lsls	r3, r3, #21
 80026c0:	4013      	ands	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c6:	183b      	adds	r3, r7, r0
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	4b63      	ldr	r3, [pc, #396]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4013      	ands	r3, r2
 80026d6:	d11a      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d8:	4b60      	ldr	r3, [pc, #384]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b5f      	ldr	r3, [pc, #380]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026de:	2180      	movs	r1, #128	; 0x80
 80026e0:	0049      	lsls	r1, r1, #1
 80026e2:	430a      	orrs	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e6:	f7fe f989 	bl	80009fc <HAL_GetTick>
 80026ea:	0003      	movs	r3, r0
 80026ec:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	e008      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f0:	f7fe f984 	bl	80009fc <HAL_GetTick>
 80026f4:	0002      	movs	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0a6      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002702:	4b56      	ldr	r3, [pc, #344]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4013      	ands	r3, r2
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800270e:	4b52      	ldr	r3, [pc, #328]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002710:	6a1a      	ldr	r2, [r3, #32]
 8002712:	23c0      	movs	r3, #192	; 0xc0
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4013      	ands	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d034      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	23c0      	movs	r3, #192	; 0xc0
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4013      	ands	r3, r2
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	429a      	cmp	r2, r3
 800272e:	d02c      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002730:	4b49      	ldr	r3, [pc, #292]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4a4a      	ldr	r2, [pc, #296]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002736:	4013      	ands	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800273a:	4b47      	ldr	r3, [pc, #284]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800273c:	6a1a      	ldr	r2, [r3, #32]
 800273e:	4b46      	ldr	r3, [pc, #280]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	0249      	lsls	r1, r1, #9
 8002744:	430a      	orrs	r2, r1
 8002746:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002748:	4b43      	ldr	r3, [pc, #268]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800274a:	6a1a      	ldr	r2, [r3, #32]
 800274c:	4b42      	ldr	r3, [pc, #264]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800274e:	4945      	ldr	r1, [pc, #276]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002750:	400a      	ands	r2, r1
 8002752:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002754:	4b40      	ldr	r3, [pc, #256]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	4013      	ands	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fe f94b 	bl	80009fc <HAL_GetTick>
 8002766:	0003      	movs	r3, r0
 8002768:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276a:	e009      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276c:	f7fe f946 	bl	80009fc <HAL_GetTick>
 8002770:	0002      	movs	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	4a3c      	ldr	r2, [pc, #240]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e067      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002780:	4b35      	ldr	r3, [pc, #212]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	2202      	movs	r2, #2
 8002786:	4013      	ands	r3, r2
 8002788:	d0f0      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800278a:	4b33      	ldr	r3, [pc, #204]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	4a34      	ldr	r2, [pc, #208]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002790:	4013      	ands	r3, r2
 8002792:	0019      	movs	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	4b2f      	ldr	r3, [pc, #188]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800279a:	430a      	orrs	r2, r1
 800279c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800279e:	2317      	movs	r3, #23
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a8:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027aa:	69da      	ldr	r2, [r3, #28]
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027ae:	492f      	ldr	r1, [pc, #188]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80027b0:	400a      	ands	r2, r1
 80027b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2201      	movs	r2, #1
 80027ba:	4013      	ands	r3, r2
 80027bc:	d009      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027be:	4b26      	ldr	r3, [pc, #152]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	2203      	movs	r2, #3
 80027c4:	4393      	bics	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	4b22      	ldr	r3, [pc, #136]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027ce:	430a      	orrs	r2, r1
 80027d0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2202      	movs	r2, #2
 80027d8:	4013      	ands	r3, r2
 80027da:	d009      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027dc:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	4a23      	ldr	r2, [pc, #140]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	0019      	movs	r1, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027ec:	430a      	orrs	r2, r1
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	02db      	lsls	r3, r3, #11
 80027f8:	4013      	ands	r3, r2
 80027fa:	d009      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027fc:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002802:	4013      	ands	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800280c:	430a      	orrs	r2, r1
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2220      	movs	r2, #32
 8002816:	4013      	ands	r3, r2
 8002818:	d009      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800281a:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	2210      	movs	r2, #16
 8002820:	4393      	bics	r3, r2
 8002822:	0019      	movs	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800282a:	430a      	orrs	r2, r1
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4013      	ands	r3, r2
 8002838:	d009      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	2240      	movs	r2, #64	; 0x40
 8002840:	4393      	bics	r3, r2
 8002842:	0019      	movs	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800284a:	430a      	orrs	r2, r1
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	0018      	movs	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	b006      	add	sp, #24
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	40007000 	.word	0x40007000
 8002860:	fffffcff 	.word	0xfffffcff
 8002864:	fffeffff 	.word	0xfffeffff
 8002868:	00001388 	.word	0x00001388
 800286c:	efffffff 	.word	0xefffffff
 8002870:	fffcffff 	.word	0xfffcffff
 8002874:	fff3ffff 	.word	0xfff3ffff

08002878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e044      	b.n	8002914 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d107      	bne.n	80028a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2278      	movs	r2, #120	; 0x78
 8002896:	2100      	movs	r1, #0
 8002898:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	0018      	movs	r0, r3
 800289e:	f7fd ffa9 	bl	80007f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2224      	movs	r2, #36	; 0x24
 80028a6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2101      	movs	r1, #1
 80028b4:	438a      	bics	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 f830 	bl	8002920 <UART_SetConfig>
 80028c0:	0003      	movs	r3, r0
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e024      	b.n	8002914 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	0018      	movs	r0, r3
 80028d6:	f000 fa0b 	bl	8002cf0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	490d      	ldr	r1, [pc, #52]	; (800291c <HAL_UART_Init+0xa4>)
 80028e6:	400a      	ands	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	212a      	movs	r1, #42	; 0x2a
 80028f6:	438a      	bics	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2101      	movs	r1, #1
 8002906:	430a      	orrs	r2, r1
 8002908:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	0018      	movs	r0, r3
 800290e:	f000 faa3 	bl	8002e58 <UART_CheckIdleState>
 8002912:	0003      	movs	r3, r0
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b002      	add	sp, #8
 800291a:	bd80      	pop	{r7, pc}
 800291c:	ffffb7ff 	.word	0xffffb7ff

08002920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002928:	231e      	movs	r3, #30
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	2200      	movs	r2, #0
 800292e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4abe      	ldr	r2, [pc, #760]	; (8002c48 <UART_SetConfig+0x328>)
 8002950:	4013      	ands	r3, r2
 8002952:	0019      	movs	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	430a      	orrs	r2, r1
 800295c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4ab9      	ldr	r2, [pc, #740]	; (8002c4c <UART_SetConfig+0x32c>)
 8002966:	4013      	ands	r3, r2
 8002968:	0019      	movs	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4ab0      	ldr	r2, [pc, #704]	; (8002c50 <UART_SetConfig+0x330>)
 800298e:	4013      	ands	r3, r2
 8002990:	0019      	movs	r1, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	430a      	orrs	r2, r1
 800299a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4aac      	ldr	r2, [pc, #688]	; (8002c54 <UART_SetConfig+0x334>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d127      	bne.n	80029f6 <UART_SetConfig+0xd6>
 80029a6:	4bac      	ldr	r3, [pc, #688]	; (8002c58 <UART_SetConfig+0x338>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	2203      	movs	r2, #3
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d00d      	beq.n	80029ce <UART_SetConfig+0xae>
 80029b2:	d81b      	bhi.n	80029ec <UART_SetConfig+0xcc>
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d014      	beq.n	80029e2 <UART_SetConfig+0xc2>
 80029b8:	d818      	bhi.n	80029ec <UART_SetConfig+0xcc>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <UART_SetConfig+0xa4>
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d00a      	beq.n	80029d8 <UART_SetConfig+0xb8>
 80029c2:	e013      	b.n	80029ec <UART_SetConfig+0xcc>
 80029c4:	231f      	movs	r3, #31
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	e0bd      	b.n	8002b4a <UART_SetConfig+0x22a>
 80029ce:	231f      	movs	r3, #31
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	2202      	movs	r2, #2
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e0b8      	b.n	8002b4a <UART_SetConfig+0x22a>
 80029d8:	231f      	movs	r3, #31
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	2204      	movs	r2, #4
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	e0b3      	b.n	8002b4a <UART_SetConfig+0x22a>
 80029e2:	231f      	movs	r3, #31
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	2208      	movs	r2, #8
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	e0ae      	b.n	8002b4a <UART_SetConfig+0x22a>
 80029ec:	231f      	movs	r3, #31
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	2210      	movs	r2, #16
 80029f2:	701a      	strb	r2, [r3, #0]
 80029f4:	e0a9      	b.n	8002b4a <UART_SetConfig+0x22a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a98      	ldr	r2, [pc, #608]	; (8002c5c <UART_SetConfig+0x33c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d134      	bne.n	8002a6a <UART_SetConfig+0x14a>
 8002a00:	4b95      	ldr	r3, [pc, #596]	; (8002c58 <UART_SetConfig+0x338>)
 8002a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a04:	23c0      	movs	r3, #192	; 0xc0
 8002a06:	029b      	lsls	r3, r3, #10
 8002a08:	4013      	ands	r3, r2
 8002a0a:	22c0      	movs	r2, #192	; 0xc0
 8002a0c:	0292      	lsls	r2, r2, #10
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d017      	beq.n	8002a42 <UART_SetConfig+0x122>
 8002a12:	22c0      	movs	r2, #192	; 0xc0
 8002a14:	0292      	lsls	r2, r2, #10
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d822      	bhi.n	8002a60 <UART_SetConfig+0x140>
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	0292      	lsls	r2, r2, #10
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d019      	beq.n	8002a56 <UART_SetConfig+0x136>
 8002a22:	2280      	movs	r2, #128	; 0x80
 8002a24:	0292      	lsls	r2, r2, #10
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d81a      	bhi.n	8002a60 <UART_SetConfig+0x140>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d004      	beq.n	8002a38 <UART_SetConfig+0x118>
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	0252      	lsls	r2, r2, #9
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00a      	beq.n	8002a4c <UART_SetConfig+0x12c>
 8002a36:	e013      	b.n	8002a60 <UART_SetConfig+0x140>
 8002a38:	231f      	movs	r3, #31
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
 8002a40:	e083      	b.n	8002b4a <UART_SetConfig+0x22a>
 8002a42:	231f      	movs	r3, #31
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	2202      	movs	r2, #2
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	e07e      	b.n	8002b4a <UART_SetConfig+0x22a>
 8002a4c:	231f      	movs	r3, #31
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	2204      	movs	r2, #4
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e079      	b.n	8002b4a <UART_SetConfig+0x22a>
 8002a56:	231f      	movs	r3, #31
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	2208      	movs	r2, #8
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e074      	b.n	8002b4a <UART_SetConfig+0x22a>
 8002a60:	231f      	movs	r3, #31
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	2210      	movs	r2, #16
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	e06f      	b.n	8002b4a <UART_SetConfig+0x22a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a7c      	ldr	r2, [pc, #496]	; (8002c60 <UART_SetConfig+0x340>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d134      	bne.n	8002ade <UART_SetConfig+0x1be>
 8002a74:	4b78      	ldr	r3, [pc, #480]	; (8002c58 <UART_SetConfig+0x338>)
 8002a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a78:	23c0      	movs	r3, #192	; 0xc0
 8002a7a:	031b      	lsls	r3, r3, #12
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	22c0      	movs	r2, #192	; 0xc0
 8002a80:	0312      	lsls	r2, r2, #12
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d017      	beq.n	8002ab6 <UART_SetConfig+0x196>
 8002a86:	22c0      	movs	r2, #192	; 0xc0
 8002a88:	0312      	lsls	r2, r2, #12
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d822      	bhi.n	8002ad4 <UART_SetConfig+0x1b4>
 8002a8e:	2280      	movs	r2, #128	; 0x80
 8002a90:	0312      	lsls	r2, r2, #12
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d019      	beq.n	8002aca <UART_SetConfig+0x1aa>
 8002a96:	2280      	movs	r2, #128	; 0x80
 8002a98:	0312      	lsls	r2, r2, #12
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d81a      	bhi.n	8002ad4 <UART_SetConfig+0x1b4>
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d004      	beq.n	8002aac <UART_SetConfig+0x18c>
 8002aa2:	2280      	movs	r2, #128	; 0x80
 8002aa4:	02d2      	lsls	r2, r2, #11
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00a      	beq.n	8002ac0 <UART_SetConfig+0x1a0>
 8002aaa:	e013      	b.n	8002ad4 <UART_SetConfig+0x1b4>
 8002aac:	231f      	movs	r3, #31
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	e049      	b.n	8002b4a <UART_SetConfig+0x22a>
 8002ab6:	231f      	movs	r3, #31
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	2202      	movs	r2, #2
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e044      	b.n	8002b4a <UART_SetConfig+0x22a>
 8002ac0:	231f      	movs	r3, #31
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e03f      	b.n	8002b4a <UART_SetConfig+0x22a>
 8002aca:	231f      	movs	r3, #31
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	2208      	movs	r2, #8
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	e03a      	b.n	8002b4a <UART_SetConfig+0x22a>
 8002ad4:	231f      	movs	r3, #31
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	2210      	movs	r2, #16
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e035      	b.n	8002b4a <UART_SetConfig+0x22a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a60      	ldr	r2, [pc, #384]	; (8002c64 <UART_SetConfig+0x344>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d104      	bne.n	8002af2 <UART_SetConfig+0x1d2>
 8002ae8:	231f      	movs	r3, #31
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e02b      	b.n	8002b4a <UART_SetConfig+0x22a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a5c      	ldr	r2, [pc, #368]	; (8002c68 <UART_SetConfig+0x348>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d104      	bne.n	8002b06 <UART_SetConfig+0x1e6>
 8002afc:	231f      	movs	r3, #31
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e021      	b.n	8002b4a <UART_SetConfig+0x22a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a58      	ldr	r2, [pc, #352]	; (8002c6c <UART_SetConfig+0x34c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d104      	bne.n	8002b1a <UART_SetConfig+0x1fa>
 8002b10:	231f      	movs	r3, #31
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
 8002b18:	e017      	b.n	8002b4a <UART_SetConfig+0x22a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a54      	ldr	r2, [pc, #336]	; (8002c70 <UART_SetConfig+0x350>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d104      	bne.n	8002b2e <UART_SetConfig+0x20e>
 8002b24:	231f      	movs	r3, #31
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e00d      	b.n	8002b4a <UART_SetConfig+0x22a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a50      	ldr	r2, [pc, #320]	; (8002c74 <UART_SetConfig+0x354>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d104      	bne.n	8002b42 <UART_SetConfig+0x222>
 8002b38:	231f      	movs	r3, #31
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e003      	b.n	8002b4a <UART_SetConfig+0x22a>
 8002b42:	231f      	movs	r3, #31
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	2210      	movs	r2, #16
 8002b48:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	021b      	lsls	r3, r3, #8
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d15c      	bne.n	8002c10 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8002b56:	231f      	movs	r3, #31
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d015      	beq.n	8002b8c <UART_SetConfig+0x26c>
 8002b60:	dc18      	bgt.n	8002b94 <UART_SetConfig+0x274>
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d00d      	beq.n	8002b82 <UART_SetConfig+0x262>
 8002b66:	dc15      	bgt.n	8002b94 <UART_SetConfig+0x274>
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <UART_SetConfig+0x252>
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d005      	beq.n	8002b7c <UART_SetConfig+0x25c>
 8002b70:	e010      	b.n	8002b94 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b72:	f7ff fd6b 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8002b76:	0003      	movs	r3, r0
 8002b78:	61bb      	str	r3, [r7, #24]
        break;
 8002b7a:	e012      	b.n	8002ba2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b7c:	4b3e      	ldr	r3, [pc, #248]	; (8002c78 <UART_SetConfig+0x358>)
 8002b7e:	61bb      	str	r3, [r7, #24]
        break;
 8002b80:	e00f      	b.n	8002ba2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b82:	f7ff fce7 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8002b86:	0003      	movs	r3, r0
 8002b88:	61bb      	str	r3, [r7, #24]
        break;
 8002b8a:	e00a      	b.n	8002ba2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	61bb      	str	r3, [r7, #24]
        break;
 8002b92:	e006      	b.n	8002ba2 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b98:	231e      	movs	r3, #30
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
        break;
 8002ba0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d100      	bne.n	8002baa <UART_SetConfig+0x28a>
 8002ba8:	e095      	b.n	8002cd6 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	005a      	lsls	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	18d2      	adds	r2, r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	0019      	movs	r1, r3
 8002bbc:	0010      	movs	r0, r2
 8002bbe:	f7fd faa1 	bl	8000104 <__udivsi3>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b0f      	cmp	r3, #15
 8002bca:	d91c      	bls.n	8002c06 <UART_SetConfig+0x2e6>
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	025b      	lsls	r3, r3, #9
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d217      	bcs.n	8002c06 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	200e      	movs	r0, #14
 8002bdc:	183b      	adds	r3, r7, r0
 8002bde:	210f      	movs	r1, #15
 8002be0:	438a      	bics	r2, r1
 8002be2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	085b      	lsrs	r3, r3, #1
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2207      	movs	r2, #7
 8002bec:	4013      	ands	r3, r2
 8002bee:	b299      	uxth	r1, r3
 8002bf0:	183b      	adds	r3, r7, r0
 8002bf2:	183a      	adds	r2, r7, r0
 8002bf4:	8812      	ldrh	r2, [r2, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	183a      	adds	r2, r7, r0
 8002c00:	8812      	ldrh	r2, [r2, #0]
 8002c02:	60da      	str	r2, [r3, #12]
 8002c04:	e067      	b.n	8002cd6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002c06:	231e      	movs	r3, #30
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
 8002c0e:	e062      	b.n	8002cd6 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c10:	231f      	movs	r3, #31
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d030      	beq.n	8002c7c <UART_SetConfig+0x35c>
 8002c1a:	dc33      	bgt.n	8002c84 <UART_SetConfig+0x364>
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d00d      	beq.n	8002c3c <UART_SetConfig+0x31c>
 8002c20:	dc30      	bgt.n	8002c84 <UART_SetConfig+0x364>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <UART_SetConfig+0x30c>
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d005      	beq.n	8002c36 <UART_SetConfig+0x316>
 8002c2a:	e02b      	b.n	8002c84 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c2c:	f7ff fd0e 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8002c30:	0003      	movs	r3, r0
 8002c32:	61bb      	str	r3, [r7, #24]
        break;
 8002c34:	e02d      	b.n	8002c92 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <UART_SetConfig+0x358>)
 8002c38:	61bb      	str	r3, [r7, #24]
        break;
 8002c3a:	e02a      	b.n	8002c92 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c3c:	f7ff fc8a 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8002c40:	0003      	movs	r3, r0
 8002c42:	61bb      	str	r3, [r7, #24]
        break;
 8002c44:	e025      	b.n	8002c92 <UART_SetConfig+0x372>
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	efff69f3 	.word	0xefff69f3
 8002c4c:	ffffcfff 	.word	0xffffcfff
 8002c50:	fffff4ff 	.word	0xfffff4ff
 8002c54:	40013800 	.word	0x40013800
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40004400 	.word	0x40004400
 8002c60:	40004800 	.word	0x40004800
 8002c64:	40004c00 	.word	0x40004c00
 8002c68:	40005000 	.word	0x40005000
 8002c6c:	40011400 	.word	0x40011400
 8002c70:	40011800 	.word	0x40011800
 8002c74:	40011c00 	.word	0x40011c00
 8002c78:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	61bb      	str	r3, [r7, #24]
        break;
 8002c82:	e006      	b.n	8002c92 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c88:	231e      	movs	r3, #30
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
        break;
 8002c90:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01e      	beq.n	8002cd6 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	085a      	lsrs	r2, r3, #1
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	18d2      	adds	r2, r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	0010      	movs	r0, r2
 8002caa:	f7fd fa2b 	bl	8000104 <__udivsi3>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b0f      	cmp	r3, #15
 8002cb6:	d90a      	bls.n	8002cce <UART_SetConfig+0x3ae>
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	025b      	lsls	r3, r3, #9
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d205      	bcs.n	8002cce <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60da      	str	r2, [r3, #12]
 8002ccc:	e003      	b.n	8002cd6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002cce:	231e      	movs	r3, #30
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002ce2:	231e      	movs	r3, #30
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	781b      	ldrb	r3, [r3, #0]
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b008      	add	sp, #32
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d00b      	beq.n	8002d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a4a      	ldr	r2, [pc, #296]	; (8002e34 <UART_AdvFeatureConfig+0x144>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	2202      	movs	r2, #2
 8002d20:	4013      	ands	r3, r2
 8002d22:	d00b      	beq.n	8002d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4a43      	ldr	r2, [pc, #268]	; (8002e38 <UART_AdvFeatureConfig+0x148>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	0019      	movs	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	2204      	movs	r2, #4
 8002d42:	4013      	ands	r3, r2
 8002d44:	d00b      	beq.n	8002d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4a3b      	ldr	r2, [pc, #236]	; (8002e3c <UART_AdvFeatureConfig+0x14c>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	0019      	movs	r1, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2208      	movs	r2, #8
 8002d64:	4013      	ands	r3, r2
 8002d66:	d00b      	beq.n	8002d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4a34      	ldr	r2, [pc, #208]	; (8002e40 <UART_AdvFeatureConfig+0x150>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	0019      	movs	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	2210      	movs	r2, #16
 8002d86:	4013      	ands	r3, r2
 8002d88:	d00b      	beq.n	8002da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a2c      	ldr	r2, [pc, #176]	; (8002e44 <UART_AdvFeatureConfig+0x154>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	0019      	movs	r1, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	2220      	movs	r2, #32
 8002da8:	4013      	ands	r3, r2
 8002daa:	d00b      	beq.n	8002dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	4a25      	ldr	r2, [pc, #148]	; (8002e48 <UART_AdvFeatureConfig+0x158>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	0019      	movs	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	2240      	movs	r2, #64	; 0x40
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d01d      	beq.n	8002e0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	4a1d      	ldr	r2, [pc, #116]	; (8002e4c <UART_AdvFeatureConfig+0x15c>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	0019      	movs	r1, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	035b      	lsls	r3, r3, #13
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d10b      	bne.n	8002e0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <UART_AdvFeatureConfig+0x160>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2280      	movs	r2, #128	; 0x80
 8002e10:	4013      	ands	r3, r2
 8002e12:	d00b      	beq.n	8002e2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4a0e      	ldr	r2, [pc, #56]	; (8002e54 <UART_AdvFeatureConfig+0x164>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	0019      	movs	r1, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	605a      	str	r2, [r3, #4]
  }
}
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b002      	add	sp, #8
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	fffdffff 	.word	0xfffdffff
 8002e38:	fffeffff 	.word	0xfffeffff
 8002e3c:	fffbffff 	.word	0xfffbffff
 8002e40:	ffff7fff 	.word	0xffff7fff
 8002e44:	ffffefff 	.word	0xffffefff
 8002e48:	ffffdfff 	.word	0xffffdfff
 8002e4c:	ffefffff 	.word	0xffefffff
 8002e50:	ff9fffff 	.word	0xff9fffff
 8002e54:	fff7ffff 	.word	0xfff7ffff

08002e58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b092      	sub	sp, #72	; 0x48
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2284      	movs	r2, #132	; 0x84
 8002e64:	2100      	movs	r1, #0
 8002e66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e68:	f7fd fdc8 	bl	80009fc <HAL_GetTick>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2208      	movs	r2, #8
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d12c      	bne.n	8002ed8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e80:	2280      	movs	r2, #128	; 0x80
 8002e82:	0391      	lsls	r1, r2, #14
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	4a46      	ldr	r2, [pc, #280]	; (8002fa0 <UART_CheckIdleState+0x148>)
 8002e88:	9200      	str	r2, [sp, #0]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f000 f88c 	bl	8002fa8 <UART_WaitOnFlagUntilTimeout>
 8002e90:	1e03      	subs	r3, r0, #0
 8002e92:	d021      	beq.n	8002ed8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e94:	f3ef 8310 	mrs	r3, PRIMASK
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	f383 8810 	msr	PRIMASK, r3
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2180      	movs	r1, #128	; 0x80
 8002eb6:	438a      	bics	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec0:	f383 8810 	msr	PRIMASK, r3
}
 8002ec4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2278      	movs	r2, #120	; 0x78
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e05f      	b.n	8002f98 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d146      	bne.n	8002f74 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee8:	2280      	movs	r2, #128	; 0x80
 8002eea:	03d1      	lsls	r1, r2, #15
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4a2c      	ldr	r2, [pc, #176]	; (8002fa0 <UART_CheckIdleState+0x148>)
 8002ef0:	9200      	str	r2, [sp, #0]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f000 f858 	bl	8002fa8 <UART_WaitOnFlagUntilTimeout>
 8002ef8:	1e03      	subs	r3, r0, #0
 8002efa:	d03b      	beq.n	8002f74 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002efc:	f3ef 8310 	mrs	r3, PRIMASK
 8002f00:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f02:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34
 8002f06:	2301      	movs	r3, #1
 8002f08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f383 8810 	msr	PRIMASK, r3
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4921      	ldr	r1, [pc, #132]	; (8002fa4 <UART_CheckIdleState+0x14c>)
 8002f1e:	400a      	ands	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f383 8810 	msr	PRIMASK, r3
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f32:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f34:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f36:	633b      	str	r3, [r7, #48]	; 0x30
 8002f38:	2301      	movs	r3, #1
 8002f3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f383 8810 	msr	PRIMASK, r3
}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2101      	movs	r1, #1
 8002f50:	438a      	bics	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	f383 8810 	msr	PRIMASK, r3
}
 8002f5e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2280      	movs	r2, #128	; 0x80
 8002f64:	2120      	movs	r1, #32
 8002f66:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2278      	movs	r2, #120	; 0x78
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e011      	b.n	8002f98 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2280      	movs	r2, #128	; 0x80
 8002f7e:	2120      	movs	r1, #32
 8002f80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2278      	movs	r2, #120	; 0x78
 8002f92:	2100      	movs	r1, #0
 8002f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	0018      	movs	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b010      	add	sp, #64	; 0x40
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	01ffffff 	.word	0x01ffffff
 8002fa4:	fffffedf 	.word	0xfffffedf

08002fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	1dfb      	adds	r3, r7, #7
 8002fb6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fb8:	e04b      	b.n	8003052 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	d048      	beq.n	8003052 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc0:	f7fd fd1c 	bl	80009fc <HAL_GetTick>
 8002fc4:	0002      	movs	r2, r0
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d302      	bcc.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e04b      	b.n	8003072 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d035      	beq.n	8003052 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	2208      	movs	r2, #8
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d111      	bne.n	8003018 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	0018      	movs	r0, r3
 8003000:	f000 f83c 	bl	800307c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2284      	movs	r2, #132	; 0x84
 8003008:	2108      	movs	r1, #8
 800300a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2278      	movs	r2, #120	; 0x78
 8003010:	2100      	movs	r1, #0
 8003012:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e02c      	b.n	8003072 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	401a      	ands	r2, r3
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	429a      	cmp	r2, r3
 800302a:	d112      	bne.n	8003052 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	0112      	lsls	r2, r2, #4
 8003034:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	0018      	movs	r0, r3
 800303a:	f000 f81f 	bl	800307c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2284      	movs	r2, #132	; 0x84
 8003042:	2120      	movs	r1, #32
 8003044:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2278      	movs	r2, #120	; 0x78
 800304a:	2100      	movs	r1, #0
 800304c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e00f      	b.n	8003072 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	4013      	ands	r3, r2
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	425a      	negs	r2, r3
 8003062:	4153      	adcs	r3, r2
 8003064:	b2db      	uxtb	r3, r3
 8003066:	001a      	movs	r2, r3
 8003068:	1dfb      	adds	r3, r7, #7
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d0a4      	beq.n	8002fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	0018      	movs	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	b004      	add	sp, #16
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08e      	sub	sp, #56	; 0x38
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003084:	f3ef 8310 	mrs	r3, PRIMASK
 8003088:	617b      	str	r3, [r7, #20]
  return(result);
 800308a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800308c:	637b      	str	r3, [r7, #52]	; 0x34
 800308e:	2301      	movs	r3, #1
 8003090:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f383 8810 	msr	PRIMASK, r3
}
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4926      	ldr	r1, [pc, #152]	; (8003140 <UART_EndRxTransfer+0xc4>)
 80030a6:	400a      	ands	r2, r1
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f383 8810 	msr	PRIMASK, r3
}
 80030b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b6:	f3ef 8310 	mrs	r3, PRIMASK
 80030ba:	623b      	str	r3, [r7, #32]
  return(result);
 80030bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030be:	633b      	str	r3, [r7, #48]	; 0x30
 80030c0:	2301      	movs	r3, #1
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	f383 8810 	msr	PRIMASK, r3
}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2101      	movs	r1, #1
 80030d8:	438a      	bics	r2, r1
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e2:	f383 8810 	msr	PRIMASK, r3
}
 80030e6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d118      	bne.n	8003122 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f0:	f3ef 8310 	mrs	r3, PRIMASK
 80030f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80030f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030fa:	2301      	movs	r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f383 8810 	msr	PRIMASK, r3
}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2110      	movs	r1, #16
 8003112:	438a      	bics	r2, r1
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f383 8810 	msr	PRIMASK, r3
}
 8003120:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2280      	movs	r2, #128	; 0x80
 8003126:	2120      	movs	r1, #32
 8003128:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	46bd      	mov	sp, r7
 800313a:	b00e      	add	sp, #56	; 0x38
 800313c:	bd80      	pop	{r7, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	fffffedf 	.word	0xfffffedf

08003144 <memset>:
 8003144:	0003      	movs	r3, r0
 8003146:	1882      	adds	r2, r0, r2
 8003148:	4293      	cmp	r3, r2
 800314a:	d100      	bne.n	800314e <memset+0xa>
 800314c:	4770      	bx	lr
 800314e:	7019      	strb	r1, [r3, #0]
 8003150:	3301      	adds	r3, #1
 8003152:	e7f9      	b.n	8003148 <memset+0x4>

08003154 <__libc_init_array>:
 8003154:	b570      	push	{r4, r5, r6, lr}
 8003156:	2600      	movs	r6, #0
 8003158:	4c0c      	ldr	r4, [pc, #48]	; (800318c <__libc_init_array+0x38>)
 800315a:	4d0d      	ldr	r5, [pc, #52]	; (8003190 <__libc_init_array+0x3c>)
 800315c:	1b64      	subs	r4, r4, r5
 800315e:	10a4      	asrs	r4, r4, #2
 8003160:	42a6      	cmp	r6, r4
 8003162:	d109      	bne.n	8003178 <__libc_init_array+0x24>
 8003164:	2600      	movs	r6, #0
 8003166:	f000 f819 	bl	800319c <_init>
 800316a:	4c0a      	ldr	r4, [pc, #40]	; (8003194 <__libc_init_array+0x40>)
 800316c:	4d0a      	ldr	r5, [pc, #40]	; (8003198 <__libc_init_array+0x44>)
 800316e:	1b64      	subs	r4, r4, r5
 8003170:	10a4      	asrs	r4, r4, #2
 8003172:	42a6      	cmp	r6, r4
 8003174:	d105      	bne.n	8003182 <__libc_init_array+0x2e>
 8003176:	bd70      	pop	{r4, r5, r6, pc}
 8003178:	00b3      	lsls	r3, r6, #2
 800317a:	58eb      	ldr	r3, [r5, r3]
 800317c:	4798      	blx	r3
 800317e:	3601      	adds	r6, #1
 8003180:	e7ee      	b.n	8003160 <__libc_init_array+0xc>
 8003182:	00b3      	lsls	r3, r6, #2
 8003184:	58eb      	ldr	r3, [r5, r3]
 8003186:	4798      	blx	r3
 8003188:	3601      	adds	r6, #1
 800318a:	e7f2      	b.n	8003172 <__libc_init_array+0x1e>
 800318c:	080031f4 	.word	0x080031f4
 8003190:	080031f4 	.word	0x080031f4
 8003194:	080031f8 	.word	0x080031f8
 8003198:	080031f4 	.word	0x080031f4

0800319c <_init>:
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a2:	bc08      	pop	{r3}
 80031a4:	469e      	mov	lr, r3
 80031a6:	4770      	bx	lr

080031a8 <_fini>:
 80031a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ae:	bc08      	pop	{r3}
 80031b0:	469e      	mov	lr, r3
 80031b2:	4770      	bx	lr
